Metadata-Version: 2.1
Name: brutils
Version: 2.0.0
Summary: Utils library for specific Brazilian businesses
Home-page: https://github.com/brazilian-utils/brutils
License: MIT
Keywords: cpf,cnpj,cep,document,validation,brazil,brazilian
Author: The Brazilian Utils Organization
Requires-Python: >=3.7,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Natural Language :: Portuguese
Classifier: Natural Language :: Portuguese (Brazilian)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Office/Business
Classifier: Topic :: Software Development :: Internationalization
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Project-URL: Repository, https://github.com/brazilian-utils/brutils
Description-Content-Type: text/markdown

<div align="center">
<h1>ðŸ‡§ðŸ‡· Brazilian Utils</h1>

<p>Utils library for Brazilian-specific businesses.</p>


[![codecov](https://codecov.io/gh/brazilian-utils/brutils-python/branch/main/graph/badge.svg?token=5KNECS8JYF)](https://codecov.io/gh/brazilian-utils/brutils-python)
[![Downloads per Month](https://shields.io/pypi/dm/brutils)](https://pypi.org/project/brutils/)
[![Package version](https://shields.io/pypi/v/brutils)](https://pypi.org/project/brutils/)

### [Looking for the english version?](README_EN.md)
### [Procurando a documentaÃ§Ã£o da versÃ£o 1.0.1?](/documentation%20v1.0.1/PORTUGUESE_VERSION.md)
</div>

# IntroduÃ§Ã£o

Brazilian Utils Ã© uma biblioteca com foco na resoluÃ§Ã£o de problemas que enfrentamos diariamente no desenvolvimento de aplicaÃ§Ãµes para o business Brasileiro.

## InstalaÃ§Ã£o

```
pip install brutils
```

## UtilizaÃ§Ã£o

Para usar um de nossos utilitÃ¡rios, basta importar a funÃ§Ã£o necessÃ¡ria, como no exemplo abaixo:

```python
>>> from brutils import is_valid_cpf
>>> is_valid_cpf('00011122233')
False
```

# UtilitÃ¡rios

- [CPF](#cpf)
  - [is_valid_cpf](#is_valid_cpf)
  - [format_cpf](#format_cpf)
  - [remove_symbols_cpf](#remove_symbols_cpf)
  - [generate_cpf](#generate_cpf)
- [CNPJ](#cnpj)
  - [is_valid_cnpj](#is_valid_cnpj)
  - [format_cnpj](#format_cnpj)
  - [remove_symbols_cnpj](#remove_symbols_cnpj)
  - [generate_cnpj](#generate_cnpj)
- [CEP](#cep)
  - [is_valid_cep](#is_valid_cep)
  - [format_cep](#format_cep)
  - [remove_symbols_cep](#remove_symbols_cep)
  - [generate_cep](#generate_cep)  

## CPF

### is_valid_cpf

Verifica se o CPF Ã© valido. Apenas nÃºmeros, formatados como string. NÃ£o verifica se o CPF existe.

```python
>>> from brutils import is_valid_cpf
>>> is_valid_cpf('00011122233')
False
```

### format_cpf

Formata o CPF. Retorna None se o CPF for invÃ¡lido.

```python
>>> from brutils import format_cpf
>>> format_cpf('11144477735')
'111.444.777-35'
```

### remove_symbols_cpf

Remove os sÃ­mbolos de formataÃ§Ã£o do CPF e retorna somente nÃºmeros. Filtra apenas os sÃ­mbolos utilizados para a validaÃ§Ã£o do CPF. Propositalmente nÃ£o remove outros sÃ­mbolos.

```python
>>> from brutils import remove_symbols_cpf
>>> remove_symbols_cpf('000.111.222-33')
'00011122233'
```

### generate_cpf

Gera um CPF vÃ¡lido aleatÃ³rio.

```python
>>> from brutils import generate_cpf
>>> generate_cpf()
'17433964657'
```

## CNPJ

### is_valid_cnpj

Verifica se o CNPJ Ã© valido. Apenas nÃºmeros, formatados como string. NÃ£o verifica se o CNPJ existe.

```python
>>> from brutils import is_valid_cnpj
>>> is_valid_cnpj('00111222000133')
False
```

### format_cnpj

Formata o CNPJ.

```python
>>> from brutils import format_cnpj
>>> format_cnpj('00111222000100')
'00.111.222/0001-00'
```

### remove_symbols_cnpj

Remove os sÃ­mbolos de formataÃ§Ã£o do CPF e retorna somente nÃºmeros. Filtra apenas os sÃ­mbolos utilizados para a validaÃ§Ã£o do CPF. Propositalmente nÃ£o remove outros sÃ­mbolos.

```python
>>> from brutils import remove_symbols_cnpj
>>> remove_symbols_cnpj('00.111.222/0001-00')
'00111222000100'
```

### generate_cnpj

Gera um CNPJ vÃ¡lido aleatÃ³rio.

```python
>>> from brutils import generate_cnpj
>>> generate_cnpj()
'34665388000161'
```

## CEP

### is_valid_cep

Verifica se o CEP Ã© valido. Apenas nÃºmeros, formatados como string. NÃ£o verifica se o CEP existe.

```python
>>> from brutils import is_valid_cep
>>> is_valid_cep('01310200')
True
```

### format_cep

Formata o CEP. Retorna None se o CEP for invÃ¡lido.

```python
>>> from brutils import format_cep
>>> format_cep('01310200')
'01310-200'
```

### remove_symbols_cep

Remove os sÃ­mbolos de formataÃ§Ã£o do CEP e retorna somente nÃºmeros. Filtra apenas os sÃ­mbolos utilizados para a validaÃ§Ã£o do CEP. Propositalmente nÃ£o remove outros sÃ­mbolos.

```python
>>> from brutils import remove_symbols_cep
>>> remove_symbols_cep('01310-200')
'01310200'
```

### generate_cep

Gera um CEP vÃ¡lido aleatÃ³rio.

```python
>>> from brutils import generate_cep
>>> generate_cep()
'77520503'
```


## Contributing

Sua colaboraÃ§Ã£o Ã© sempre bem-vinda! Preparamos o [arquivo contributing][contributing] pra te ajudar nos primeiros passos. Toda ajuda conta! Sinta-se livre para criar novas [GitHub issues][github-issues] e interagir aqui.

Vamos construir juntos! ðŸš€ðŸš€

[github-issues]: https://github.com/brazilian-utils/brutils-python/issues
[contributing]: CONTRIBUTING.md

