# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Thu Jul 20 09:12:34 2023
#  Target Database = postgresql
#
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_fura.db.tables.eatok import tEatok

class dEatokInsert:
    __slots__ = ("_dbcon", "_dbstmnt", "irec")

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.irec     = tEatok()

    async def __aenter__(self):
        """
        With statement enter.
        """
        return self

    async def __aexit__(self, type, value, traceback):
        """
        With statement exit.
        """
        await self._destroy()

    async def _destroy(self):
        if self._dbstmnt:
            await self._dbstmnt.destroy()
            self._dbstmnt = None

    async def exec_deft(self,
                        id: int,
                        tok: str,
                        site_id: int,
                        usr_id: str,
                        func_id: str,
                        grant_usr_id: str,
                        created: datetime.datetime,
                        expires: datetime.datetime,
                        max_usages: int,
                        usages: int) -> "dEatokInsert":
        """
        Execute the query by setting all the inputs.

        :param id: int
        :param tok: str
        :param site_id: int
        :param usr_id: str
        :param func_id: str
        :param grant_usr_id: str
        :param created: datetime.datetime
        :param expires: datetime.datetime
        :param max_usages: int
        :param usages: int
        :return: Self for convenience.
        """
        self.irec.id = id
        self.irec.tok = tok
        self.irec.site_id = site_id
        self.irec.usr_id = usr_id
        self.irec.func_id = func_id
        self.irec.grant_usr_id = grant_usr_id
        self.irec.created = created
        self.irec.expires = expires
        self.irec.max_usages = max_usages
        self.irec.usages = usages

        return await self.exec()

    async def exec(self, irec: tEatok = None) -> "dEatokInsert":
        """
        Execute the query, optionally passing in the input rec.

        :param irec:
        :return: Self for convenience.
        """
        if irec:
            self.irec._copy_from(irec)

        await self._destroy()

        self._dbstmnt = await self._dbcon.statement("EatokInsert", self._dbcon.STMNT_TYPE_CUD)

        self._dbstmnt.sql("""insert into fura.Eatok (
  tok,
  site_id,
  usr_id,
  func_id,
  grant_usr_id,
  created,
  expires,
  max_usages,
  usages
) values (
  :tok,
  :site_id,
  :usr_id,
  :func_id,
  :grant_usr_id,
  :created,
  :expires,
  :max_usages,
  :usages
)""")

        self._dbstmnt.bind_in("tok", self.irec.tok, str, 256)
        self._dbstmnt.bind_in("site_id", self.irec.site_id, int, 4)
        self._dbstmnt.bind_in("usr_id", self.irec.usr_id, str, 128)
        self._dbstmnt.bind_in("func_id", self.irec.func_id, str, 128)
        self._dbstmnt.bind_in("grant_usr_id", self.irec.grant_usr_id, str, 128)
        self._dbstmnt.bind_in("created", self.irec.created, datetime.datetime)
        self._dbstmnt.bind_in("expires", self.irec.expires, datetime.datetime)
        self._dbstmnt.bind_in("max_usages", self.irec.max_usages, int, 4)
        self._dbstmnt.bind_in("usages", self.irec.usages, int, 4)

        await self._dbcon.execute(self._dbstmnt)

        self.irec.id = await self._dbcon.post_get_sequence(self._dbstmnt, "fura.Eatok", "id", 8)

        if irec:
            irec._copy_from(self.irec)

        return self

