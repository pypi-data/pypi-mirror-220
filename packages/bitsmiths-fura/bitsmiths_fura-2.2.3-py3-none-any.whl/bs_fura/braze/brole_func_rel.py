# This file was generated by mettle.genes.braze.GenPy3 [ver 2.2] on Thu Jul 20 09:12:34 2023
#

import datetime
import uuid
import dataclasses
import typing
import mettle.braze
import mettle.lib

from mettle.io.iserializable import ISerializable

@dataclasses.dataclass(slots=True)
class bRoleFuncRel(ISerializable):
    func_id: str = dataclasses.field(default='')
    func_descr: str = dataclasses.field(default='')
    func_action: str = dataclasses.field(default='')
    fgrp_id: str = dataclasses.field(default='')
    fgrp_descr: str = dataclasses.field(default='')
    enabled: bool = dataclasses.field(default=False)

    def clear(self):
        self.func_id = ''
        self.func_descr = ''
        self.func_action = ''
        self.fgrp_id = ''
        self.fgrp_descr = ''
        self.enabled = False

    def _name(self) -> str:
        """
        Get the struct name.

        :return: Name of the struct
        """
        return 'bRoleFuncRel'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize this struct.

        :param _w:
        :param _oname:
        """
        if not _oname:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_string("funcId", self.func_id)
        _w.write_string("funcDescr", self.func_descr)
        _w.write_char("funcAction", self.func_action)
        _w.write_string("fgrpId", self.fgrp_id)
        _w.write_string("fgrpDescr", self.fgrp_descr)
        _w.write_bool("enabled", self.enabled)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
        """
        Deserialize this struct.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.func_id = _r.read_string("funcId")
        self.func_descr = _r.read_string("funcDescr")
        self.func_action = _r.read_char("funcAction")
        self.fgrp_id = _r.read_string("fgrpId")
        self.fgrp_descr = _r.read_string("fgrpDescr")
        self.enabled = _r.read_bool("enabled")
        _r.read_end(_oname)

    @staticmethod
    def _cache_davs(dvc: mettle.lib.DavCache = None):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: Target cache, if None a new one is created and returned.
        """
        if not dvc:
            dvc = mettle.lib.DavCache()

        return dvc

    def _get_davs(self, dvc=None):
        return self._cache_davs(dvc)

    # List class
    class List(list, ISerializable):

        def _name(self) -> str:
            """
            Get list name
            """
            return 'bRoleFuncRel.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None) -> int:
            """
            Deserialize the list

            :param _r:
            :param _oname:
            """
            if _oname == None:
                  _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = bRoleFuncRel()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc: mettle.lib.DavCache = None) -> int:
            """
            Cache the davs

            :param dvc:
            """
            return bRoleFuncRel._cache_davs(dvc)

