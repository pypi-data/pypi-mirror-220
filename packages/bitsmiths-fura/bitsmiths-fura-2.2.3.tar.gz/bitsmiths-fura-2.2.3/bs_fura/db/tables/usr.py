# This file was generated by mettle.genes.db.GenPy3 [ver 2.2] on Thu Jul 20 09:12:34 2023
#

import datetime
import uuid
import time
import dataclasses
import typing
import mettle.io
import mettle.db

from .usr_key import tUsrKey

@dataclasses.dataclass(slots=True)
class tUsr(mettle.io.ISerializable, mettle.db.IPrimaryKey):

    site_id: int = dataclasses.field(default=0, compare=True, hash=True)
    id: str = dataclasses.field(default='', compare=True, hash=True)
    role_id: str = dataclasses.field(default='', compare=False)
    status: str = dataclasses.field(default='', compare=False)
    name_first: str = dataclasses.field(default='', compare=False)
    name_last: str = dataclasses.field(default='', compare=False)
    title: str = dataclasses.field(default='', compare=False)
    date_activate: typing.Optional[datetime.date] = dataclasses.field(default=None, compare=False)
    date_expire: typing.Optional[datetime.date] = dataclasses.field(default=None, compare=False)
    email1: str = dataclasses.field(default='', compare=False)
    email2: str = dataclasses.field(default='', compare=False)
    cellno1: str = dataclasses.field(default='', compare=False)
    cellno2: str = dataclasses.field(default='', compare=False)
    modified_by: str = dataclasses.field(default='', compare=False)
    tm_stamp: typing.Optional[datetime.datetime] = dataclasses.field(default=None, compare=False)
    usrtype_id: str = dataclasses.field(default='', compare=False)
    email1_conf: bool = dataclasses.field(default=False, compare=False)
    email2_conf: bool = dataclasses.field(default=False, compare=False)
    cellno1_conf: bool = dataclasses.field(default=False, compare=False)
    cellno2_conf: bool = dataclasses.field(default=False, compare=False)
    opt_system: bool = dataclasses.field(default=False, compare=False)
    opt_market: bool = dataclasses.field(default=False, compare=False)
    opt_fail_login: bool = dataclasses.field(default=False, compare=False)

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.site_id = 0
        self.id = ''
        self.role_id = ''
        self.status = ''
        self.name_first = ''
        self.name_last = ''
        self.title = ''
        self.date_activate = None
        self.date_expire = None
        self.email1 = ''
        self.email2 = ''
        self.cellno1 = ''
        self.cellno2 = ''
        self.modified_by = ''
        self.tm_stamp = None
        self.usrtype_id = ''
        self.email1_conf = False
        self.email2_conf = False
        self.cellno1_conf = False
        self.cellno2_conf = False
        self.opt_system = False
        self.opt_market = False
        self.opt_fail_login = False

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'tUsr'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int32("site_id", self.site_id)
        _w.write_string("id", self.id)
        _w.write_string("role_id", self.role_id)
        _w.write_char("status", self.status)
        _w.write_string("name_first", self.name_first)
        _w.write_string("name_last", self.name_last)
        _w.write_string("title", self.title)
        _w.write_date("date_activate", self.date_activate)
        _w.write_date("date_expire", self.date_expire)
        _w.write_string("email1", self.email1)
        _w.write_string("email2", self.email2)
        _w.write_string("cellno1", self.cellno1)
        _w.write_string("cellno2", self.cellno2)
        _w.write_string("modified_by", self.modified_by)
        _w.write_datetime("tm_stamp", self.tm_stamp)
        _w.write_string("usrtype_id", self.usrtype_id)
        _w.write_bool("email1_conf", self.email1_conf)
        _w.write_bool("email2_conf", self.email2_conf)
        _w.write_bool("cellno1_conf", self.cellno1_conf)
        _w.write_bool("cellno2_conf", self.cellno2_conf)
        _w.write_bool("opt_system", self.opt_system)
        _w.write_bool("opt_market", self.opt_market)
        _w.write_bool("opt_fail_login", self.opt_fail_login)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.site_id = _r.read_int32("site_id")
        self.id = _r.read_string("id")
        self.role_id = _r.read_string("role_id")
        self.status = _r.read_char("status")
        self.name_first = _r.read_string("name_first")
        self.name_last = _r.read_string("name_last")
        self.title = _r.read_string("title")
        self.date_activate = _r.read_date("date_activate")
        self.date_expire = _r.read_date("date_expire")
        self.email1 = _r.read_string("email1")
        self.email2 = _r.read_string("email2")
        self.cellno1 = _r.read_string("cellno1")
        self.cellno2 = _r.read_string("cellno2")
        self.modified_by = _r.read_string("modified_by")
        self.tm_stamp = _r.read_datetime("tm_stamp")
        self.usrtype_id = _r.read_string("usrtype_id")
        self.email1_conf = _r.read_bool("email1_conf")
        self.email2_conf = _r.read_bool("email2_conf")
        self.cellno1_conf = _r.read_bool("cellno1_conf")
        self.cellno2_conf = _r.read_bool("cellno2_conf")
        self.opt_system = _r.read_bool("opt_system")
        self.opt_market = _r.read_bool("opt_market")
        self.opt_fail_login = _r.read_bool("opt_fail_login")
        _r.read_end(_oname)

    def _copy_from(self, rec: "tUsr"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.site_id = rec.site_id
        self.id = rec.id
        self.role_id = rec.role_id
        self.status = rec.status
        self.name_first = rec.name_first
        self.name_last = rec.name_last
        self.title = rec.title
        self.date_activate = rec.date_activate
        self.date_expire = rec.date_expire
        self.email1 = rec.email1
        self.email2 = rec.email2
        self.cellno1 = rec.cellno1
        self.cellno2 = rec.cellno2
        self.modified_by = rec.modified_by
        self.tm_stamp = rec.tm_stamp
        self.usrtype_id = rec.usrtype_id
        self.email1_conf = rec.email1_conf
        self.email2_conf = rec.email2_conf
        self.cellno1_conf = rec.cellno1_conf
        self.cellno2_conf = rec.cellno2_conf
        self.opt_system = rec.opt_system
        self.opt_market = rec.opt_market
        self.opt_fail_login = rec.opt_fail_login

    def _write_pk(self, _key: "tUsr"):
        """
        Write the primary key columns to the key object.

        :param _key:
        """
        self._write_key(_key)

    def _read_pk(self, _key: "tUsr"):
        """
        Read the primary key columns from the key object.

        :param _key:
        """
        self._read_key(_key)

    def _serialize_key(self, _w: mettle.io.IWriter):
        """
        Serialize the primary key to a stream.

        :param _w:
        """
        _key = tUsrKey()

        self._write_key(_key)
        _key._serialize(_w)

    def _deserialize_key(self, _r: mettle.io.IReader):
        """
        Deserialize the primary key from a stream.

        :param _r:
        """
        _key = tUsrKey()

        _key._deserialize(_r)
        self._read_key(_key)

    @staticmethod
    def _cache_davs(dvc=None, for_ins: bool = False, key_only: bool = False):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: (mettle.lib.DavCache), target cache, if None a new one is created and returned.
        :param for_ins: Davs for insert.
        :param key_only: Davs by key only, ie for delete/selectone.
        """
        if dvc is None:
            dvc = mettle.lib.DavCache()

        dvc.add_targ("site_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        if key_only:
            return dvc

        dvc.add_targ("role_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 1))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.In, ['A','D','S','X','E']))
        dvc.add_targ("name_first", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("name_last", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("title", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 5))
        dvc.add_targ("email1", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 256))
        dvc.add_targ("email2", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 256))
        dvc.add_targ("cellno1", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 32))
        dvc.add_targ("cellno2", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 32))
        dvc.add_targ("modified_by", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("modified_by", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("usrtype_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("usrtype_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 32))
        dvc.add_targ("email1_conf", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("email2_conf", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("cellno1_conf", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("cellno2_conf", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("opt_system", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("opt_market", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("opt_fail_login", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))

        return dvc

    def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
        tUsr._cache_davs(dvc, for_ins, key_only)

    def _write_key(self, _key: tUsrKey):
        """
        Write primary key columns to _key.

        :param _key:
        """
        _key.site_id = self.site_id
        _key.id = self.id

    def _read_key(self, _key: tUsrKey):
        """
        Read the primary key columns from _key.

        :param _key:
        """
        self.site_id = _key.site_id
        self.id = _key.id

    class Status_Couplet(dict):
        key_active = "A"
        key_disabled = "D"
        key_suspended = "S"
        key_deleted = "X"
        key_expired = "E"

        value_active = "Active"
        value_disabled = "Disabled"
        value_suspended = "Suspended"
        value_deleted = "Deleted"
        value_expired = "Expired"

        def __init__(self):
            self[self.key_active] = self.value_active
            self[self.key_disabled] = self.value_disabled
            self[self.key_suspended] = self.value_suspended
            self[self.key_deleted] = self.value_deleted
            self[self.key_expired] = self.value_expired

        @staticmethod
        def get_value(key):
            if key == tUsr.Status_Couplet.key_active:
                return tUsr.Status_Couplet.value_active

            if key == tUsr.Status_Couplet.key_disabled:
                return tUsr.Status_Couplet.value_disabled

            if key == tUsr.Status_Couplet.key_suspended:
                return tUsr.Status_Couplet.value_suspended

            if key == tUsr.Status_Couplet.key_deleted:
                return tUsr.Status_Couplet.value_deleted

            if key == tUsr.Status_Couplet.key_expired:
                return tUsr.Status_Couplet.value_expired

            return ""

    @staticmethod
    def _pk_compare(x, y) -> int:
        """
        Compare function do primary key comparisons for list sorts and searches.

        :return: zero for x == y, negative for x < y, positive for x > y
        """
        rc = x.site_id - y.site_id

        if rc != 0:
            return rc

        rc = (x.id > y.id) - (x.id < y.id)

        return rc

    def __lt__(self, other):
        return other and self._pk_compare(self, other) < 0

    def __gt__(self, other):
        return other and self._pk_compare(self, other) > 0

    def __eq__(self, other):
        return other and self._pk_compare(self, other) == 0

    def __le__(self, other):
        return other and self._pk_compare(self, other) <= 0

    def __ge__(self, other):
        return other and self._pk_compare(self, other) >= 0

    def __ne__(self, other):
        return other == None or self._pk_compare(self, other)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'tUsr.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = tUsr()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
            return tUsr._cache_davs(dvc, for_ins, key_only)

