# print(len([{'name': 'companion-app'}, {'name': 'chatgpt.js'}, {'name': 'long_llama'}, {'name': 'htmx'}, {'name': 'scipy2023-deeplearning'}, {'name': 'gpt-researcher'}, {'name': 'The-Art-of-Linear-Algebra'}, {'name': 'gpt-prompt-engineer'}, {'name': 'Plan-and-Solve-Prompting'}, {'name': 'engine'}, {'name': 'simpleaichat'}, {'name': 'litechain'}, {'name': 'superagent'}, {'name': 'gorilla'}, {'name': 'gorilla-cli'}, {'name': 'tinyvector'}, {'name': 'valmi-activation'}, {'name': 'gpt-migrate'}, {'name': 'lemonai-server'}, {'name': 'lemonai-analytics'}, {'name': 'lemonai'}, {'name': 'ai-jsx'}, {'name': 'spacedrive'}, {'name': 'composer'}, {'name': 'chathn'}, {'name': 'kaguya'}, {'name': 'docs'}, {'name': 'openpm'}, {'name': 'workgpt'}, {'name': 'pepy'}, {'name': 'awesome-selfhosted'}, {'name': 'WizardLM'}, {'name': 'novel'}, {'name': 'OpenChat'}, {'name': 'ai'}, {'name': 'vllm'}, {'name': 'nix.dev'}, {'name': 'OpenLLM'}, {'name': 'poop'}, {'name': 'LLaMA-Efficient-Tuning'}, {'name': 'camel'}, {'name': 'tauri'}, {'name': 'machine-learning-for-trading'}, {'name': 'FinGPT'}, {'name': 'isle'}, {'name': 'FlagAI'}, {'name': 'gpt-engineer'}, {'name': 'plugnplai'}, {'name': 'cypress'}, {'name': 'bloop'}, {'name': 'listmonk'}, {'name': 'lodash'}, {'name': 'pnpm'}, {'name': 'turbo'}, {'name': 'fresh'}, {'name': 'prisma'}, {'name': 'qwik'}, {'name': 'deno'}, {'name': 'kit'}, {'name': 'astro'}, {'name': 'bun'}, {'name': 'tensor2tensor'}, {'name': 'ggml'}, {'name': 'axodox-machinelearning'}, {'name': 'onnxruntime'}, {'name': 'alphadev'}, {'name': 'ChatDB'}, {'name': 'public-apis'}, {'name': '30-seconds-of-code'}, {'name': 'gpt4free-ts'}, {'name': 'AI-For-Beginners'}, {'name': 'ledger'}, {'name': 'db'}, {'name': 'alpaca-lora'}, {'name': 'FastChat'}, {'name': 'LoRA'}, {'name': 'GPT4Tools'}, {'name': 'Awesome-Multimodal-Large-Language-Models'}, {'name': 'devops-exercises'}, {'name': 'fastapi'}, {'name': 'toolformer-pytorch'}, {'name': 'nucliadb'}, {'name': 'God-Level-Data-Science-ML-Full-Stack'}, {'name': 'blink'}, {'name': 'femtoGPT'}, {'name': 'mlc-llm'}, {'name': 'MeZO'}, {'name': 'Voyager'}, {'name': 'CodeTF'}, {'name': 'evals'}, {'name': 'gpt4free'}, {'name': 'daisyui'}, {'name': 'nvim-lspconfig'}, {'name': 'SuperAGI'}, {'name': 'localGPT'}, {'name': 'gpt4all'}, {'name': 'helicone'}, {'name': 'skip_gram'}, {'name': 'trpc'}, {'name': 'deeplake'}, {'name': 'lancedb'}, {'name': 'timely-dataflow'}, {'name': 'kafka'}, {'name': 'debezium'}, {'name': 'zookeeper'}, {'name': 'FigmaChain'}, {'name': 'NeMo-Guardrails'}, {'name': 'notion-qa'}, {'name': 'azure-search-openai-demo'}, {'name': 'ChatFiles'}, {'name': 'paper-qa'}, {'name': 'myGPTReader'}, {'name': 'ColossalAI'}, {'name': 'docarray'}, {'name': 'txtai'}, {'name': 'realtime'}, {'name': 'bottledwater-pg'}, {'name': 'databus'}, {'name': 'semantic-kernel'}, {'name': 'cognitive-search-vector-pr'}, {'name': 'open-source-alternatives'}, {'name': 'flash-attention'}, {'name': 'OpenSearch'}, {'name': 'babyagi'}, {'name': 'RedPajama-Data'}, {'name': 'dust'}, {'name': 'guardrails'}, {'name': 'langflow'}, {'name': 'fairseq'}, {'name': 'joshuto'}, {'name': 'comprehensive-rust'}, {'name': 'unstructured'}, {'name': 'mindsdb'}, {'name': 'llama-hub'}, {'name': 'sqlglot'}, {'name': 'google-research'}, {'name': 'nmslib'}, {'name': 'trogon'}, {'name': 'psychic'}, {'name': 'DB-GPT'}, {'name': 'next-enterprise'}, {'name': 'AgentGPT'}, {'name': 'awesome-langchain'}, {'name': 'awesome-mlops'}, {'name': 'Prompt-Engineering-Guide'}, {'name': 'the-algorithm'}, {'name': 'llama_index'}, {'name': 'annoy'}, {'name': 'faiss'}, {'name': 'hachi'}, {'name': 'SemanticFinder'}, {'name': 'pgvector'}, {'name': 'marqo'}, {'name': 'getting-started'}, {'name': 'GPTCache'}, {'name': 'minio'}, {'name': 'hnswlib'}, {'name': 'chroma'}, {'name': 'ImHex'}, {'name': 'menubar'}, {'name': 'developer'}, {'name': 'papers-we-love'}, {'name': 'guidance'}, {'name': 'quivr'}, {'name': 'awesome-incident-response'}, {'name': 'privateGPT'}, {'name': 'open-llms'}, {'name': 'shap-e'}, {'name': 'malloy'}, {'name': 'meilisearch'}, {'name': 'roapi'}, {'name': 'vector'}, {'name': 'polars'}, {'name': 'arrow-datafusion'}, {'name': 'phoenix'}, {'name': 'Flowise'}, {'name': 'Mr.-Ranedeer-AI-Tutor'}, {'name': 'drizzle-orm'}, {'name': 'pandas-ai'}, {'name': 'fauxpilot'}, {'name': 'tabby'}, {'name': 'evadb'}, {'name': 'helm'}, {'name': 'dbeaver'}, {'name': 'code-narrator'}, {'name': 'vscode-dbt-power-user'}, {'name': 'edgedb'}, {'name': 'ruff'}, {'name': 'langchain'}, {'name': 'uptrain'}, {'name': 'tableflow'}, {'name': 'ML-Papers-of-the-Week'}, {'name': 'JARVIS'}, {'name': 'Auto-GPT'}, {'name': 'openai-cookbook'}, {'name': 'stanford_alpaca'}, {'name': 'dolly'}, {'name': 'cleanlab'}, {'name': 'chatgpt-retrieval-plugin'}, {'name': 'deepchecks'}, {'name': 'dactyl-manuform'}, {'name': 'firenvim'}, {'name': 'chaos_genius'}, {'name': 'vim-commentary'}, {'name': 'kickstart.nvim'}, {'name': 'lsp-zero.nvim'}, {'name': 'telescope.nvim'}, {'name': 'packer.nvim'}, {'name': 'init.lua'}, {'name': 'win32yank'}, {'name': 'nvim-lua-conf'}, {'name': 'config'}, {'name': 'lago'}, {'name': 'prophet'}, {'name': 'vim-easymotion'}, {'name': 'vscode-neovim'}, {'name': 'neovim'}, {'name': 'kiteco-public'}, {'name': 'atlas'}, {'name': 'data-diff'}, {'name': 'signoz'}, {'name': 'mojo'}, {'name': 'AppFlowy'}, {'name': 'pg_jsonschema'}, {'name': 'whale'}, {'name': 'OpenMetadata'}, {'name': 'schema-registry'}, {'name': 'ngraph'}, {'name': '3d-force-graph'}, {'name': 'antlr4'}, {'name': 'calcite'}, {'name': 'mo-sql-parsing'}, {'name': 'zetasql'}, {'name': 'sqlfluff'}]))


def get_value(curr_dict, target_key):
    if isinstance(curr_dict, dict):
        for key, value in curr_dict.items():
            if key == target_key:
                return value
            elif isinstance(value, dict):
                result = get_value(value, target_key)
                if result is not None:
                    return result
    return None

# Example usage:
data = {'a': 1, 'b': {'c': 3, 'd': {'e': 4}}}

key_to_find = 'c'
result = get_value(data, key_to_find)
if result is not None:
    print(f"The value for key '{key_to_find}' is: {result}")
else:
    print(f"The key '{key_to_find}' was not found in the dictionary.")