# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Tell mypy (a type checker) to ignore all errors from this file.
# See https://mypy.readthedocs.io/en/stable/config_file.html?highlight=ignore-errors#confval-ignore_errors
# mypy: ignore-errors

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime

# Used for default argument values
DEFAULT = object()


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder():
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer after consuming")
        finally:
            self.free()


class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class RustBufferStream(object):
    """
    Helper for structured reading of bytes from a RustBuffer
    """

    def __init__(self, rbuf):
        self.rbuf = rbuf
        self.offset = 0

    def remaining(self):
        return self.rbuf.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.rbuf.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        data = self.rbuf.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def readI8(self):
        return self._unpack_from(1, ">b")

    def readU8(self):
        return self._unpack_from(1, ">B")

    def readI16(self):
        return self._unpack_from(2, ">h")

    def readU16(self):
        return self._unpack_from(2, ">H")

    def readI32(self):
        return self._unpack_from(4, ">i")

    def readU32(self):
        return self._unpack_from(4, ">I")

    def readI64(self):
        return self._unpack_from(8, ">q")

    def readU64(self):
        return self._unpack_from(8, ">Q")

    def readFloat(self):
        v = self._unpack_from(4, ">f")
        return v

    def readDouble(self):
        return self._unpack_from(8, ">d")


class RustBufferBuilder(object):
    """
    Helper for structured writing of bytes into a RustBuffer.
    """

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def writeI8(self, v):
        self._pack_into(1, ">b", v)

    def writeU8(self, v):
        self._pack_into(1, ">B", v)

    def writeI16(self, v):
        self._pack_into(2, ">h", v)

    def writeU16(self, v):
        self._pack_into(2, ">H", v)

    def writeI32(self, v):
        self._pack_into(4, ">i", v)

    def writeU32(self, v):
        self._pack_into(4, ">I", v)

    def writeI64(self, v):
        self._pack_into(8, ">q", v)

    def writeU64(self, v):
        self._pack_into(8, ">Q", v)

    def writeFloat(self, v):
        self._pack_into(4, ">f", v)

    def writeDouble(self, v):
        self._pack_into(8, ">d", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_PANIC)"
        else:
            return "RustCallStatus(<invalid code>)"

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the FfiConverter for the error class that corresponds to the result.
    call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        return result
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = FfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: RustBuffer, buf_ptr: *mut RustBuffer) -> int`
FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, RustBuffer, ctypes.POINTER(RustBuffer))
# Types conforming to `FfiConverterPrimitive` pass themselves directly over the FFI.
class FfiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

# Helper class for wrapper types that will always go through a RustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class FfiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consumeWithStream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with RustBuffer.allocWithBuilder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# This is how we find and load the dynamic library provided by the component.
# For now we just look it up by name.
#
# XXX TODO: This will probably grow some magic for resolving megazording in future.
# E.g. we might start by looking for the named component in `libuniffi.so` and if
# that fails, fall back to loading it separately from `lib${componentName}.so`.

from pathlib import Path

def loadIndirect():
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    lib = libname.format("rgblibffi")
    path = str(Path(__file__).parent / lib)
    return ctypes.cdll.LoadLibrary(path)

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.ffi_rgb_lib_9a28_BlindedUTXO_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_BlindedUTXO_object_free.restype = None
_UniFFILib.rgb_lib_9a28_BlindedUTXO_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_BlindedUTXO_new.restype = ctypes.c_void_p
_UniFFILib.ffi_rgb_lib_9a28_TransportEndpoint_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_TransportEndpoint_object_free.restype = None
_UniFFILib.rgb_lib_9a28_TransportEndpoint_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_TransportEndpoint_new.restype = ctypes.c_void_p
_UniFFILib.rgb_lib_9a28_TransportEndpoint_transport_type.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_TransportEndpoint_transport_type.restype = RustBuffer
_UniFFILib.ffi_rgb_lib_9a28_Invoice_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_Invoice_object_free.restype = None
_UniFFILib.rgb_lib_9a28_Invoice_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Invoice_new.restype = ctypes.c_void_p
_UniFFILib.rgb_lib_9a28_Invoice_from_invoice_data.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Invoice_from_invoice_data.restype = ctypes.c_void_p
_UniFFILib.rgb_lib_9a28_Invoice_invoice_data.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Invoice_invoice_data.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Invoice_invoice_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Invoice_invoice_string.restype = RustBuffer
_UniFFILib.ffi_rgb_lib_9a28_Wallet_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_Wallet_object_free.restype = None
_UniFFILib.rgb_lib_9a28_Wallet_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_new.restype = ctypes.c_void_p
_UniFFILib.rgb_lib_9a28_Wallet_backup.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_backup.restype = None
_UniFFILib.rgb_lib_9a28_Wallet_blind.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_blind.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_create_utxos.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    RustBuffer,
    RustBuffer,
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_create_utxos.restype = ctypes.c_uint8
_UniFFILib.rgb_lib_9a28_Wallet_create_utxos_begin.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_int8,
    RustBuffer,
    RustBuffer,
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_create_utxos_begin.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_create_utxos_end.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_create_utxos_end.restype = ctypes.c_uint8
_UniFFILib.rgb_lib_9a28_Wallet_delete_transfers.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_delete_transfers.restype = ctypes.c_int8
_UniFFILib.rgb_lib_9a28_Wallet_drain_to.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_drain_to.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_drain_to_begin.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_drain_to_begin.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_drain_to_end.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_drain_to_end.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_fail_transfers.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_fail_transfers.restype = ctypes.c_int8
_UniFFILib.rgb_lib_9a28_Wallet_get_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_get_address.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_get_asset_balance.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_get_asset_balance.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_get_asset_metadata.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_get_asset_metadata.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_go_online.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_go_online.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_issue_asset_rgb20.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.c_uint8,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_issue_asset_rgb20.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_issue_asset_rgb25.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.c_uint8,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_issue_asset_rgb25.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_list_assets.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_list_assets.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_list_transactions.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_list_transactions.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_list_transfers.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_list_transfers.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_list_unspents.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_list_unspents.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_refresh.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_refresh.restype = ctypes.c_int8
_UniFFILib.rgb_lib_9a28_Wallet_send.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_send.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_send_begin.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.c_int8,
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_send_begin.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_Wallet_send_end.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_Wallet_send_end.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_generate_keys.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_generate_keys.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_restore_keys.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_restore_keys.restype = RustBuffer
_UniFFILib.rgb_lib_9a28_restore_backup.argtypes = (
    RustBuffer,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.rgb_lib_9a28_restore_backup.restype = None
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_free.restype = None
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_rgb_lib_9a28_rustbuffer_reserve.restype = RustBuffer

# Public interface members begin here.


class FfiConverterUInt8(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU8()

    @staticmethod
    def write(value, buf):
        buf.writeU8(value)

class FfiConverterUInt32(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU32()

    @staticmethod
    def write(value, buf):
        buf.writeU32(value)

class FfiConverterUInt64(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU64()

    @staticmethod
    def write(value, buf):
        buf.writeU64(value)

class FfiConverterInt64(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readI64()

    @staticmethod
    def write(value, buf):
        buf.writeI64(value)

class FfiConverterFloat(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readFloat()

    @staticmethod
    def write(value, buf):
        buf.writeFloat(value)

class FfiConverterBool:
    @classmethod
    def read(cls, buf):
        return cls.lift(buf.readU8())

    @classmethod
    def write(cls, value, buf):
        buf.writeU8(cls.lower(value))

    @staticmethod
    def lift(value):
        return int(value) != 0

    @staticmethod
    def lower(value):
        return 1 if value else 0

class FfiConverterString:
    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = buf.read(size)
        return utf8Bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8Bytes = value.encode("utf-8")
        buf.writeI32(len(utf8Bytes))
        buf.write(utf8Bytes)

    @staticmethod
    def lift(buf):
        with buf.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class BlindedUtxo(object):
    def __init__(self, blinded_utxo):
        blinded_utxo = blinded_utxo
        
        self._pointer = rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_BlindedUTXO_new,
        FfiConverterString.lower(blinded_utxo))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_rgb_lib_9a28_BlindedUTXO_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    


class FfiConverterTypeBlindedUtxo:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, BlindedUtxo):
            raise TypeError("Expected BlindedUtxo instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return BlindedUtxo._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Invoice(object):
    def __init__(self, invoice_string):
        invoice_string = invoice_string
        
        self._pointer = rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Invoice_new,
        FfiConverterString.lower(invoice_string))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_rgb_lib_9a28_Invoice_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_invoice_data(cls, invoice_data):
        invoice_data = invoice_data
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Invoice_from_invoice_data,
        FfiConverterTypeInvoiceData.lower(invoice_data))
        return cls._make_instance_(pointer)
    

    def invoice_data(self, ):
        return FfiConverterTypeInvoiceData.lift(
            rust_call(_UniFFILib.rgb_lib_9a28_Invoice_invoice_data,self._pointer,)
        )
    def invoice_string(self, ):
        return FfiConverterString.lift(
            rust_call(_UniFFILib.rgb_lib_9a28_Invoice_invoice_string,self._pointer,)
        )
    


class FfiConverterTypeInvoice:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Invoice):
            raise TypeError("Expected Invoice instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Invoice._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class TransportEndpoint(object):
    def __init__(self, transport_endpoint):
        transport_endpoint = transport_endpoint
        
        self._pointer = rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_TransportEndpoint_new,
        FfiConverterString.lower(transport_endpoint))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_rgb_lib_9a28_TransportEndpoint_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    def transport_type(self, ):
        return FfiConverterTypeTransportType.lift(
            rust_call(_UniFFILib.rgb_lib_9a28_TransportEndpoint_transport_type,self._pointer,)
        )
    


class FfiConverterTypeTransportEndpoint:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, TransportEndpoint):
            raise TypeError("Expected TransportEndpoint instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return TransportEndpoint._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Wallet(object):
    def __init__(self, wallet_data):
        wallet_data = wallet_data
        
        self._pointer = rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_new,
        FfiConverterTypeWalletData.lower(wallet_data))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_rgb_lib_9a28_Wallet_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    def backup(self, backup_path,password):
        backup_path = backup_path
        
        password = password
        
        rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_backup,self._pointer,
        FfiConverterString.lower(backup_path),
        FfiConverterString.lower(password))
    
    def blind(self, asset_id,amount,duration_seconds,transport_endpoints):
        asset_id = (None if asset_id is None else asset_id)
        
        amount = (None if amount is None else int(amount))
        
        duration_seconds = (None if duration_seconds is None else int(duration_seconds))
        
        transport_endpoints = list(x for x in transport_endpoints)
        
        return FfiConverterTypeBlindData.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_blind,self._pointer,
        FfiConverterOptionalString.lower(asset_id),
        FfiConverterOptionalUInt64.lower(amount),
        FfiConverterOptionalUInt32.lower(duration_seconds),
        FfiConverterSequenceString.lower(transport_endpoints))
        )
    def create_utxos(self, online,up_to,num,size,fee_rate):
        online = online
        
        up_to = bool(up_to)
        
        num = (None if num is None else int(num))
        
        size = (None if size is None else int(size))
        
        fee_rate = float(fee_rate)
        
        return FfiConverterUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_create_utxos,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterBool.lower(up_to),
        FfiConverterOptionalUInt8.lower(num),
        FfiConverterOptionalUInt32.lower(size),
        FfiConverterFloat.lower(fee_rate))
        )
    def create_utxos_begin(self, online,up_to,num,size,fee_rate):
        online = online
        
        up_to = bool(up_to)
        
        num = (None if num is None else int(num))
        
        size = (None if size is None else int(size))
        
        fee_rate = float(fee_rate)
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_create_utxos_begin,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterBool.lower(up_to),
        FfiConverterOptionalUInt8.lower(num),
        FfiConverterOptionalUInt32.lower(size),
        FfiConverterFloat.lower(fee_rate))
        )
    def create_utxos_end(self, online,signed_psbt):
        online = online
        
        signed_psbt = signed_psbt
        
        return FfiConverterUInt8.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_create_utxos_end,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(signed_psbt))
        )
    def delete_transfers(self, blinded_utxo,txid,no_asset_only):
        blinded_utxo = (None if blinded_utxo is None else blinded_utxo)
        
        txid = (None if txid is None else txid)
        
        no_asset_only = bool(no_asset_only)
        
        return FfiConverterBool.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_delete_transfers,self._pointer,
        FfiConverterOptionalString.lower(blinded_utxo),
        FfiConverterOptionalString.lower(txid),
        FfiConverterBool.lower(no_asset_only))
        )
    def drain_to(self, online,address,destroy_assets,fee_rate):
        online = online
        
        address = address
        
        destroy_assets = bool(destroy_assets)
        
        fee_rate = float(fee_rate)
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_drain_to,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(address),
        FfiConverterBool.lower(destroy_assets),
        FfiConverterFloat.lower(fee_rate))
        )
    def drain_to_begin(self, online,address,destroy_assets,fee_rate):
        online = online
        
        address = address
        
        destroy_assets = bool(destroy_assets)
        
        fee_rate = float(fee_rate)
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_drain_to_begin,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(address),
        FfiConverterBool.lower(destroy_assets),
        FfiConverterFloat.lower(fee_rate))
        )
    def drain_to_end(self, online,signed_psbt):
        online = online
        
        signed_psbt = signed_psbt
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_drain_to_end,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(signed_psbt))
        )
    def fail_transfers(self, online,blinded_utxo,txid,no_asset_only):
        online = online
        
        blinded_utxo = (None if blinded_utxo is None else blinded_utxo)
        
        txid = (None if txid is None else txid)
        
        no_asset_only = bool(no_asset_only)
        
        return FfiConverterBool.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_fail_transfers,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterOptionalString.lower(blinded_utxo),
        FfiConverterOptionalString.lower(txid),
        FfiConverterBool.lower(no_asset_only))
        )
    def get_address(self, ):
        return FfiConverterString.lift(
            rust_call(_UniFFILib.rgb_lib_9a28_Wallet_get_address,self._pointer,)
        )
    def get_asset_balance(self, asset_id):
        asset_id = asset_id
        
        return FfiConverterTypeBalance.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_get_asset_balance,self._pointer,
        FfiConverterString.lower(asset_id))
        )
    def get_asset_metadata(self, online,asset_id):
        online = online
        
        asset_id = asset_id
        
        return FfiConverterTypeMetadata.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_get_asset_metadata,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(asset_id))
        )
    def go_online(self, skip_consistency_check,electrum_url):
        skip_consistency_check = bool(skip_consistency_check)
        
        electrum_url = electrum_url
        
        return FfiConverterTypeOnline.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_go_online,self._pointer,
        FfiConverterBool.lower(skip_consistency_check),
        FfiConverterString.lower(electrum_url))
        )
    def issue_asset_rgb20(self, online,ticker,name,precision,amounts):
        online = online
        
        ticker = ticker
        
        name = name
        
        precision = int(precision)
        
        amounts = list(int(x) for x in amounts)
        
        return FfiConverterTypeAssetRgb20.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_issue_asset_rgb20,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(ticker),
        FfiConverterString.lower(name),
        FfiConverterUInt8.lower(precision),
        FfiConverterSequenceUInt64.lower(amounts))
        )
    def issue_asset_rgb25(self, online,name,description,precision,amounts,file_path):
        online = online
        
        name = name
        
        description = (None if description is None else description)
        
        precision = int(precision)
        
        amounts = list(int(x) for x in amounts)
        
        file_path = (None if file_path is None else file_path)
        
        return FfiConverterTypeAssetRgb25.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_issue_asset_rgb25,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(name),
        FfiConverterOptionalString.lower(description),
        FfiConverterUInt8.lower(precision),
        FfiConverterSequenceUInt64.lower(amounts),
        FfiConverterOptionalString.lower(file_path))
        )
    def list_assets(self, filter_asset_ifaces):
        filter_asset_ifaces = list(x for x in filter_asset_ifaces)
        
        return FfiConverterTypeAssets.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_list_assets,self._pointer,
        FfiConverterSequenceTypeAssetIface.lower(filter_asset_ifaces))
        )
    def list_transactions(self, online):
        online = (None if online is None else online)
        
        return FfiConverterSequenceTypeTransaction.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_list_transactions,self._pointer,
        FfiConverterOptionalTypeOnline.lower(online))
        )
    def list_transfers(self, asset_id):
        asset_id = asset_id
        
        return FfiConverterSequenceTypeTransfer.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_list_transfers,self._pointer,
        FfiConverterString.lower(asset_id))
        )
    def list_unspents(self, settled_only):
        settled_only = bool(settled_only)
        
        return FfiConverterSequenceTypeUnspent.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_list_unspents,self._pointer,
        FfiConverterBool.lower(settled_only))
        )
    def refresh(self, online,asset_id,filter):
        online = online
        
        asset_id = (None if asset_id is None else asset_id)
        
        filter = list(x for x in filter)
        
        return FfiConverterBool.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_refresh,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterOptionalString.lower(asset_id),
        FfiConverterSequenceTypeRefreshFilter.lower(filter))
        )
    def send(self, online,recipient_map,donation,fee_rate):
        online = online
        
        recipient_map = dict((k, list(x for x in v)) for (k, v) in recipient_map.items())
        
        donation = bool(donation)
        
        fee_rate = float(fee_rate)
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_send,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterMapStringSequenceTypeRecipient.lower(recipient_map),
        FfiConverterBool.lower(donation),
        FfiConverterFloat.lower(fee_rate))
        )
    def send_begin(self, online,recipient_map,donation,fee_rate):
        online = online
        
        recipient_map = dict((k, list(x for x in v)) for (k, v) in recipient_map.items())
        
        donation = bool(donation)
        
        fee_rate = float(fee_rate)
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_send_begin,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterMapStringSequenceTypeRecipient.lower(recipient_map),
        FfiConverterBool.lower(donation),
        FfiConverterFloat.lower(fee_rate))
        )
    def send_end(self, online,signed_psbt):
        online = online
        
        signed_psbt = signed_psbt
        
        return FfiConverterString.lift(
            rust_call_with_error(
    FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_Wallet_send_end,self._pointer,
        FfiConverterTypeOnline.lower(online),
        FfiConverterString.lower(signed_psbt))
        )
    


class FfiConverterTypeWallet:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Wallet):
            raise TypeError("Expected Wallet instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Wallet._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class AssetRgb20:

    def __init__(self, asset_id, ticker, name, precision, balance):
        self.asset_id = asset_id
        self.ticker = ticker
        self.name = name
        self.precision = precision
        self.balance = balance

    def __str__(self):
        return "AssetRgb20(asset_id={}, ticker={}, name={}, precision={}, balance={})".format(self.asset_id, self.ticker, self.name, self.precision, self.balance)

    def __eq__(self, other):
        if self.asset_id != other.asset_id:
            return False
        if self.ticker != other.ticker:
            return False
        if self.name != other.name:
            return False
        if self.precision != other.precision:
            return False
        if self.balance != other.balance:
            return False
        return True

class FfiConverterTypeAssetRgb20(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AssetRgb20(
            asset_id=FfiConverterString.read(buf),
            ticker=FfiConverterString.read(buf),
            name=FfiConverterString.read(buf),
            precision=FfiConverterUInt8.read(buf),
            balance=FfiConverterTypeBalance.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.asset_id, buf)
        FfiConverterString.write(value.ticker, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterUInt8.write(value.precision, buf)
        FfiConverterTypeBalance.write(value.balance, buf)


class AssetRgb25:

    def __init__(self, asset_id, name, description, precision, balance, data_paths):
        self.asset_id = asset_id
        self.name = name
        self.description = description
        self.precision = precision
        self.balance = balance
        self.data_paths = data_paths

    def __str__(self):
        return "AssetRgb25(asset_id={}, name={}, description={}, precision={}, balance={}, data_paths={})".format(self.asset_id, self.name, self.description, self.precision, self.balance, self.data_paths)

    def __eq__(self, other):
        if self.asset_id != other.asset_id:
            return False
        if self.name != other.name:
            return False
        if self.description != other.description:
            return False
        if self.precision != other.precision:
            return False
        if self.balance != other.balance:
            return False
        if self.data_paths != other.data_paths:
            return False
        return True

class FfiConverterTypeAssetRgb25(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AssetRgb25(
            asset_id=FfiConverterString.read(buf),
            name=FfiConverterString.read(buf),
            description=FfiConverterOptionalString.read(buf),
            precision=FfiConverterUInt8.read(buf),
            balance=FfiConverterTypeBalance.read(buf),
            data_paths=FfiConverterSequenceTypeMedia.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.asset_id, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterOptionalString.write(value.description, buf)
        FfiConverterUInt8.write(value.precision, buf)
        FfiConverterTypeBalance.write(value.balance, buf)
        FfiConverterSequenceTypeMedia.write(value.data_paths, buf)


class Assets:

    def __init__(self, rgb20, rgb25):
        self.rgb20 = rgb20
        self.rgb25 = rgb25

    def __str__(self):
        return "Assets(rgb20={}, rgb25={})".format(self.rgb20, self.rgb25)

    def __eq__(self, other):
        if self.rgb20 != other.rgb20:
            return False
        if self.rgb25 != other.rgb25:
            return False
        return True

class FfiConverterTypeAssets(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Assets(
            rgb20=FfiConverterOptionalSequenceTypeAssetRgb20.read(buf),
            rgb25=FfiConverterOptionalSequenceTypeAssetRgb25.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterOptionalSequenceTypeAssetRgb20.write(value.rgb20, buf)
        FfiConverterOptionalSequenceTypeAssetRgb25.write(value.rgb25, buf)


class Balance:

    def __init__(self, settled, future, spendable):
        self.settled = settled
        self.future = future
        self.spendable = spendable

    def __str__(self):
        return "Balance(settled={}, future={}, spendable={})".format(self.settled, self.future, self.spendable)

    def __eq__(self, other):
        if self.settled != other.settled:
            return False
        if self.future != other.future:
            return False
        if self.spendable != other.spendable:
            return False
        return True

class FfiConverterTypeBalance(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Balance(
            settled=FfiConverterUInt64.read(buf),
            future=FfiConverterUInt64.read(buf),
            spendable=FfiConverterUInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterUInt64.write(value.settled, buf)
        FfiConverterUInt64.write(value.future, buf)
        FfiConverterUInt64.write(value.spendable, buf)


class BlindData:

    def __init__(self, invoice, blinded_utxo, blinding_secret, expiration_timestamp):
        self.invoice = invoice
        self.blinded_utxo = blinded_utxo
        self.blinding_secret = blinding_secret
        self.expiration_timestamp = expiration_timestamp

    def __str__(self):
        return "BlindData(invoice={}, blinded_utxo={}, blinding_secret={}, expiration_timestamp={})".format(self.invoice, self.blinded_utxo, self.blinding_secret, self.expiration_timestamp)

    def __eq__(self, other):
        if self.invoice != other.invoice:
            return False
        if self.blinded_utxo != other.blinded_utxo:
            return False
        if self.blinding_secret != other.blinding_secret:
            return False
        if self.expiration_timestamp != other.expiration_timestamp:
            return False
        return True

class FfiConverterTypeBlindData(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return BlindData(
            invoice=FfiConverterString.read(buf),
            blinded_utxo=FfiConverterString.read(buf),
            blinding_secret=FfiConverterUInt64.read(buf),
            expiration_timestamp=FfiConverterOptionalInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.invoice, buf)
        FfiConverterString.write(value.blinded_utxo, buf)
        FfiConverterUInt64.write(value.blinding_secret, buf)
        FfiConverterOptionalInt64.write(value.expiration_timestamp, buf)


class BlockTime:

    def __init__(self, height, timestamp):
        self.height = height
        self.timestamp = timestamp

    def __str__(self):
        return "BlockTime(height={}, timestamp={})".format(self.height, self.timestamp)

    def __eq__(self, other):
        if self.height != other.height:
            return False
        if self.timestamp != other.timestamp:
            return False
        return True

class FfiConverterTypeBlockTime(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return BlockTime(
            height=FfiConverterUInt32.read(buf),
            timestamp=FfiConverterUInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterUInt32.write(value.height, buf)
        FfiConverterUInt64.write(value.timestamp, buf)


class InvoiceData:

    def __init__(self, blinded_utxo, asset_iface, asset_id, amount, expiration_timestamp, transport_endpoints):
        self.blinded_utxo = blinded_utxo
        self.asset_iface = asset_iface
        self.asset_id = asset_id
        self.amount = amount
        self.expiration_timestamp = expiration_timestamp
        self.transport_endpoints = transport_endpoints

    def __str__(self):
        return "InvoiceData(blinded_utxo={}, asset_iface={}, asset_id={}, amount={}, expiration_timestamp={}, transport_endpoints={})".format(self.blinded_utxo, self.asset_iface, self.asset_id, self.amount, self.expiration_timestamp, self.transport_endpoints)

    def __eq__(self, other):
        if self.blinded_utxo != other.blinded_utxo:
            return False
        if self.asset_iface != other.asset_iface:
            return False
        if self.asset_id != other.asset_id:
            return False
        if self.amount != other.amount:
            return False
        if self.expiration_timestamp != other.expiration_timestamp:
            return False
        if self.transport_endpoints != other.transport_endpoints:
            return False
        return True

class FfiConverterTypeInvoiceData(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return InvoiceData(
            blinded_utxo=FfiConverterString.read(buf),
            asset_iface=FfiConverterOptionalTypeAssetIface.read(buf),
            asset_id=FfiConverterOptionalString.read(buf),
            amount=FfiConverterOptionalUInt64.read(buf),
            expiration_timestamp=FfiConverterOptionalInt64.read(buf),
            transport_endpoints=FfiConverterSequenceString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.blinded_utxo, buf)
        FfiConverterOptionalTypeAssetIface.write(value.asset_iface, buf)
        FfiConverterOptionalString.write(value.asset_id, buf)
        FfiConverterOptionalUInt64.write(value.amount, buf)
        FfiConverterOptionalInt64.write(value.expiration_timestamp, buf)
        FfiConverterSequenceString.write(value.transport_endpoints, buf)


class Keys:

    def __init__(self, mnemonic, xpub, xpub_fingerprint):
        self.mnemonic = mnemonic
        self.xpub = xpub
        self.xpub_fingerprint = xpub_fingerprint

    def __str__(self):
        return "Keys(mnemonic={}, xpub={}, xpub_fingerprint={})".format(self.mnemonic, self.xpub, self.xpub_fingerprint)

    def __eq__(self, other):
        if self.mnemonic != other.mnemonic:
            return False
        if self.xpub != other.xpub:
            return False
        if self.xpub_fingerprint != other.xpub_fingerprint:
            return False
        return True

class FfiConverterTypeKeys(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Keys(
            mnemonic=FfiConverterString.read(buf),
            xpub=FfiConverterString.read(buf),
            xpub_fingerprint=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.mnemonic, buf)
        FfiConverterString.write(value.xpub, buf)
        FfiConverterString.write(value.xpub_fingerprint, buf)


class Media:

    def __init__(self, file_path, mime):
        self.file_path = file_path
        self.mime = mime

    def __str__(self):
        return "Media(file_path={}, mime={})".format(self.file_path, self.mime)

    def __eq__(self, other):
        if self.file_path != other.file_path:
            return False
        if self.mime != other.mime:
            return False
        return True

class FfiConverterTypeMedia(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Media(
            file_path=FfiConverterString.read(buf),
            mime=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.file_path, buf)
        FfiConverterString.write(value.mime, buf)


class Metadata:

    def __init__(self, asset_iface, asset_schema, issued_supply, timestamp, name, precision, ticker, description):
        self.asset_iface = asset_iface
        self.asset_schema = asset_schema
        self.issued_supply = issued_supply
        self.timestamp = timestamp
        self.name = name
        self.precision = precision
        self.ticker = ticker
        self.description = description

    def __str__(self):
        return "Metadata(asset_iface={}, asset_schema={}, issued_supply={}, timestamp={}, name={}, precision={}, ticker={}, description={})".format(self.asset_iface, self.asset_schema, self.issued_supply, self.timestamp, self.name, self.precision, self.ticker, self.description)

    def __eq__(self, other):
        if self.asset_iface != other.asset_iface:
            return False
        if self.asset_schema != other.asset_schema:
            return False
        if self.issued_supply != other.issued_supply:
            return False
        if self.timestamp != other.timestamp:
            return False
        if self.name != other.name:
            return False
        if self.precision != other.precision:
            return False
        if self.ticker != other.ticker:
            return False
        if self.description != other.description:
            return False
        return True

class FfiConverterTypeMetadata(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Metadata(
            asset_iface=FfiConverterTypeAssetIface.read(buf),
            asset_schema=FfiConverterTypeAssetSchema.read(buf),
            issued_supply=FfiConverterUInt64.read(buf),
            timestamp=FfiConverterInt64.read(buf),
            name=FfiConverterString.read(buf),
            precision=FfiConverterUInt8.read(buf),
            ticker=FfiConverterOptionalString.read(buf),
            description=FfiConverterOptionalString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeAssetIface.write(value.asset_iface, buf)
        FfiConverterTypeAssetSchema.write(value.asset_schema, buf)
        FfiConverterUInt64.write(value.issued_supply, buf)
        FfiConverterInt64.write(value.timestamp, buf)
        FfiConverterString.write(value.name, buf)
        FfiConverterUInt8.write(value.precision, buf)
        FfiConverterOptionalString.write(value.ticker, buf)
        FfiConverterOptionalString.write(value.description, buf)


class Online:

    def __init__(self, id, electrum_url):
        self.id = id
        self.electrum_url = electrum_url

    def __str__(self):
        return "Online(id={}, electrum_url={})".format(self.id, self.electrum_url)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.electrum_url != other.electrum_url:
            return False
        return True

class FfiConverterTypeOnline(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Online(
            id=FfiConverterUInt64.read(buf),
            electrum_url=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterUInt64.write(value.id, buf)
        FfiConverterString.write(value.electrum_url, buf)


class Outpoint:

    def __init__(self, txid, vout):
        self.txid = txid
        self.vout = vout

    def __str__(self):
        return "Outpoint(txid={}, vout={})".format(self.txid, self.vout)

    def __eq__(self, other):
        if self.txid != other.txid:
            return False
        if self.vout != other.vout:
            return False
        return True

class FfiConverterTypeOutpoint(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Outpoint(
            txid=FfiConverterString.read(buf),
            vout=FfiConverterUInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.txid, buf)
        FfiConverterUInt32.write(value.vout, buf)


class Recipient:

    def __init__(self, blinded_utxo, amount, transport_endpoints):
        self.blinded_utxo = blinded_utxo
        self.amount = amount
        self.transport_endpoints = transport_endpoints

    def __str__(self):
        return "Recipient(blinded_utxo={}, amount={}, transport_endpoints={})".format(self.blinded_utxo, self.amount, self.transport_endpoints)

    def __eq__(self, other):
        if self.blinded_utxo != other.blinded_utxo:
            return False
        if self.amount != other.amount:
            return False
        if self.transport_endpoints != other.transport_endpoints:
            return False
        return True

class FfiConverterTypeRecipient(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Recipient(
            blinded_utxo=FfiConverterString.read(buf),
            amount=FfiConverterUInt64.read(buf),
            transport_endpoints=FfiConverterSequenceString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.blinded_utxo, buf)
        FfiConverterUInt64.write(value.amount, buf)
        FfiConverterSequenceString.write(value.transport_endpoints, buf)


class RefreshFilter:

    def __init__(self, status, incoming):
        self.status = status
        self.incoming = incoming

    def __str__(self):
        return "RefreshFilter(status={}, incoming={})".format(self.status, self.incoming)

    def __eq__(self, other):
        if self.status != other.status:
            return False
        if self.incoming != other.incoming:
            return False
        return True

class FfiConverterTypeRefreshFilter(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RefreshFilter(
            status=FfiConverterTypeRefreshTransferStatus.read(buf),
            incoming=FfiConverterBool.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeRefreshTransferStatus.write(value.status, buf)
        FfiConverterBool.write(value.incoming, buf)


class RgbAllocation:

    def __init__(self, asset_id, amount, settled):
        self.asset_id = asset_id
        self.amount = amount
        self.settled = settled

    def __str__(self):
        return "RgbAllocation(asset_id={}, amount={}, settled={})".format(self.asset_id, self.amount, self.settled)

    def __eq__(self, other):
        if self.asset_id != other.asset_id:
            return False
        if self.amount != other.amount:
            return False
        if self.settled != other.settled:
            return False
        return True

class FfiConverterTypeRgbAllocation(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return RgbAllocation(
            asset_id=FfiConverterOptionalString.read(buf),
            amount=FfiConverterUInt64.read(buf),
            settled=FfiConverterBool.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterOptionalString.write(value.asset_id, buf)
        FfiConverterUInt64.write(value.amount, buf)
        FfiConverterBool.write(value.settled, buf)


class Transaction:

    def __init__(self, transaction_type, txid, received, sent, fee, confirmation_time):
        self.transaction_type = transaction_type
        self.txid = txid
        self.received = received
        self.sent = sent
        self.fee = fee
        self.confirmation_time = confirmation_time

    def __str__(self):
        return "Transaction(transaction_type={}, txid={}, received={}, sent={}, fee={}, confirmation_time={})".format(self.transaction_type, self.txid, self.received, self.sent, self.fee, self.confirmation_time)

    def __eq__(self, other):
        if self.transaction_type != other.transaction_type:
            return False
        if self.txid != other.txid:
            return False
        if self.received != other.received:
            return False
        if self.sent != other.sent:
            return False
        if self.fee != other.fee:
            return False
        if self.confirmation_time != other.confirmation_time:
            return False
        return True

class FfiConverterTypeTransaction(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Transaction(
            transaction_type=FfiConverterTypeTransactionType.read(buf),
            txid=FfiConverterString.read(buf),
            received=FfiConverterUInt64.read(buf),
            sent=FfiConverterUInt64.read(buf),
            fee=FfiConverterOptionalUInt64.read(buf),
            confirmation_time=FfiConverterOptionalTypeBlockTime.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeTransactionType.write(value.transaction_type, buf)
        FfiConverterString.write(value.txid, buf)
        FfiConverterUInt64.write(value.received, buf)
        FfiConverterUInt64.write(value.sent, buf)
        FfiConverterOptionalUInt64.write(value.fee, buf)
        FfiConverterOptionalTypeBlockTime.write(value.confirmation_time, buf)


class Transfer:

    def __init__(self, idx, created_at, updated_at, status, amount, kind, txid, blinded_utxo, unblinded_utxo, change_utxo, blinding_secret, expiration, transport_endpoints):
        self.idx = idx
        self.created_at = created_at
        self.updated_at = updated_at
        self.status = status
        self.amount = amount
        self.kind = kind
        self.txid = txid
        self.blinded_utxo = blinded_utxo
        self.unblinded_utxo = unblinded_utxo
        self.change_utxo = change_utxo
        self.blinding_secret = blinding_secret
        self.expiration = expiration
        self.transport_endpoints = transport_endpoints

    def __str__(self):
        return "Transfer(idx={}, created_at={}, updated_at={}, status={}, amount={}, kind={}, txid={}, blinded_utxo={}, unblinded_utxo={}, change_utxo={}, blinding_secret={}, expiration={}, transport_endpoints={})".format(self.idx, self.created_at, self.updated_at, self.status, self.amount, self.kind, self.txid, self.blinded_utxo, self.unblinded_utxo, self.change_utxo, self.blinding_secret, self.expiration, self.transport_endpoints)

    def __eq__(self, other):
        if self.idx != other.idx:
            return False
        if self.created_at != other.created_at:
            return False
        if self.updated_at != other.updated_at:
            return False
        if self.status != other.status:
            return False
        if self.amount != other.amount:
            return False
        if self.kind != other.kind:
            return False
        if self.txid != other.txid:
            return False
        if self.blinded_utxo != other.blinded_utxo:
            return False
        if self.unblinded_utxo != other.unblinded_utxo:
            return False
        if self.change_utxo != other.change_utxo:
            return False
        if self.blinding_secret != other.blinding_secret:
            return False
        if self.expiration != other.expiration:
            return False
        if self.transport_endpoints != other.transport_endpoints:
            return False
        return True

class FfiConverterTypeTransfer(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Transfer(
            idx=FfiConverterInt64.read(buf),
            created_at=FfiConverterInt64.read(buf),
            updated_at=FfiConverterInt64.read(buf),
            status=FfiConverterTypeTransferStatus.read(buf),
            amount=FfiConverterUInt64.read(buf),
            kind=FfiConverterTypeTransferKind.read(buf),
            txid=FfiConverterOptionalString.read(buf),
            blinded_utxo=FfiConverterOptionalString.read(buf),
            unblinded_utxo=FfiConverterOptionalTypeOutpoint.read(buf),
            change_utxo=FfiConverterOptionalTypeOutpoint.read(buf),
            blinding_secret=FfiConverterOptionalUInt64.read(buf),
            expiration=FfiConverterOptionalInt64.read(buf),
            transport_endpoints=FfiConverterSequenceTypeTransferTransportEndpoint.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterInt64.write(value.idx, buf)
        FfiConverterInt64.write(value.created_at, buf)
        FfiConverterInt64.write(value.updated_at, buf)
        FfiConverterTypeTransferStatus.write(value.status, buf)
        FfiConverterUInt64.write(value.amount, buf)
        FfiConverterTypeTransferKind.write(value.kind, buf)
        FfiConverterOptionalString.write(value.txid, buf)
        FfiConverterOptionalString.write(value.blinded_utxo, buf)
        FfiConverterOptionalTypeOutpoint.write(value.unblinded_utxo, buf)
        FfiConverterOptionalTypeOutpoint.write(value.change_utxo, buf)
        FfiConverterOptionalUInt64.write(value.blinding_secret, buf)
        FfiConverterOptionalInt64.write(value.expiration, buf)
        FfiConverterSequenceTypeTransferTransportEndpoint.write(value.transport_endpoints, buf)


class TransferTransportEndpoint:

    def __init__(self, endpoint, transport_type, used):
        self.endpoint = endpoint
        self.transport_type = transport_type
        self.used = used

    def __str__(self):
        return "TransferTransportEndpoint(endpoint={}, transport_type={}, used={})".format(self.endpoint, self.transport_type, self.used)

    def __eq__(self, other):
        if self.endpoint != other.endpoint:
            return False
        if self.transport_type != other.transport_type:
            return False
        if self.used != other.used:
            return False
        return True

class FfiConverterTypeTransferTransportEndpoint(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferTransportEndpoint(
            endpoint=FfiConverterString.read(buf),
            transport_type=FfiConverterTypeTransportType.read(buf),
            used=FfiConverterBool.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.endpoint, buf)
        FfiConverterTypeTransportType.write(value.transport_type, buf)
        FfiConverterBool.write(value.used, buf)


class Unspent:

    def __init__(self, utxo, rgb_allocations):
        self.utxo = utxo
        self.rgb_allocations = rgb_allocations

    def __str__(self):
        return "Unspent(utxo={}, rgb_allocations={})".format(self.utxo, self.rgb_allocations)

    def __eq__(self, other):
        if self.utxo != other.utxo:
            return False
        if self.rgb_allocations != other.rgb_allocations:
            return False
        return True

class FfiConverterTypeUnspent(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Unspent(
            utxo=FfiConverterTypeUtxo.read(buf),
            rgb_allocations=FfiConverterSequenceTypeRgbAllocation.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeUtxo.write(value.utxo, buf)
        FfiConverterSequenceTypeRgbAllocation.write(value.rgb_allocations, buf)


class Utxo:

    def __init__(self, outpoint, btc_amount, colorable):
        self.outpoint = outpoint
        self.btc_amount = btc_amount
        self.colorable = colorable

    def __str__(self):
        return "Utxo(outpoint={}, btc_amount={}, colorable={})".format(self.outpoint, self.btc_amount, self.colorable)

    def __eq__(self, other):
        if self.outpoint != other.outpoint:
            return False
        if self.btc_amount != other.btc_amount:
            return False
        if self.colorable != other.colorable:
            return False
        return True

class FfiConverterTypeUtxo(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Utxo(
            outpoint=FfiConverterTypeOutpoint.read(buf),
            btc_amount=FfiConverterUInt64.read(buf),
            colorable=FfiConverterBool.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeOutpoint.write(value.outpoint, buf)
        FfiConverterUInt64.write(value.btc_amount, buf)
        FfiConverterBool.write(value.colorable, buf)


class WalletData:

    def __init__(self, data_dir, bitcoin_network, database_type, pubkey, mnemonic):
        self.data_dir = data_dir
        self.bitcoin_network = bitcoin_network
        self.database_type = database_type
        self.pubkey = pubkey
        self.mnemonic = mnemonic

    def __str__(self):
        return "WalletData(data_dir={}, bitcoin_network={}, database_type={}, pubkey={}, mnemonic={})".format(self.data_dir, self.bitcoin_network, self.database_type, self.pubkey, self.mnemonic)

    def __eq__(self, other):
        if self.data_dir != other.data_dir:
            return False
        if self.bitcoin_network != other.bitcoin_network:
            return False
        if self.database_type != other.database_type:
            return False
        if self.pubkey != other.pubkey:
            return False
        if self.mnemonic != other.mnemonic:
            return False
        return True

class FfiConverterTypeWalletData(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return WalletData(
            data_dir=FfiConverterString.read(buf),
            bitcoin_network=FfiConverterTypeBitcoinNetwork.read(buf),
            database_type=FfiConverterTypeDatabaseType.read(buf),
            pubkey=FfiConverterString.read(buf),
            mnemonic=FfiConverterOptionalString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.data_dir, buf)
        FfiConverterTypeBitcoinNetwork.write(value.bitcoin_network, buf)
        FfiConverterTypeDatabaseType.write(value.database_type, buf)
        FfiConverterString.write(value.pubkey, buf)
        FfiConverterOptionalString.write(value.mnemonic, buf)




class AssetIface(enum.Enum):
    RGB20 = 1
    RGB25 = 2
    


class FfiConverterTypeAssetIface(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return AssetIface.RGB20
        if variant == 2:
            return AssetIface.RGB25
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == AssetIface.RGB20:
            buf.writeI32(1)
        if value == AssetIface.RGB25:
            buf.writeI32(2)




class AssetSchema(enum.Enum):
    NIA = 1
    CFA = 2
    


class FfiConverterTypeAssetSchema(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return AssetSchema.NIA
        if variant == 2:
            return AssetSchema.CFA
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == AssetSchema.NIA:
            buf.writeI32(1)
        if value == AssetSchema.CFA:
            buf.writeI32(2)




class BitcoinNetwork(enum.Enum):
    MAINNET = 1
    TESTNET = 2
    SIGNET = 3
    REGTEST = 4
    


class FfiConverterTypeBitcoinNetwork(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return BitcoinNetwork.MAINNET
        if variant == 2:
            return BitcoinNetwork.TESTNET
        if variant == 3:
            return BitcoinNetwork.SIGNET
        if variant == 4:
            return BitcoinNetwork.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == BitcoinNetwork.MAINNET:
            buf.writeI32(1)
        if value == BitcoinNetwork.TESTNET:
            buf.writeI32(2)
        if value == BitcoinNetwork.SIGNET:
            buf.writeI32(3)
        if value == BitcoinNetwork.REGTEST:
            buf.writeI32(4)




class DatabaseType(enum.Enum):
    SQLITE = 1
    


class FfiConverterTypeDatabaseType(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return DatabaseType.SQLITE
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == DatabaseType.SQLITE:
            buf.writeI32(1)




class RefreshTransferStatus(enum.Enum):
    WAITING_COUNTERPARTY = 1
    WAITING_CONFIRMATIONS = 2
    


class FfiConverterTypeRefreshTransferStatus(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return RefreshTransferStatus.WAITING_COUNTERPARTY
        if variant == 2:
            return RefreshTransferStatus.WAITING_CONFIRMATIONS
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == RefreshTransferStatus.WAITING_COUNTERPARTY:
            buf.writeI32(1)
        if value == RefreshTransferStatus.WAITING_CONFIRMATIONS:
            buf.writeI32(2)




class TransactionType(enum.Enum):
    RGB_SEND = 1
    DRAIN = 2
    CREATE_UTXOS = 3
    OTHER = 4
    


class FfiConverterTypeTransactionType(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return TransactionType.RGB_SEND
        if variant == 2:
            return TransactionType.DRAIN
        if variant == 3:
            return TransactionType.CREATE_UTXOS
        if variant == 4:
            return TransactionType.OTHER
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == TransactionType.RGB_SEND:
            buf.writeI32(1)
        if value == TransactionType.DRAIN:
            buf.writeI32(2)
        if value == TransactionType.CREATE_UTXOS:
            buf.writeI32(3)
        if value == TransactionType.OTHER:
            buf.writeI32(4)




class TransferKind(enum.Enum):
    ISSUANCE = 1
    RECEIVE = 2
    SEND = 3
    


class FfiConverterTypeTransferKind(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return TransferKind.ISSUANCE
        if variant == 2:
            return TransferKind.RECEIVE
        if variant == 3:
            return TransferKind.SEND
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == TransferKind.ISSUANCE:
            buf.writeI32(1)
        if value == TransferKind.RECEIVE:
            buf.writeI32(2)
        if value == TransferKind.SEND:
            buf.writeI32(3)




class TransferStatus(enum.Enum):
    WAITING_COUNTERPARTY = 1
    WAITING_CONFIRMATIONS = 2
    SETTLED = 3
    FAILED = 4
    


class FfiConverterTypeTransferStatus(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return TransferStatus.WAITING_COUNTERPARTY
        if variant == 2:
            return TransferStatus.WAITING_CONFIRMATIONS
        if variant == 3:
            return TransferStatus.SETTLED
        if variant == 4:
            return TransferStatus.FAILED
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == TransferStatus.WAITING_COUNTERPARTY:
            buf.writeI32(1)
        if value == TransferStatus.WAITING_CONFIRMATIONS:
            buf.writeI32(2)
        if value == TransferStatus.SETTLED:
            buf.writeI32(3)
        if value == TransferStatus.FAILED:
            buf.writeI32(4)




class TransportType(enum.Enum):
    JSON_RPC = 1
    


class FfiConverterTypeTransportType(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return TransportType.JSON_RPC
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == TransportType.JSON_RPC:
            buf.writeI32(1)



# RgbLibError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separated, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class UniFFIExceptionTmpNamespace:
    class RgbLibError(Exception):
        pass
    
    class AllocationsAlreadyAvailable(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.AllocationsAlreadyAvailable()"

    RgbLibError.AllocationsAlreadyAvailable = AllocationsAlreadyAvailable
    class AssetNotFound(RgbLibError):
        def __init__(self, asset_id):
            self.asset_id = asset_id

        def __str__(self):
            field_parts = [
                'asset_id={!r}'.format(self.asset_id),
            ]
            return "RgbLibError.AssetNotFound({})".format(', '.join(field_parts))

    RgbLibError.AssetNotFound = AssetNotFound
    class BatchTransferNotFound(RgbLibError):
        def __init__(self, txid):
            self.txid = txid

        def __str__(self):
            field_parts = [
                'txid={!r}'.format(self.txid),
            ]
            return "RgbLibError.BatchTransferNotFound({})".format(', '.join(field_parts))

    RgbLibError.BatchTransferNotFound = BatchTransferNotFound
    class BlindedUtxoAlreadyUsed(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.BlindedUtxoAlreadyUsed()"

    RgbLibError.BlindedUtxoAlreadyUsed = BlindedUtxoAlreadyUsed
    class CannotChangeOnline(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.CannotChangeOnline()"

    RgbLibError.CannotChangeOnline = CannotChangeOnline
    class CannotDeleteTransfer(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.CannotDeleteTransfer()"

    RgbLibError.CannotDeleteTransfer = CannotDeleteTransfer
    class CannotFailTransfer(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.CannotFailTransfer()"

    RgbLibError.CannotFailTransfer = CannotFailTransfer
    class CannotSendToSelf(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.CannotSendToSelf()"

    RgbLibError.CannotSendToSelf = CannotSendToSelf
    class Electrum(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.Electrum({})".format(', '.join(field_parts))

    RgbLibError.Electrum = Electrum
    class FailedBdkSync(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.FailedBdkSync({})".format(', '.join(field_parts))

    RgbLibError.FailedBdkSync = FailedBdkSync
    class FailedBroadcast(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.FailedBroadcast({})".format(', '.join(field_parts))

    RgbLibError.FailedBroadcast = FailedBroadcast
    class FailedIssuance(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.FailedIssuance({})".format(', '.join(field_parts))

    RgbLibError.FailedIssuance = FailedIssuance
    class Io(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.Io({})".format(', '.join(field_parts))

    RgbLibError.Io = Io
    class Inconsistency(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.Inconsistency({})".format(', '.join(field_parts))

    RgbLibError.Inconsistency = Inconsistency
    class InexistentDataDir(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.InexistentDataDir()"

    RgbLibError.InexistentDataDir = InexistentDataDir
    class InsufficientAllocationSlots(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.InsufficientAllocationSlots()"

    RgbLibError.InsufficientAllocationSlots = InsufficientAllocationSlots
    class InsufficientBitcoins(RgbLibError):
        def __init__(self, needed, available):
            self.needed = needed
            self.available = available

        def __str__(self):
            field_parts = [
                'needed={!r}'.format(self.needed),
                'available={!r}'.format(self.available),
            ]
            return "RgbLibError.InsufficientBitcoins({})".format(', '.join(field_parts))

    RgbLibError.InsufficientBitcoins = InsufficientBitcoins
    class InsufficientSpendableAssets(RgbLibError):
        def __init__(self, asset_id):
            self.asset_id = asset_id

        def __str__(self):
            field_parts = [
                'asset_id={!r}'.format(self.asset_id),
            ]
            return "RgbLibError.InsufficientSpendableAssets({})".format(', '.join(field_parts))

    RgbLibError.InsufficientSpendableAssets = InsufficientSpendableAssets
    class InsufficientTotalAssets(RgbLibError):
        def __init__(self, asset_id):
            self.asset_id = asset_id

        def __str__(self):
            field_parts = [
                'asset_id={!r}'.format(self.asset_id),
            ]
            return "RgbLibError.InsufficientTotalAssets({})".format(', '.join(field_parts))

    RgbLibError.InsufficientTotalAssets = InsufficientTotalAssets
    class Internal(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.Internal({})".format(', '.join(field_parts))

    RgbLibError.Internal = Internal
    class InvalidAddress(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidAddress({})".format(', '.join(field_parts))

    RgbLibError.InvalidAddress = InvalidAddress
    class InvalidAssetId(RgbLibError):
        def __init__(self, asset_id):
            self.asset_id = asset_id

        def __str__(self):
            field_parts = [
                'asset_id={!r}'.format(self.asset_id),
            ]
            return "RgbLibError.InvalidAssetId({})".format(', '.join(field_parts))

    RgbLibError.InvalidAssetId = InvalidAssetId
    class InvalidBitcoinKeys(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.InvalidBitcoinKeys()"

    RgbLibError.InvalidBitcoinKeys = InvalidBitcoinKeys
    class InvalidBlindedUtxo(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidBlindedUtxo({})".format(', '.join(field_parts))

    RgbLibError.InvalidBlindedUtxo = InvalidBlindedUtxo
    class InvalidTransportEndpoint(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidTransportEndpoint({})".format(', '.join(field_parts))

    RgbLibError.InvalidTransportEndpoint = InvalidTransportEndpoint
    class InvalidTransportEndpoints(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidTransportEndpoints({})".format(', '.join(field_parts))

    RgbLibError.InvalidTransportEndpoints = InvalidTransportEndpoints
    class InvalidDescription(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidDescription({})".format(', '.join(field_parts))

    RgbLibError.InvalidDescription = InvalidDescription
    class InvalidElectrum(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidElectrum({})".format(', '.join(field_parts))

    RgbLibError.InvalidElectrum = InvalidElectrum
    class InvalidFeeRate(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidFeeRate({})".format(', '.join(field_parts))

    RgbLibError.InvalidFeeRate = InvalidFeeRate
    class InvalidFilePath(RgbLibError):
        def __init__(self, file_path):
            self.file_path = file_path

        def __str__(self):
            field_parts = [
                'file_path={!r}'.format(self.file_path),
            ]
            return "RgbLibError.InvalidFilePath({})".format(', '.join(field_parts))

    RgbLibError.InvalidFilePath = InvalidFilePath
    class InvalidInvoice(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidInvoice({})".format(', '.join(field_parts))

    RgbLibError.InvalidInvoice = InvalidInvoice
    class InvalidMnemonic(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidMnemonic({})".format(', '.join(field_parts))

    RgbLibError.InvalidMnemonic = InvalidMnemonic
    class InvalidName(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidName({})".format(', '.join(field_parts))

    RgbLibError.InvalidName = InvalidName
    class InvalidPrecision(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidPrecision({})".format(', '.join(field_parts))

    RgbLibError.InvalidPrecision = InvalidPrecision
    class InvalidPsbt(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidPsbt({})".format(', '.join(field_parts))

    RgbLibError.InvalidPsbt = InvalidPsbt
    class InvalidPubkey(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidPubkey({})".format(', '.join(field_parts))

    RgbLibError.InvalidPubkey = InvalidPubkey
    class InvalidTicker(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.InvalidTicker({})".format(', '.join(field_parts))

    RgbLibError.InvalidTicker = InvalidTicker
    class NoIssuanceAmounts(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.NoIssuanceAmounts()"

    RgbLibError.NoIssuanceAmounts = NoIssuanceAmounts
    class NoValidTransportEndpoint(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.NoValidTransportEndpoint()"

    RgbLibError.NoValidTransportEndpoint = NoValidTransportEndpoint
    class Offline(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.Offline()"

    RgbLibError.Offline = Offline
    class Proxy(RgbLibError):
        def __init__(self, details):
            self.details = details

        def __str__(self):
            field_parts = [
                'details={!r}'.format(self.details),
            ]
            return "RgbLibError.Proxy({})".format(', '.join(field_parts))

    RgbLibError.Proxy = Proxy
    class TransferNotFound(RgbLibError):
        def __init__(self, blinded_utxo):
            self.blinded_utxo = blinded_utxo

        def __str__(self):
            field_parts = [
                'blinded_utxo={!r}'.format(self.blinded_utxo),
            ]
            return "RgbLibError.TransferNotFound({})".format(', '.join(field_parts))

    RgbLibError.TransferNotFound = TransferNotFound
    class UnknownRgbInterface(RgbLibError):
        def __init__(self, interface):
            self.interface = interface

        def __str__(self):
            field_parts = [
                'interface={!r}'.format(self.interface),
            ]
            return "RgbLibError.UnknownRgbInterface({})".format(', '.join(field_parts))

    RgbLibError.UnknownRgbInterface = UnknownRgbInterface
    class UnknownRgbSchema(RgbLibError):
        def __init__(self, schema_id):
            self.schema_id = schema_id

        def __str__(self):
            field_parts = [
                'schema_id={!r}'.format(self.schema_id),
            ]
            return "RgbLibError.UnknownRgbSchema({})".format(', '.join(field_parts))

    RgbLibError.UnknownRgbSchema = UnknownRgbSchema
    class UnsupportedTransportType(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.UnsupportedTransportType()"

    RgbLibError.UnsupportedTransportType = UnsupportedTransportType
    class UnsupportedBackupVersion(RgbLibError):
        def __init__(self, version):
            self.version = version

        def __str__(self):
            field_parts = [
                'version={!r}'.format(self.version),
            ]
            return "RgbLibError.UnsupportedBackupVersion({})".format(', '.join(field_parts))

    RgbLibError.UnsupportedBackupVersion = UnsupportedBackupVersion
    class UnsupportedInvoice(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.UnsupportedInvoice()"

    RgbLibError.UnsupportedInvoice = UnsupportedInvoice
    class WatchOnly(RgbLibError):
        def __init__(self):
            pass

        def __str__(self):
            return "RgbLibError.WatchOnly()"

    RgbLibError.WatchOnly = WatchOnly
RgbLibError = UniFFIExceptionTmpNamespace.RgbLibError
del UniFFIExceptionTmpNamespace


class FfiConverterTypeRgbLibError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return RgbLibError.AllocationsAlreadyAvailable(
            )
        if variant == 2:
            return RgbLibError.AssetNotFound(
                asset_id=FfiConverterString.read(buf),
            )
        if variant == 3:
            return RgbLibError.BatchTransferNotFound(
                txid=FfiConverterString.read(buf),
            )
        if variant == 4:
            return RgbLibError.BlindedUtxoAlreadyUsed(
            )
        if variant == 5:
            return RgbLibError.CannotChangeOnline(
            )
        if variant == 6:
            return RgbLibError.CannotDeleteTransfer(
            )
        if variant == 7:
            return RgbLibError.CannotFailTransfer(
            )
        if variant == 8:
            return RgbLibError.CannotSendToSelf(
            )
        if variant == 9:
            return RgbLibError.Electrum(
                details=FfiConverterString.read(buf),
            )
        if variant == 10:
            return RgbLibError.FailedBdkSync(
                details=FfiConverterString.read(buf),
            )
        if variant == 11:
            return RgbLibError.FailedBroadcast(
                details=FfiConverterString.read(buf),
            )
        if variant == 12:
            return RgbLibError.FailedIssuance(
                details=FfiConverterString.read(buf),
            )
        if variant == 13:
            return RgbLibError.Io(
                details=FfiConverterString.read(buf),
            )
        if variant == 14:
            return RgbLibError.Inconsistency(
                details=FfiConverterString.read(buf),
            )
        if variant == 15:
            return RgbLibError.InexistentDataDir(
            )
        if variant == 16:
            return RgbLibError.InsufficientAllocationSlots(
            )
        if variant == 17:
            return RgbLibError.InsufficientBitcoins(
                needed=FfiConverterUInt64.read(buf),
                available=FfiConverterUInt64.read(buf),
            )
        if variant == 18:
            return RgbLibError.InsufficientSpendableAssets(
                asset_id=FfiConverterString.read(buf),
            )
        if variant == 19:
            return RgbLibError.InsufficientTotalAssets(
                asset_id=FfiConverterString.read(buf),
            )
        if variant == 20:
            return RgbLibError.Internal(
                details=FfiConverterString.read(buf),
            )
        if variant == 21:
            return RgbLibError.InvalidAddress(
                details=FfiConverterString.read(buf),
            )
        if variant == 22:
            return RgbLibError.InvalidAssetId(
                asset_id=FfiConverterString.read(buf),
            )
        if variant == 23:
            return RgbLibError.InvalidBitcoinKeys(
            )
        if variant == 24:
            return RgbLibError.InvalidBlindedUtxo(
                details=FfiConverterString.read(buf),
            )
        if variant == 25:
            return RgbLibError.InvalidTransportEndpoint(
                details=FfiConverterString.read(buf),
            )
        if variant == 26:
            return RgbLibError.InvalidTransportEndpoints(
                details=FfiConverterString.read(buf),
            )
        if variant == 27:
            return RgbLibError.InvalidDescription(
                details=FfiConverterString.read(buf),
            )
        if variant == 28:
            return RgbLibError.InvalidElectrum(
                details=FfiConverterString.read(buf),
            )
        if variant == 29:
            return RgbLibError.InvalidFeeRate(
                details=FfiConverterString.read(buf),
            )
        if variant == 30:
            return RgbLibError.InvalidFilePath(
                file_path=FfiConverterString.read(buf),
            )
        if variant == 31:
            return RgbLibError.InvalidInvoice(
                details=FfiConverterString.read(buf),
            )
        if variant == 32:
            return RgbLibError.InvalidMnemonic(
                details=FfiConverterString.read(buf),
            )
        if variant == 33:
            return RgbLibError.InvalidName(
                details=FfiConverterString.read(buf),
            )
        if variant == 34:
            return RgbLibError.InvalidPrecision(
                details=FfiConverterString.read(buf),
            )
        if variant == 35:
            return RgbLibError.InvalidPsbt(
                details=FfiConverterString.read(buf),
            )
        if variant == 36:
            return RgbLibError.InvalidPubkey(
                details=FfiConverterString.read(buf),
            )
        if variant == 37:
            return RgbLibError.InvalidTicker(
                details=FfiConverterString.read(buf),
            )
        if variant == 38:
            return RgbLibError.NoIssuanceAmounts(
            )
        if variant == 39:
            return RgbLibError.NoValidTransportEndpoint(
            )
        if variant == 40:
            return RgbLibError.Offline(
            )
        if variant == 41:
            return RgbLibError.Proxy(
                details=FfiConverterString.read(buf),
            )
        if variant == 42:
            return RgbLibError.TransferNotFound(
                blinded_utxo=FfiConverterString.read(buf),
            )
        if variant == 43:
            return RgbLibError.UnknownRgbInterface(
                interface=FfiConverterString.read(buf),
            )
        if variant == 44:
            return RgbLibError.UnknownRgbSchema(
                schema_id=FfiConverterString.read(buf),
            )
        if variant == 45:
            return RgbLibError.UnsupportedTransportType(
            )
        if variant == 46:
            return RgbLibError.UnsupportedBackupVersion(
                version=FfiConverterString.read(buf),
            )
        if variant == 47:
            return RgbLibError.UnsupportedInvoice(
            )
        if variant == 48:
            return RgbLibError.WatchOnly(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, RgbLibError.AllocationsAlreadyAvailable):
            buf.writeI32(1)
        if isinstance(value, RgbLibError.AssetNotFound):
            buf.writeI32(2)
            FfiConverterString.write(value.asset_id, buf)
        if isinstance(value, RgbLibError.BatchTransferNotFound):
            buf.writeI32(3)
            FfiConverterString.write(value.txid, buf)
        if isinstance(value, RgbLibError.BlindedUtxoAlreadyUsed):
            buf.writeI32(4)
        if isinstance(value, RgbLibError.CannotChangeOnline):
            buf.writeI32(5)
        if isinstance(value, RgbLibError.CannotDeleteTransfer):
            buf.writeI32(6)
        if isinstance(value, RgbLibError.CannotFailTransfer):
            buf.writeI32(7)
        if isinstance(value, RgbLibError.CannotSendToSelf):
            buf.writeI32(8)
        if isinstance(value, RgbLibError.Electrum):
            buf.writeI32(9)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.FailedBdkSync):
            buf.writeI32(10)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.FailedBroadcast):
            buf.writeI32(11)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.FailedIssuance):
            buf.writeI32(12)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.Io):
            buf.writeI32(13)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.Inconsistency):
            buf.writeI32(14)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InexistentDataDir):
            buf.writeI32(15)
        if isinstance(value, RgbLibError.InsufficientAllocationSlots):
            buf.writeI32(16)
        if isinstance(value, RgbLibError.InsufficientBitcoins):
            buf.writeI32(17)
            FfiConverterUInt64.write(value.needed, buf)
            FfiConverterUInt64.write(value.available, buf)
        if isinstance(value, RgbLibError.InsufficientSpendableAssets):
            buf.writeI32(18)
            FfiConverterString.write(value.asset_id, buf)
        if isinstance(value, RgbLibError.InsufficientTotalAssets):
            buf.writeI32(19)
            FfiConverterString.write(value.asset_id, buf)
        if isinstance(value, RgbLibError.Internal):
            buf.writeI32(20)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidAddress):
            buf.writeI32(21)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidAssetId):
            buf.writeI32(22)
            FfiConverterString.write(value.asset_id, buf)
        if isinstance(value, RgbLibError.InvalidBitcoinKeys):
            buf.writeI32(23)
        if isinstance(value, RgbLibError.InvalidBlindedUtxo):
            buf.writeI32(24)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidTransportEndpoint):
            buf.writeI32(25)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidTransportEndpoints):
            buf.writeI32(26)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidDescription):
            buf.writeI32(27)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidElectrum):
            buf.writeI32(28)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidFeeRate):
            buf.writeI32(29)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidFilePath):
            buf.writeI32(30)
            FfiConverterString.write(value.file_path, buf)
        if isinstance(value, RgbLibError.InvalidInvoice):
            buf.writeI32(31)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidMnemonic):
            buf.writeI32(32)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidName):
            buf.writeI32(33)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidPrecision):
            buf.writeI32(34)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidPsbt):
            buf.writeI32(35)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidPubkey):
            buf.writeI32(36)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.InvalidTicker):
            buf.writeI32(37)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.NoIssuanceAmounts):
            buf.writeI32(38)
        if isinstance(value, RgbLibError.NoValidTransportEndpoint):
            buf.writeI32(39)
        if isinstance(value, RgbLibError.Offline):
            buf.writeI32(40)
        if isinstance(value, RgbLibError.Proxy):
            buf.writeI32(41)
            FfiConverterString.write(value.details, buf)
        if isinstance(value, RgbLibError.TransferNotFound):
            buf.writeI32(42)
            FfiConverterString.write(value.blinded_utxo, buf)
        if isinstance(value, RgbLibError.UnknownRgbInterface):
            buf.writeI32(43)
            FfiConverterString.write(value.interface, buf)
        if isinstance(value, RgbLibError.UnknownRgbSchema):
            buf.writeI32(44)
            FfiConverterString.write(value.schema_id, buf)
        if isinstance(value, RgbLibError.UnsupportedTransportType):
            buf.writeI32(45)
        if isinstance(value, RgbLibError.UnsupportedBackupVersion):
            buf.writeI32(46)
            FfiConverterString.write(value.version, buf)
        if isinstance(value, RgbLibError.UnsupportedInvoice):
            buf.writeI32(47)
        if isinstance(value, RgbLibError.WatchOnly):
            buf.writeI32(48)



class FfiConverterOptionalUInt8(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterUInt8.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterUInt8.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalUInt32(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalUInt64(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalInt64(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeBlockTime(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeBlockTime.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeBlockTime.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeOnline(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeOnline.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeOnline.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeOutpoint(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeOutpoint.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeOutpoint.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeAssetIface(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeAssetIface.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeAssetIface.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalSequenceTypeAssetRgb20(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterSequenceTypeAssetRgb20.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterSequenceTypeAssetRgb20.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalSequenceTypeAssetRgb25(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterSequenceTypeAssetRgb25.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterSequenceTypeAssetRgb25.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterSequenceUInt64(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterUInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterUInt64.read(buf) for i in range(count)
        ]



class FfiConverterSequenceString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterString.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeAssetRgb20(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeAssetRgb20.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeAssetRgb20.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeAssetRgb25(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeAssetRgb25.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeAssetRgb25.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeMedia(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeMedia.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeMedia.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeRecipient(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeRecipient.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeRecipient.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeRefreshFilter(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeRefreshFilter.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeRefreshFilter.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeRgbAllocation(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeRgbAllocation.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeRgbAllocation.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeTransaction(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeTransaction.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeTransaction.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeTransfer(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeTransfer.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeTransfer.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeTransferTransportEndpoint(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeTransferTransportEndpoint.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeTransferTransportEndpoint.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeUnspent(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeUnspent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeUnspent.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeAssetIface(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeAssetIface.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeAssetIface.read(buf) for i in range(count)
        ]



class FfiConverterMapStringSequenceTypeRecipient(FfiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.writeI32(len(items))
        for (key, value) in items.items():
            FfiConverterString.write(key, buf)
            FfiConverterSequenceTypeRecipient.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = FfiConverterString.read(buf)
            val = FfiConverterSequenceTypeRecipient.read(buf)
            d[key] = val
        return d

def generate_keys(bitcoin_network):
    bitcoin_network = bitcoin_network
    
    return FfiConverterTypeKeys.lift(rust_call(_UniFFILib.rgb_lib_9a28_generate_keys,
        FfiConverterTypeBitcoinNetwork.lower(bitcoin_network)))



def restore_keys(bitcoin_network,mnemonic):
    bitcoin_network = bitcoin_network
    
    mnemonic = mnemonic
    
    return FfiConverterTypeKeys.lift(rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_restore_keys,
        FfiConverterTypeBitcoinNetwork.lower(bitcoin_network),
        FfiConverterString.lower(mnemonic)))



def restore_backup(backup_path,password,data_dir):
    backup_path = backup_path
    
    password = password
    
    data_dir = data_dir
    
    rust_call_with_error(FfiConverterTypeRgbLibError,_UniFFILib.rgb_lib_9a28_restore_backup,
        FfiConverterString.lower(backup_path),
        FfiConverterString.lower(password),
        FfiConverterString.lower(data_dir))


__all__ = [
    "InternalError",
    "AssetIface",
    "AssetSchema",
    "BitcoinNetwork",
    "DatabaseType",
    "RefreshTransferStatus",
    "TransactionType",
    "TransferKind",
    "TransferStatus",
    "TransportType",
    "AssetRgb20",
    "AssetRgb25",
    "Assets",
    "Balance",
    "BlindData",
    "BlockTime",
    "InvoiceData",
    "Keys",
    "Media",
    "Metadata",
    "Online",
    "Outpoint",
    "Recipient",
    "RefreshFilter",
    "RgbAllocation",
    "Transaction",
    "Transfer",
    "TransferTransportEndpoint",
    "Unspent",
    "Utxo",
    "WalletData",
    "generate_keys",
    "restore_keys",
    "restore_backup",
    "BlindedUtxo",
    "TransportEndpoint",
    "Invoice",
    "Wallet",
    "RgbLibError",
]

