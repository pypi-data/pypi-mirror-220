#  Copyright (c) 2023 EPAM Systems
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License

from logging import Logger
from .model import Keyword as Keyword, Launch as Launch, LogMessage as LogMessage, Suite as Suite, Test as Test
from .service import RobotService as RobotService
from .variables import Variables as Variables
from typing import Any, Dict, List, Optional, Text, Union

logger: Logger

class listener:
    _items: List = ...
    _service: Optional[RobotService] = ...
    _variables: Optional[Variables] = ...
    ROBOT_LISTENER_API_VERSION: int = ...
    def __init__(self) -> None: ...
    def _build_msg_struct(self, message: Dict) -> LogMessage: ...
    def _finish_current_item(self) -> Union[Keyword, Launch, Suite, Test]: ...
    @property
    def current_item(self) -> Optional[Union[Keyword, Launch, Suite, Test]]: ...
    def log_message(self, message: Dict) -> None: ...
    def log_message_with_image(self, msg: Dict, image: Text) -> None: ...
    @property
    def parent_id(self) -> Optional[Text]: ...
    @property
    def service(self) -> RobotService: ...
    @property
    def variables(self) -> Variables: ...
    def start_launch(self, attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def start_suite(self, name: Text, attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def end_suite(self, _: Optional[Text], attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def start_test(self, name: Text, attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def end_test(self, _: Optional[Text], attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def start_keyword(self, name: Text, attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def end_keyword(self, _: Optional[Text], attributes: Dict, ts: Optional[Any] = None) -> None: ...
    def log_file(self, log_path: Text) -> None: ...
    def report_file(self, report_file: Text) -> None: ...
    def xunit_file(self, xunit_path: Text) -> None: ...
    def close(self) -> None: ...
