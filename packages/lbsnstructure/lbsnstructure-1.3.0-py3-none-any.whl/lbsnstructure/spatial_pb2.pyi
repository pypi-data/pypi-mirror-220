"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
global package namespace"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import lbsnstructure.social_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Place(google.protobuf.message.Message):
    """
    A place on a location based social network (LBSN).

    Places are spatial named references of interests such as POIs,
    often added by users themselves and around which discussions may evolve.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class AttributesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    PKEY_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    NAME_ALTERNATIVES_FIELD_NUMBER: builtins.int
    POST_COUNT_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    GEOM_CENTER_FIELD_NUMBER: builtins.int
    GEOM_AREA_FIELD_NUMBER: builtins.int
    CITY_PKEY_FIELD_NUMBER: builtins.int
    PLACE_DESCRIPTION_FIELD_NUMBER: builtins.int
    PLACE_WEBSITE_FIELD_NUMBER: builtins.int
    PLACE_PHONE_FIELD_NUMBER: builtins.int
    ADDRESS_FIELD_NUMBER: builtins.int
    ZIP_CODE_FIELD_NUMBER: builtins.int
    CHECKIN_COUNT_FIELD_NUMBER: builtins.int
    LIKE_COUNT_FIELD_NUMBER: builtins.int
    PARENT_PLACES_FIELD_NUMBER: builtins.int
    ATTRIBUTES_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Primary Key. A unique identifier of the object.
        """
    name: builtins.str
    """
    Name of the place in English
    """
    @property
    def name_alternatives(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        Alternative names (e.g. in other languages; synonyms).
        """
    post_count: builtins.int
    """
    Number of total posts for this place.
    """
    url: builtins.str
    """
    URL to the public place-page representation on the respective LBSN
    """
    geom_center: builtins.str
    """
    WKT Point (centroid of geom_area)
    """
    geom_area: builtins.str
    """
    WKT Polygon (boundary of the place)
    """
    @property
    def city_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to the city this place belongs to.
        """
    place_description: builtins.str
    """
    Public description of the place.
    """
    place_website: builtins.str
    """
    A link provided by users for this place (e.g.
    webpage for restaurant, park-management etc.)
    """
    place_phone: builtins.str
    """
    Phone number publicly provided for some places on LBSN.
    """
    address: builtins.str
    """
    Address publicly provided for some places on LBSN.
    """
    zip_code: builtins.str
    """
    Zip_code publicly provided for some places on LBSN.
    """
    checkin_count: builtins.int
    """
    Total number of user checkins for this place
    (e.g. checkin functionality on Foursquare or Facebook)
    """
    like_count: builtins.int
    """
    Total number of times this places has been liked.
    """
    @property
    def parent_places(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        Places can be hierarchically structured, list any up-hierarchy
        places parent to this one as guids here
        """
    @property
    def attributes(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """
        Any additional place attributes (key-value pair).
        Example: category → park; owner → "Katherine Dunn".
        """
    def __init__(
        self,
        *,
        pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        name: builtins.str = ...,
        name_alternatives: collections.abc.Iterable[builtins.str] | None = ...,
        post_count: builtins.int = ...,
        url: builtins.str = ...,
        geom_center: builtins.str = ...,
        geom_area: builtins.str = ...,
        city_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        place_description: builtins.str = ...,
        place_website: builtins.str = ...,
        place_phone: builtins.str = ...,
        address: builtins.str = ...,
        zip_code: builtins.str = ...,
        checkin_count: builtins.int = ...,
        like_count: builtins.int = ...,
        parent_places: collections.abc.Iterable[builtins.str] | None = ...,
        attributes: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["city_pkey", b"city_pkey", "pkey", b"pkey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["address", b"address", "attributes", b"attributes", "checkin_count", b"checkin_count", "city_pkey", b"city_pkey", "geom_area", b"geom_area", "geom_center", b"geom_center", "like_count", b"like_count", "name", b"name", "name_alternatives", b"name_alternatives", "parent_places", b"parent_places", "pkey", b"pkey", "place_description", b"place_description", "place_phone", b"place_phone", "place_website", b"place_website", "post_count", b"post_count", "url", b"url", "zip_code", b"zip_code"]) -> None: ...

global___Place = Place

@typing_extensions.final
class City(google.protobuf.message.Message):
    """
    A city on a location based social network (LBSN).

    Cities are hierarchical above places, sometimes with specific
    public page where a City's official representation is presented,
    sometimes they're automatically added to structure place information into
    common groups.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PKEY_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    NAME_ALTERNATIVES_FIELD_NUMBER: builtins.int
    SUB_TYPE_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    GEOM_CENTER_FIELD_NUMBER: builtins.int
    GEOM_AREA_FIELD_NUMBER: builtins.int
    COUNTRY_PKEY_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Primary Key. A unique identifier of the object.
        """
    name: builtins.str
    """
    Name of the city in English.
    """
    @property
    def name_alternatives(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        Alternative names (e.g. in other languages; synonyms).
        """
    sub_type: builtins.str
    """
    Optionally add a subtype of City (e.g. "Neighborhood", "Admin", etc.)
    """
    url: builtins.str
    """
    Url to the public web address of the city
    """
    geom_center: builtins.str
    """
    WKT Point (centroid of geom_area)
    """
    geom_area: builtins.str
    """
    WKT Polygon (boundary of the city)
    """
    @property
    def country_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to the country this city belongs to.
        """
    def __init__(
        self,
        *,
        pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        name: builtins.str = ...,
        name_alternatives: collections.abc.Iterable[builtins.str] | None = ...,
        sub_type: builtins.str = ...,
        url: builtins.str = ...,
        geom_center: builtins.str = ...,
        geom_area: builtins.str = ...,
        country_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["country_pkey", b"country_pkey", "pkey", b"pkey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["country_pkey", b"country_pkey", "geom_area", b"geom_area", "geom_center", b"geom_center", "name", b"name", "name_alternatives", b"name_alternatives", "pkey", b"pkey", "sub_type", b"sub_type", "url", b"url"]) -> None: ...

global___City = City

@typing_extensions.final
class Country(google.protobuf.message.Message):
    """
    A country on a location based social network (LBSN).

    Cities are hierarchical above places, sometimes with specific
    public page where a Country's official representation is presented,
    sometimes they're automatically added to structure city and place
    information into common groups.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PKEY_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    NAME_ALTERNATIVES_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    GEOM_CENTER_FIELD_NUMBER: builtins.int
    GEOM_AREA_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Primary Key. A unique identifier of the object.
        """
    name: builtins.str
    """
    Name of the country in English.
    """
    @property
    def name_alternatives(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        Alternative names (e.g. in other languages; synonyms).
        """
    url: builtins.str
    """
    Url to the public web address of the country
    """
    geom_center: builtins.str
    """
    WKT Point (centroid of geom_area)
    """
    geom_area: builtins.str
    """
    WKT Polygon (boundary of the country)
    """
    def __init__(
        self,
        *,
        pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        name: builtins.str = ...,
        name_alternatives: collections.abc.Iterable[builtins.str] | None = ...,
        url: builtins.str = ...,
        geom_center: builtins.str = ...,
        geom_area: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pkey", b"pkey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["geom_area", b"geom_area", "geom_center", b"geom_center", "name", b"name", "name_alternatives", b"name_alternatives", "pkey", b"pkey", "url", b"url"]) -> None: ...

global___Country = Country
