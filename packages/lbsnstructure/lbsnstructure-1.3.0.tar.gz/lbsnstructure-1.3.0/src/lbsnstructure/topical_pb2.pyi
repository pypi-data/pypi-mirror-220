"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
global package namespace"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import lbsnstructure.social_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Post(google.protobuf.message.Message):
    """
    An original post on a location based social network (LBSN)

    Note that:

    - all LBSM posts are reactions,
    - all reactions have a referent event
    - referent events may consist of complex motivational patterns and are
    therefore often difficult to identify

    See also the [Wikipedia](https://en.wikipedia.org/wiki/Posting_style) entry.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _PostGeoaccuracy:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _PostGeoaccuracyEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Post._PostGeoaccuracy.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: Post._PostGeoaccuracy.ValueType  # 0
        LATLNG: Post._PostGeoaccuracy.ValueType  # 1
        """A single coordinate"""
        PLACE: Post._PostGeoaccuracy.ValueType  # 2
        """A place reference"""
        CITY: Post._PostGeoaccuracy.ValueType  # 3
        """A city reference"""
        COUNTRY: Post._PostGeoaccuracy.ValueType  # 4

    class PostGeoaccuracy(_PostGeoaccuracy, metaclass=_PostGeoaccuracyEnumTypeWrapper):
        """
        Spatial information can have different levels of granularity
        and users can often choose which locational accuracy they want use.
        """

    UNKNOWN: Post.PostGeoaccuracy.ValueType  # 0
    LATLNG: Post.PostGeoaccuracy.ValueType  # 1
    """A single coordinate"""
    PLACE: Post.PostGeoaccuracy.ValueType  # 2
    """A place reference"""
    CITY: Post.PostGeoaccuracy.ValueType  # 3
    """A city reference"""
    COUNTRY: Post.PostGeoaccuracy.ValueType  # 4

    class _PostType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _PostTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Post._PostType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        TEXT: Post._PostType.ValueType  # 0
        """Default post type is text (e.g. a tweet on Twitter)"""
        IMAGE: Post._PostType.ValueType  # 1
        """Post of type "image" (e.g. a photo on Flickr)"""
        VIDEO: Post._PostType.ValueType  # 2
        """Post of type "video" (e.g. a video on Youtube)"""
        LINK: Post._PostType.ValueType  # 3
        """Post of type "link" (e.g. a link share on Reddit)"""
        OTHER: Post._PostType.ValueType  # 4
        """Post of specific type not yet added to the specification"""

    class PostType(_PostType, metaclass=_PostTypeEnumTypeWrapper):
        """
        Type of post
        """

    TEXT: Post.PostType.ValueType  # 0
    """Default post type is text (e.g. a tweet on Twitter)"""
    IMAGE: Post.PostType.ValueType  # 1
    """Post of type "image" (e.g. a photo on Flickr)"""
    VIDEO: Post.PostType.ValueType  # 2
    """Post of type "video" (e.g. a video on Youtube)"""
    LINK: Post.PostType.ValueType  # 3
    """Post of type "link" (e.g. a link share on Reddit)"""
    OTHER: Post.PostType.ValueType  # 4
    """Post of specific type not yet added to the specification"""

    PKEY_FIELD_NUMBER: builtins.int
    POST_LATLNG_FIELD_NUMBER: builtins.int
    PLACE_PKEY_FIELD_NUMBER: builtins.int
    CITY_PKEY_FIELD_NUMBER: builtins.int
    COUNTRY_PKEY_FIELD_NUMBER: builtins.int
    USER_PKEY_FIELD_NUMBER: builtins.int
    POST_PUBLISH_DATE_FIELD_NUMBER: builtins.int
    POST_BODY_FIELD_NUMBER: builtins.int
    POST_GEOACCURACY_FIELD_NUMBER: builtins.int
    USER_MENTIONS_PKEY_FIELD_NUMBER: builtins.int
    HASHTAGS_FIELD_NUMBER: builtins.int
    EMOJI_FIELD_NUMBER: builtins.int
    POST_LIKE_COUNT_FIELD_NUMBER: builtins.int
    POST_COMMENT_COUNT_FIELD_NUMBER: builtins.int
    POST_VIEWS_COUNT_FIELD_NUMBER: builtins.int
    POST_TITLE_FIELD_NUMBER: builtins.int
    POST_CREATE_DATE_FIELD_NUMBER: builtins.int
    POST_THUMBNAIL_URL_FIELD_NUMBER: builtins.int
    POST_URL_FIELD_NUMBER: builtins.int
    POST_TYPE_FIELD_NUMBER: builtins.int
    POST_FILTER_FIELD_NUMBER: builtins.int
    POST_QUOTE_COUNT_FIELD_NUMBER: builtins.int
    POST_SHARE_COUNT_FIELD_NUMBER: builtins.int
    INPUT_SOURCE_FIELD_NUMBER: builtins.int
    POST_LANGUAGE_FIELD_NUMBER: builtins.int
    POST_CONTENT_LICENSE_FIELD_NUMBER: builtins.int
    TOPIC_GROUP_FIELD_NUMBER: builtins.int
    POST_DOWNVOTES_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Primary Key. A unique identifier of the object across networks.
        """
    post_latlng: builtins.str
    """
    Location of the post, either chosen by the user, automatically
    attached to the post by input device (GPS) or complemented
    by algorithms of the service (e.g. Twitter post geocoding, as derived
    from the post_body text. If lat/lng coordinates are not submitted,
    this field can be substituded with location information from place,
    city or country table. In those cases, post_geoaccuracy indicates
    lower level geoaccuracy, e.g.: 'place', 'city', or 'country'.
    Formatting: WKT (Well-Known-Text String)
    """
    @property
    def place_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to a place this post is associated with.
        """
    @property
    def city_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to a city this post is associated with.
        """
    @property
    def country_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to a country this post is associated with.
        """
    @property
    def user_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to the user who created the post.
        """
    @property
    def post_publish_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """
        The time when the post content was shared online, e.g. on
        Flickr, the publish_date refers to the time of photo
        sharing (upload-time)
        """
    post_body: builtins.str
    """
    The textual content of the post, e.g. the description of the
    photo on Flickr, the tweet text on Twitter etc.
    """
    post_geoaccuracy: global___Post.PostGeoaccuracy.ValueType
    """
    This field specifies the highest location accuracy available for this post,
    either 'latlng', 'place', 'city' or 'country'.
    """
    @property
    def user_mentions_pkey(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[lbsnstructure.social_pb2.CompositeKey]:
        """A list of referenced user_guids that are
        mentioned in the post_body, post_title or
        other parts of a post. In postgres mapping, these are not direct
        references that are checked, but mere lists of strings (array),
        since Foreign Key Arrays are not supported.
        """
    @property
    def hashtags(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        List of hashtags explicitly assigned to the post, either
        inside post_body (e.g. with hash-character (#), or in a separate field
        such as "tags" on Flickr). Note that Flickr users may still use the hash
        symbol (#). Therefore, hashtag and tag are synonyms for users explicitly
        highlighting single terms inside the larger context of the post.
        """
    @property
    def emoji(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        List of Emoji Symbols, either extracted from post_body or provided
        in a separate field. Duplicates allowed. For possible symbols, see:
        unicode.org/emoji/charts/full-emoji-list.html
        """
    post_like_count: builtins.int
    """
    Number of times this Post has been liked
    by other users.
    """
    post_comment_count: builtins.int
    """
    Number of times this Post has been commented
    by other users, e.g. count of Reply-Tweets on Twitter,
    count of photo comments on Flickr etc.
    """
    post_views_count: builtins.int
    """
    Number of times this Post has been viewed
    by other users.
    """
    post_title: builtins.str
    """
    The title of the post. This is sometimes available in a separate field.
    E.g. on Flickr, a photo can have both a title and a description. On
    Instgram, however, only the post_body is available.
    """
    @property
    def post_create_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """
        The time when the post content was originally created. Most often,
        this matched the publish_date (e.g. on Twitter or Instagram). On
        Flickr, the create_date refers to the photo's timestamp, and the
        publish_date refers to the time of photo sharing (upload-time)
        """
    post_thumbnail_url: builtins.str
    """
    Url to the public thumbnail of this post. usually this will only
    be available for posts of type IMAGE.
    """
    post_url: builtins.str
    """
    Url to the original post.
    """
    post_type: global___Post.PostType.ValueType
    """
    Type of post, e.g. text, image, video or other.
    If possible, choose the more specific type
    (e.g. VIDEO over TEXT even if text is present in a video-post).
    """
    post_filter: builtins.str
    """
    Any filters/labels applied to post?
    (e.g. Instagram photo filters such as Amarao;
    Automatic translations of text; or 
    the "flair" of Reddit posts).
    """
    post_quote_count: builtins.int
    """
    Number of times this Post has been quoted by other users,
    e.g. count of Quote-Tweets on Twitter.
    """
    post_share_count: builtins.int
    """
    Number of times this Post has been shared
    by other users, e.g. count of Retweets on Twitter.
    """
    input_source: builtins.str
    """
    Type of input device used by the user to post,
    for a list see Twitter, e.g. 'Web', 'IPhone',
    'Android' etc. Recommendation: should be oriented
    at Twitter's large list of source types. For camera
    models, have a look at Flickr.
    """
    @property
    def post_language(self) -> lbsnstructure.social_pb2.Language:
        """
        Language of the post (A BCP 47 language identifier
        corresponding to the (machine-detected) language of the Post body-text,
        empty if no language could be detected, NULL if not specified.
        """
    post_content_license: builtins.int
    """An integer for specifying the of the post
    which can be optionally chosen by users on
    some services (e.g. Flickr). For example:
    All Rights Reserved = 0. Numbers can be
    oriented at [Flickr's](https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html) list of content licenses:
    """
    @property
    def topic_group(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Whether the post is assigned to any explicit topic groups.
        This could be a Reddit submission that belongs
        to a Subreddit (= the topic group);
        or a Flickr image posted to a number of photo groups. A Post
        can belong to multiple topics (e.g. a "cross-post" on Reddit).
        """
    post_downvotes: builtins.int
    """
    Number of times this Post has been downvoted
    by other users (HackerNews, Reddit)
    """
    def __init__(
        self,
        *,
        pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        post_latlng: builtins.str = ...,
        place_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        city_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        country_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        user_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        post_publish_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        post_body: builtins.str = ...,
        post_geoaccuracy: global___Post.PostGeoaccuracy.ValueType = ...,
        user_mentions_pkey: collections.abc.Iterable[lbsnstructure.social_pb2.CompositeKey] | None = ...,
        hashtags: collections.abc.Iterable[builtins.str] | None = ...,
        emoji: collections.abc.Iterable[builtins.str] | None = ...,
        post_like_count: builtins.int = ...,
        post_comment_count: builtins.int = ...,
        post_views_count: builtins.int = ...,
        post_title: builtins.str = ...,
        post_create_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        post_thumbnail_url: builtins.str = ...,
        post_url: builtins.str = ...,
        post_type: global___Post.PostType.ValueType = ...,
        post_filter: builtins.str = ...,
        post_quote_count: builtins.int = ...,
        post_share_count: builtins.int = ...,
        input_source: builtins.str = ...,
        post_language: lbsnstructure.social_pb2.Language | None = ...,
        post_content_license: builtins.int = ...,
        topic_group: collections.abc.Iterable[builtins.str] | None = ...,
        post_downvotes: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["city_pkey", b"city_pkey", "country_pkey", b"country_pkey", "pkey", b"pkey", "place_pkey", b"place_pkey", "post_create_date", b"post_create_date", "post_language", b"post_language", "post_publish_date", b"post_publish_date", "user_pkey", b"user_pkey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["city_pkey", b"city_pkey", "country_pkey", b"country_pkey", "emoji", b"emoji", "hashtags", b"hashtags", "input_source", b"input_source", "pkey", b"pkey", "place_pkey", b"place_pkey", "post_body", b"post_body", "post_comment_count", b"post_comment_count", "post_content_license", b"post_content_license", "post_create_date", b"post_create_date", "post_downvotes", b"post_downvotes", "post_filter", b"post_filter", "post_geoaccuracy", b"post_geoaccuracy", "post_language", b"post_language", "post_latlng", b"post_latlng", "post_like_count", b"post_like_count", "post_publish_date", b"post_publish_date", "post_quote_count", b"post_quote_count", "post_share_count", b"post_share_count", "post_thumbnail_url", b"post_thumbnail_url", "post_title", b"post_title", "post_type", b"post_type", "post_url", b"post_url", "post_views_count", b"post_views_count", "topic_group", b"topic_group", "user_mentions_pkey", b"user_mentions_pkey", "user_pkey", b"user_pkey"]) -> None: ...

global___Post = Post

@typing_extensions.final
class PostReaction(google.protobuf.message.Message):
    """
    A reaction on a location based social network (LBSN).

    Note that posts are also reactions. However, a post reaction
    is a post with a reduced structure suitable for simple expressions
    such as likes that don't have all post attributes.

    The difference between an original post and a post reaction is not clear cut.
    In general, original posts provide original (new) content that is
    compiled by the posting user/author. Post reactions merely add information,
    e.g. by quoting an original post, or provide an expression or stance towards
    a post (or another reaction), e.g. a like or 'star'.

    Post reactions are suitable for mapping the spread of information,
    because it contains two attributes for referencing the original post
    that motivated the reaction (referencedPost)
    or a reference to another reaction that was reacted
    upon (referencedPostreaction)

    Example reaction_types:

    - share
    - comment/reply
    - quote
    - like/star/highlight
    - emoji etc.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ReactionType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ReactionTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[PostReaction._ReactionType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: PostReaction._ReactionType.ValueType  # 0
        SHARE: PostReaction._ReactionType.ValueType  # 1
        """A sharing reaction usually does not add much content"""
        COMMENT: PostReaction._ReactionType.ValueType  # 2
        """A comment reaction adds additional content"""
        QUOTE: PostReaction._ReactionType.ValueType  # 3
        """A quote reaction adds some additional content"""
        LIKE: PostReaction._ReactionType.ValueType  # 4
        """A like reaction is a basic form of appreciation"""
        EMOJI: PostReaction._ReactionType.ValueType  # 5
        """An emoji usually encodes different expressions of feelings"""
        OTHER: PostReaction._ReactionType.ValueType  # 6

    class ReactionType(_ReactionType, metaclass=_ReactionTypeEnumTypeWrapper):
        """
        Possible type of reactions.
        """

    UNKNOWN: PostReaction.ReactionType.ValueType  # 0
    SHARE: PostReaction.ReactionType.ValueType  # 1
    """A sharing reaction usually does not add much content"""
    COMMENT: PostReaction.ReactionType.ValueType  # 2
    """A comment reaction adds additional content"""
    QUOTE: PostReaction.ReactionType.ValueType  # 3
    """A quote reaction adds some additional content"""
    LIKE: PostReaction.ReactionType.ValueType  # 4
    """A like reaction is a basic form of appreciation"""
    EMOJI: PostReaction.ReactionType.ValueType  # 5
    """An emoji usually encodes different expressions of feelings"""
    OTHER: PostReaction.ReactionType.ValueType  # 6

    PKEY_FIELD_NUMBER: builtins.int
    USER_PKEY_FIELD_NUMBER: builtins.int
    REFERENCEDPOST_PKEY_FIELD_NUMBER: builtins.int
    REFERENCEDPOSTREACTION_PKEY_FIELD_NUMBER: builtins.int
    REACTION_LATLNG_FIELD_NUMBER: builtins.int
    REACTION_TYPE_FIELD_NUMBER: builtins.int
    REACTION_DATE_FIELD_NUMBER: builtins.int
    REACTION_CONTENT_FIELD_NUMBER: builtins.int
    REACTION_LIKE_COUNT_FIELD_NUMBER: builtins.int
    USER_MENTIONS_PKEY_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Primary Key. A unique identifier of the object.
        """
    @property
    def user_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        Reference to the user who reacted.
        """
    @property
    def referencedPost_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        A reference to the original post to which this reaction refers to
        (e.g. for a reaction of type REPLY, reference of the original post_pkey)
        """
    @property
    def referencedPostreaction_pkey(self) -> lbsnstructure.social_pb2.CompositeKey:
        """
        A reference to another reaction (e.g. if this reaction is a "like"
        of another reaction, reference original postreaction_pkey here)
        """
    reaction_latlng: builtins.str
    """
    Location of the reaction (point), either chosen by the user, automatically
    attached to the reaction by input device (GPS) or complemented
    by algorithms of the service.
    """
    reaction_type: global___PostReaction.ReactionType.ValueType
    """
    Type of reaction. Choose the more specific type if multiple apply. Merge
    similar types: Retweet → Share; Reply → Comment; Star → Like
    """
    @property
    def reaction_date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """
        Time and Date of the reaction.
        """
    reaction_content: builtins.str
    """
    Content of the reaction (e.g. the text).
    """
    reaction_like_count: builtins.int
    """
    Number of times this reaction has been liked by others.
    """
    @property
    def user_mentions_pkey(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[lbsnstructure.social_pb2.CompositeKey]:
        """A list of referenced user_guids that are
        mentioned in the reaction.
        """
    def __init__(
        self,
        *,
        pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        user_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        referencedPost_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        referencedPostreaction_pkey: lbsnstructure.social_pb2.CompositeKey | None = ...,
        reaction_latlng: builtins.str = ...,
        reaction_type: global___PostReaction.ReactionType.ValueType = ...,
        reaction_date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        reaction_content: builtins.str = ...,
        reaction_like_count: builtins.int = ...,
        user_mentions_pkey: collections.abc.Iterable[lbsnstructure.social_pb2.CompositeKey] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pkey", b"pkey", "reaction_date", b"reaction_date", "referencedPost_pkey", b"referencedPost_pkey", "referencedPostreaction_pkey", b"referencedPostreaction_pkey", "user_pkey", b"user_pkey"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pkey", b"pkey", "reaction_content", b"reaction_content", "reaction_date", b"reaction_date", "reaction_latlng", b"reaction_latlng", "reaction_like_count", b"reaction_like_count", "reaction_type", b"reaction_type", "referencedPost_pkey", b"referencedPost_pkey", "referencedPostreaction_pkey", b"referencedPostreaction_pkey", "user_mentions_pkey", b"user_mentions_pkey", "user_pkey", b"user_pkey"]) -> None: ...

global___PostReaction = PostReaction
