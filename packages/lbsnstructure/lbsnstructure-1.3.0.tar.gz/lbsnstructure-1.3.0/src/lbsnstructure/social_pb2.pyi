"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
global package namespace"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Origin(google.protobuf.message.Message):
    """
    An Origin is a reference to a unique Location Based Social Network (LBSN).
    We've added some of the most popular social media networks to the list,
    which can be extended further.

    An Origin is the base unit of the LBSN structure and it is organized under
    the Social Facet because Social Media Networks are formed by large groups of
    people (the social part) around some common interest
    (e.g. Flickr or Instagram for photography,
    Twitter for opinion formation and exchange of political perspectives).

    While OriginIDs are entirely open, we added a list of predefined common
    Networks.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _OriginID:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _OriginIDEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Origin._OriginID.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        LBSN: Origin._OriginID.ValueType  # 0
        """default"""
        INSTAGRAM: Origin._OriginID.ValueType  # 1
        FLICKR: Origin._OriginID.ValueType  # 2
        TWITTER: Origin._OriginID.ValueType  # 3
        FACEBOOK: Origin._OriginID.ValueType  # 4
        FOURSQUARE: Origin._OriginID.ValueType  # 5
        WIKIDATA: Origin._OriginID.ValueType  # 6
        WIKIPEDIA: Origin._OriginID.ValueType  # 7
        REDDIT: Origin._OriginID.ValueType  # 8
        GEOGRAPH: Origin._OriginID.ValueType  # 9
        GOOGLEPLACEPHOTO: Origin._OriginID.ValueType  # 10
        PINTEREST: Origin._OriginID.ValueType  # 11
        MAPILLARY: Origin._OriginID.ValueType  # 12
        SNAPCHAT: Origin._OriginID.ValueType  # 13
        POKEMONGO: Origin._OriginID.ValueType  # 14
        WIKIMEDIACOMMONS: Origin._OriginID.ValueType  # 15
        WIKIMAPIA: Origin._OriginID.ValueType  # 16
        AIRBNB: Origin._OriginID.ValueType  # 17
        PORTALNINANTIC: Origin._OriginID.ValueType  # 18
        TIKTOK: Origin._OriginID.ValueType  # 19
        TELEGRAM: Origin._OriginID.ValueType  # 20
        GAB: Origin._OriginID.ValueType  # 21
        EBIRD: Origin._OriginID.ValueType  # 22
        INATURALIST: Origin._OriginID.ValueType  # 23
        ISPOTNATURE: Origin._OriginID.ValueType  # 24
        TRIPADVISOR: Origin._OriginID.ValueType  # 25

    class OriginID(_OriginID, metaclass=_OriginIDEnumTypeWrapper):
        """
        Predefined values for OriginID. Default origin id is LBSN (0)
        """

    LBSN: Origin.OriginID.ValueType  # 0
    """default"""
    INSTAGRAM: Origin.OriginID.ValueType  # 1
    FLICKR: Origin.OriginID.ValueType  # 2
    TWITTER: Origin.OriginID.ValueType  # 3
    FACEBOOK: Origin.OriginID.ValueType  # 4
    FOURSQUARE: Origin.OriginID.ValueType  # 5
    WIKIDATA: Origin.OriginID.ValueType  # 6
    WIKIPEDIA: Origin.OriginID.ValueType  # 7
    REDDIT: Origin.OriginID.ValueType  # 8
    GEOGRAPH: Origin.OriginID.ValueType  # 9
    GOOGLEPLACEPHOTO: Origin.OriginID.ValueType  # 10
    PINTEREST: Origin.OriginID.ValueType  # 11
    MAPILLARY: Origin.OriginID.ValueType  # 12
    SNAPCHAT: Origin.OriginID.ValueType  # 13
    POKEMONGO: Origin.OriginID.ValueType  # 14
    WIKIMEDIACOMMONS: Origin.OriginID.ValueType  # 15
    WIKIMAPIA: Origin.OriginID.ValueType  # 16
    AIRBNB: Origin.OriginID.ValueType  # 17
    PORTALNINANTIC: Origin.OriginID.ValueType  # 18
    TIKTOK: Origin.OriginID.ValueType  # 19
    TELEGRAM: Origin.OriginID.ValueType  # 20
    GAB: Origin.OriginID.ValueType  # 21
    EBIRD: Origin.OriginID.ValueType  # 22
    INATURALIST: Origin.OriginID.ValueType  # 23
    ISPOTNATURE: Origin.OriginID.ValueType  # 24
    TRIPADVISOR: Origin.OriginID.ValueType  # 25

    ORIGIN_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    origin_id: global___Origin.OriginID.ValueType
    """
    A unique Origin ID as a reference for the LBSN
    """
    name: builtins.str
    """
    The name of Origin, e.g. the service's name
    """
    def __init__(
        self,
        *,
        origin_id: global___Origin.OriginID.ValueType = ...,
        name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["name", b"name", "origin_id", b"origin_id"]) -> None: ...

global___Origin = Origin

@typing_extensions.final
class CompositeKey(google.protobuf.message.Message):
    """
    Except for language, a Composite Keys are used for all objects
    in the structure, which allow creating Composite References consisting
    of an Origin (a reference to a Location based Social networkLBSN) and
    the original or derived (hashed) (gu)id for each object on the respective
    LBSN.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ORIGIN_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    @property
    def origin(self) -> global___Origin:
        """e.g. 1= Instagram, 2= Flickr, 3=Twitter"""
    id: builtins.str
    """the services original unique (gu)id for this object"""
    def __init__(
        self,
        *,
        origin: global___Origin | None = ...,
        id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["origin", b"origin"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["id", b"id", "origin", b"origin"]) -> None: ...

global___CompositeKey = CompositeKey

@typing_extensions.final
class User(google.protobuf.message.Message):
    """
    A user (e.g. a profile or an account) on a location based social network (LBSN)

    Note that it is often challenging to determine whether a social media
    profiles represent fictitious or real persons, bots or even ‘cyborgs’
    (You et al. 2012). Therefore, a user may also be considered as
    an ‘avatar’ representing an organization or a group of individuals.

    See also the [Wikipedia](https://en.wikipedia.org/wiki/User_(computing))
    entry.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PKEY_FIELD_NUMBER: builtins.int
    USER_NAME_FIELD_NUMBER: builtins.int
    USER_FULLNAME_FIELD_NUMBER: builtins.int
    FOLLOWS_FIELD_NUMBER: builtins.int
    FOLLOWED_FIELD_NUMBER: builtins.int
    GROUP_COUNT_FIELD_NUMBER: builtins.int
    BIOGRAPHY_FIELD_NUMBER: builtins.int
    POST_COUNT_FIELD_NUMBER: builtins.int
    URL_FIELD_NUMBER: builtins.int
    IS_PRIVATE_FIELD_NUMBER: builtins.int
    IS_AVAILABLE_FIELD_NUMBER: builtins.int
    USER_LANGUAGE_FIELD_NUMBER: builtins.int
    USER_LOCATION_FIELD_NUMBER: builtins.int
    USER_LOCATION_GEOM_FIELD_NUMBER: builtins.int
    LIKED_COUNT_FIELD_NUMBER: builtins.int
    ACTIVE_SINCE_FIELD_NUMBER: builtins.int
    PROFILE_IMAGE_URL_FIELD_NUMBER: builtins.int
    USER_TIMEZONE_FIELD_NUMBER: builtins.int
    USER_UTC_OFFSET_FIELD_NUMBER: builtins.int
    USER_GROUPS_MEMBER_FIELD_NUMBER: builtins.int
    USER_GROUPS_FOLLOWS_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> global___CompositeKey:
        """
        Primary Key. A unique identifier of the object.
        """
    user_name: builtins.str
    """
    Name of the User.
    Can be an alias, email or real name etc.
    """
    user_fullname: builtins.str
    """
    Full name of the User.
    Can be an alias, email or real name etc.
    """
    follows: builtins.int
    """
    Number of other users this user follows.
    """
    followed: builtins.int
    """
    Number of times this user is followed by others.
    """
    group_count: builtins.int
    """
    The number of public groups or communities this user is a member of
    """
    biography: builtins.str
    """
    A short user biography or description.
    """
    post_count: builtins.int
    """
    Number of posts this user has created.
    """
    url: builtins.str
    """
    Full URL to public user profile.
    """
    is_private: builtins.bool
    """
    Whether the user has chosen to remain private
    (e.g. profile not publicly visible).
    """
    is_available: builtins.bool
    """
    A user that is not available can mean several things.
    When the user's account was deactivated or when
    users explicitly chose to delete their account,
    but keep public data, this field would be False.
    """
    @property
    def user_language(self) -> global___Language:
        """
        A BCP 47 language identifier corresponding to the
        machine-detected or user selected language.
        """
    user_location: builtins.str
    """
    The user-defined location for this profile.
    Not necessarily a location, nor machine-parseable
    (e.g. a user can choose 'world' as his/her location,
    or any other string)
    """
    user_location_geom: builtins.str
    """
    Coordinates (Point: lat/lng)
    of the user-location, either provided by user
    or geocoded from the user's location.
    """
    liked_count: builtins.int
    """
    The number of Posts this user has liked in total.
    """
    @property
    def active_since(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """
        UTC datetime when the user was first active
        (e.g. time of account creation, or derived from first post_publish_date).
        """
    profile_image_url: builtins.str
    """
    URL pointing to the public profile image of the user.
    """
    user_timezone: builtins.str
    """
    Time zone ID that can be specified by the user.
    """
    user_utc_offset: builtins.int
    """
    Optional difference in hours from Coordinated Universal Time (UTC)
    for a particular user defined place.
    """
    @property
    def user_groups_member(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        The list of groups this user has joined/ is a member of
        (active participation interest).
        """
    @property
    def user_groups_follows(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """
        The list of groups this user follows (viewing interest).
        """
    def __init__(
        self,
        *,
        pkey: global___CompositeKey | None = ...,
        user_name: builtins.str = ...,
        user_fullname: builtins.str = ...,
        follows: builtins.int = ...,
        followed: builtins.int = ...,
        group_count: builtins.int = ...,
        biography: builtins.str = ...,
        post_count: builtins.int = ...,
        url: builtins.str = ...,
        is_private: builtins.bool = ...,
        is_available: builtins.bool = ...,
        user_language: global___Language | None = ...,
        user_location: builtins.str = ...,
        user_location_geom: builtins.str = ...,
        liked_count: builtins.int = ...,
        active_since: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        profile_image_url: builtins.str = ...,
        user_timezone: builtins.str = ...,
        user_utc_offset: builtins.int = ...,
        user_groups_member: collections.abc.Iterable[builtins.str] | None = ...,
        user_groups_follows: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["active_since", b"active_since", "pkey", b"pkey", "user_language", b"user_language"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["active_since", b"active_since", "biography", b"biography", "followed", b"followed", "follows", b"follows", "group_count", b"group_count", "is_available", b"is_available", "is_private", b"is_private", "liked_count", b"liked_count", "pkey", b"pkey", "post_count", b"post_count", "profile_image_url", b"profile_image_url", "url", b"url", "user_fullname", b"user_fullname", "user_groups_follows", b"user_groups_follows", "user_groups_member", b"user_groups_member", "user_language", b"user_language", "user_location", b"user_location", "user_location_geom", b"user_location_geom", "user_name", b"user_name", "user_timezone", b"user_timezone", "user_utc_offset", b"user_utc_offset"]) -> None: ...

global___User = User

@typing_extensions.final
class UserGroup(google.protobuf.message.Message):
    """
    A user group on a location based social network (LBSN). Central
    to user groups is a common interest.

    User groups are organized differently on different LBSN, sometimes
    they're centrally organized by the organization, or by a single user,
    at other times, they're self-organized, sometimes with specific limitations
    to join etc. For example, on Facebook user griups are self-organized
    on pages, on Twitter, 'Lists' may be used by single users to produce
    a curated list of Twitter accounts.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PKEY_FIELD_NUMBER: builtins.int
    USERGROUP_NAME_FIELD_NUMBER: builtins.int
    USERGROUP_DESCRIPTION_FIELD_NUMBER: builtins.int
    MEMBER_COUNT_FIELD_NUMBER: builtins.int
    USERGROUP_CREATEDATE_FIELD_NUMBER: builtins.int
    USER_OWNER_PKEY_FIELD_NUMBER: builtins.int
    @property
    def pkey(self) -> global___CompositeKey:
        """
        Primary Key. A unique identifier of the object.
        """
    usergroup_name: builtins.str
    """
    Name of the UserGroup
    """
    usergroup_description: builtins.str
    """
    Description of the UserGroup
    """
    member_count: builtins.int
    """
    Total member count of this UserGroup
    """
    @property
    def usergroup_createdate(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """
        Time of creation for this UserGroup
        """
    @property
    def user_owner_pkey(self) -> global___CompositeKey:
        """
        A Reference to the owner of this UserGroup.
        """
    def __init__(
        self,
        *,
        pkey: global___CompositeKey | None = ...,
        usergroup_name: builtins.str = ...,
        usergroup_description: builtins.str = ...,
        member_count: builtins.int = ...,
        usergroup_createdate: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        user_owner_pkey: global___CompositeKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pkey", b"pkey", "user_owner_pkey", b"user_owner_pkey", "usergroup_createdate", b"usergroup_createdate"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["member_count", b"member_count", "pkey", b"pkey", "user_owner_pkey", b"user_owner_pkey", "usergroup_createdate", b"usergroup_createdate", "usergroup_description", b"usergroup_description", "usergroup_name", b"usergroup_name"]) -> None: ...

global___UserGroup = UserGroup

@typing_extensions.final
class Language(google.protobuf.message.Message):
    """
    A language identifier on LBSN.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LANGUAGE_SHORT_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    LANGUAGE_NAME_DE_FIELD_NUMBER: builtins.int
    language_short: builtins.str
    """
    A BCP 47 language identifier corresponding to the
    language of a Post or User (e.g.).
    Languages are organized under the Social Facet because
    they're usually references to cultures,
    which connect many people.
    """
    name: builtins.str
    """
    Name of the language (English)
    """
    language_name_de: builtins.str
    """
    Name of the language (German)
    """
    def __init__(
        self,
        *,
        language_short: builtins.str = ...,
        name: builtins.str = ...,
        language_name_de: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language_name_de", b"language_name_de", "language_short", b"language_short", "name", b"name"]) -> None: ...

global___Language = Language
