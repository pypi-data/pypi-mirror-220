# Thanks: klvm_rs' github actions.
name: Build Mac, Linux, and Windows wheels

on:
  push:
    branches:
      - base
      - dev
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build_wheels:
    name: Wheel on ${{ matrix.os }} py-${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      name: Install Python ${{ matrix.python }}
      with:
        python-version: ${{ matrix.python }}

    - name: Update pip
      run: |
          python -m pip install --upgrade pip

    - name: Set up rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install dependencies
      run: |
          python -m pip install maturin==0.12.20

    - name: Build MacOs with maturin on Python ${{ matrix.python }}
      if: startsWith(matrix.os, 'macos')
      run: |
        python -m venv venv
        ln -s venv/bin/activate
        . ./activate
        maturin build -i python --release --strip

    - name: Build Linux in manylinux2010 with maturin on Python ${{ matrix.python }}
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        podman run --rm=true \
          -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          quay.io/pypa/manylinux2010_x86_64 \
          bash -exc '\
            curl -L https://sh.rustup.rs > rustup-init.sh && \
            sh rustup-init.sh -y && \
            yum -y install libc6 openssl-devel && \
            source $HOME/.cargo/env && \
            rustup target add x86_64-unknown-linux-musl && \
            rm -rf venv && \
            PY_VERSION=${{ matrix.python }}
            PY_VERSION=${PY_VERSION/.} && \
            echo "Python version with dot removed is $PY_VERSION" && \
            if [ "$PY_VERSION" = "37" ]; \
            then export SCND_VERSION="${PY_VERSION}m"; \
            else export SCND_VERSION="$PY_VERSION"; fi && \
            echo "Exporting path /opt/python/cp$PY_VERSION-cp$SCND_VERSION/bin" && \
            export PATH=/opt/python/cp$PY_VERSION-cp$SCND_VERSION/bin/:$PATH && \
            /opt/python/cp38-cp38/bin/python -m venv venv && \
            if [ ! -f "activate" ]; then ln -s venv/bin/activate; fi && \
            . ./activate && \
            pip install --upgrade pip
          '
        docker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin:v0.13.1 build --release --strip --manylinux 2010
        # Refresh in case any ownerships changed.
        mv target target.docker && cp -r target.docker target
        # Ensure an empty .cargo-lock file exists.
        touch target/release/.cargo-lock

    - name: Build alpine wheel via docker
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.python, '3.7')
      run: |
        cd resources/alpine && docker build -t klvm-tools-rs-alpine .
        docker run -v ${GITHUB_WORKSPACE}:/root/klvm_tools_rs -t klvm-tools-rs-alpine sh /root/build-alpine.sh

    - name: Build Windows with maturin on Python ${{ matrix.python }}
      if: startsWith(matrix.os, 'windows')
      run: |
        python -m venv venv
        echo ". .\venv\Scripts\Activate.ps1" > activate.ps1
        . ./activate
        maturin build --no-sdist -i python --release --strip
        # Find and install the newly built wheel
        python support/wheelname.py

    - name: Install klvm_tools_rs wheel
      if: ${{ !startsWith(matrix.os, 'windows') }}
      run: |
        . ./activate
        ls target/wheels/
        # this mess puts the name of the `.whl` file into `$WHEEL_PATH`
        # remove the dot, use the `glob` lib to grab the file from the directory
        export WHEEL_PATH=$(echo ${{ matrix.python }} | python -c 'DOTLESS=input().replace(".", ""); import glob; print(" ".join(filter(lambda x: "musl" not in x, glob.glob("target/wheels/klvm_tools_rs-*-cp*-*.whl"))))' )
        echo ${WHEEL_PATH}
        pip install ${WHEEL_PATH}

    - name: Install other wheels
      run: |
        . ./activate
        python -m pip install pytest
        python -m pip install blspy      

    - name: install klvm & klvm_tools
      run: |
        . ./activate
        git clone https://github.com/Chik-Network/klvm.git --branch=main --single-branch
        python -m pip install ./klvm

        echo "installing klvm_rs via pip"
        pip install klvm_rs

        echo "installing klvm_tools for klvm tests"
        # klvm tools is required to run the tests is klvm
        python -m pip install klvm_tools

    - name: Ensure klvm, klvm_rs, klvm_tools_rs are installed
      run: |
        . ./activate
        python -c 'import klvm'
        python -c 'import klvm; print(klvm.__file__)'
        python -c 'import klvm_rs; print(klvm_rs.__file__)'
        python -c 'import klvm_tools_rs; print(klvm_tools_rs.__file__)'

    - name: Verify recompilation of old sources match
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.python, '3.7')
      run: |
        . ./activate
        # Build cmd line tools
        PYO3_PYTHON=`which python` cargo build --no-default-features --release

        # Grab chik-blockchain
        rm -rf chik-blockchain
        git clone https://github.com/Chik-Network/chik-blockchain

        # Check recompiles
        cp support/recompile_check.py chik-blockchain
        (cd chik-blockchain && python recompile_check.py)

    - name: Run tests from klvm
      run: |
        . ./activate
        cd klvm
        pip install pytest pytest-asyncio
        pytest tests

    - name: Run tests
      if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.python, '3.7')
      run: cargo test --no-default-features

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: ./target/wheels/

    - name: Install Twine
      run: pip install twine

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo ::set-output name=HAS_SECRET::${HAS_SECRET}
      env:
        SECRET: "${{ secrets.test_pypi_password }}"

    - name: publish (PyPi)
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: publish (Test PyPi)
      if: steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

  fmt:
    runs-on: ubuntu-20.04
    name: cargo fmt
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy
      - name: fmt
        run: cargo fmt -- --files-with-diff --check

  clippy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - name: clippy
        run: cargo clippy --all -- -D warnings
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  unit_tests:
    runs-on: ubuntu-20.04
    name: Unit tests
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: rustfmt, clippy
      - name: cargo test
        run: cargo test
