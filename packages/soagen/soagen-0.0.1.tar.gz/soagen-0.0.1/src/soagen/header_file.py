#!/usr/bin/env python3
# This file is a part of marzer/soagen and is subject to the the terms of the MIT license.
# Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
# See https://github.com/marzer/soagen/blob/master/LICENSE for the full license text.
# SPDX-License-Identifier: MIT

from . import utils
from .column import *
from .configurable import Configurable
from .includes import *
from .metavars import *
from .schemas import And, Optional, Schema, Stripped, Use, ValueOrArray
from .writer import *


class HeaderFile(Configurable):

	# yapf: disable
	__schema = Schema({
		Optional(r'prologue', default='')   : Stripped(str),
		Optional(r'header', default='')     : Stripped(str),
		Optional(r'footer', default='')     : Stripped(str),
		Optional(r'internal_includes', default=list) : And(ValueOrArray(str, name=r'internal_includes'), Use(lambda x: remove_implicit_includes(sorted(set([s.strip() for s in x if s]))))),
		Optional(r'external_includes', default=list) : And(ValueOrArray(str, name=r'external_includes'), Use(lambda x: remove_implicit_includes(sorted(set([s.strip() for s in x if s]))))),
		Optional(r'brief', default='')     : Stripped(str),
		Optional(r'clang_format', default=None)   : bool,
		Optional(r'doxygen', default=None)    : bool,
	})
	# yapf: enable

	def __init__(self, config, structs, vals, path=''):
		super().__init__(config)
		self.path = path
		if not self.path:
			self.path = self.config.path.with_suffix('.hpp')
		self.__dict__.update(HeaderFile.__schema.validate(vals))

		self.structs = structs if utils.is_collection(structs) else [structs]

		self.clang_format = self.clang_format and self.config.clang_format
		self.doxygen = self.doxygen and self.config.doxygen

		# add any includes requested by member structs
		self.internal_includes = set(self.internal_includes)
		self.external_includes = set(self.external_includes)
		for struct in self.structs:
			for h in struct.internal_includes:
				self.internal_includes.add(h)
			for h in struct.external_includes:
				self.external_includes.add(h)
		self.internal_includes = sorted(self.internal_includes)
		self.external_includes = sorted(self.external_includes)

		# includes we require for the library machinery to work
		self.library_includes = ['soagen.hpp']
		self.library_includes.sort()

		# documentation
		if not self.brief and self.structs:
			self.brief = ', '.join([n.qualified_type for n in self.structs])
			self.brief = rf'Contains the definition{"s" if len(self.structs) > 1 else ""} of {self.brief}.'

	def write(self, o: Writer):
		o(
			rf'''
		//{"-"*(120 - o.indent_width - 2)}
		// This file was generated by soagen - do not modify it directly
		// https://github.com/marzer/soagen
		//{"-"*(120 - o.indent_width - 2)}
		#pragma once
		'''
		)

		if o.doxygen:
			o(
				rf'''
			/// @file
			/// @brief {self.brief}
			///
			/// @note This file was generated by soagen - https://github.com/marzer/soagen
			'''
			)

		# internal includes (#include "blah.h")
		if self.internal_includes:
			o()
			for inc in self.internal_includes:
				o(rf'#include "{inc}"')

		# stick the prologue here so users can use it to override the various
		# SOAGEN_ macros etc before including soagen.hpp
		o(rf'''
		{self.prologue}
		''')

		# library includes
		if self.library_includes:
			o()
			for inc in self.library_includes:
				o(rf'#include <{inc}>')

		# external/system includes (#include <blah.h>)
		# (this deferred until later so we can take advante of detect_includes() for the whole file)
		o('\n\n// #### SOAGEN_EXTERNAL_HEADERS #### \n\n')

		# misc preprocessor boilerplate
		o(
			rf'''
		SOAGEN_PUSH_WARNINGS;
		SOAGEN_DISABLE_SPAM_WARNINGS;
		#if SOAGEN_MSVC
			#pragma inline_recursion(on)
		#endif
		#if SOAGEN_MSVC_LIKE
			#pragma push_macro("min")
			#pragma push_macro("max")
			#undef min
			#undef max
		#endif
		'''
		)

		# forward declarations
		o(
			rf'''
		//{"-"*(120 - o.indent_width - 2)}
		// forward declarations
		//{"-"*(120 - o.indent_width - 2)}
		'''
		)
		with HiddenFromDoxygen(o), Namespace(o, self.config.namespace):
			for struct in self.structs:
				with MetaScope(self.config.meta_stack, struct.meta):
					struct.write_class_forward_declaration(o)

		# header
		if self.header:
			o(
				rf'''
			//{"-"*(120 - o.indent_width - 2)}
			// header
			//{"-"*(120 - o.indent_width - 2)}

			{self.header}
			'''
			)

		# structs (class definitions, then outline member implementations)
		for struct in self.structs:
			with MetaScope(self.config.meta_stack, struct.meta):
				o(
					rf'''
				//{"-"*(120 - o.indent_width - 2)}
				// {struct.name}
				//{"-"*(120 - o.indent_width - 2)}
				'''
				)
				with Namespace(o, self.config.namespace), DoxygenGroup(o, r'soa', r'Struct-of-Arrays'):
					with DoxygenGroup(o, rf'soa_{struct.name}', struct.name):
						struct.write_class_definition(o)
						with HiddenFromDoxygen(o):
							struct.write_outline_member_implementations(o)

		# template specializations
		o(
			rf'''
			//{"-"*(120 - o.indent_width - 2)}
			// template specializations
			//{"-"*(120 - o.indent_width - 2)}
			'''
		)
		with HiddenFromDoxygen(o), Namespace(o, 'soagen'):
			for struct in self.structs:
				o()
				struct.write_soagen_specializations(o)

		# footer
		if self.footer:
			o(
				rf'''
			//{"-"*(120 - o.indent_width - 2)}
			// footer
			//{"-"*(120 - o.indent_width - 2)}

			{self.footer}
			'''
			)

		# clean up preprocessor boilerplate
		o(
			rf'''
		#if SOAGEN_MSVC_LIKE
			#pragma pop_macro("min")
			#pragma pop_macro("max")
		#endif
		#if SOAGEN_MSVC
			#pragma inline_recursion(off)
		#endif
		SOAGEN_POP_WARNINGS;'''
		)



__all__ = [r'HeaderFile']
