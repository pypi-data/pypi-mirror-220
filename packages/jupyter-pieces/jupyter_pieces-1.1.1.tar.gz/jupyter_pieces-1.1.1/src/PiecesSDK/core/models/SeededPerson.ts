//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    MechanismEnum,
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    PersonAccess,
    PersonAccessFromJSON,
    PersonAccessFromJSONTyped,
    PersonAccessToJSON,
    PersonType,
    PersonTypeFromJSON,
    PersonTypeFromJSONTyped,
    PersonTypeToJSON,
} from './';

/**
 * This is a per-cursor to a full person.
 * 
 * Will throw an error, if asset is passed in but acces.scope is undefined.
 * 
 * can optionally pass in our mechanism here, as the default will be manual unless specified.
 * 
 * TODO consider updating these asset,format to referenced Models
 * @export
 * @interface SeededPerson
 */
export interface SeededPerson {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof SeededPerson
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof SeededPerson
     */
    asset?: string;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof SeededPerson
     */
    mechanism?: MechanismEnum;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof SeededPerson
     */
    expiration?: GroupedTimestamp;
    /**
     * 
     * @type {PersonAccess}
     * @memberof SeededPerson
     */
    access: PersonAccess;
    /**
     * 
     * @type {PersonType}
     * @memberof SeededPerson
     */
    type: PersonType;
}

export function SeededPersonFromJSON(json: any): SeededPerson {
    return SeededPersonFromJSONTyped(json, false);
}

export function SeededPersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): SeededPerson {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'asset': !exists(json, 'asset') ? undefined : json['asset'],
        'mechanism': !exists(json, 'mechanism') ? undefined : MechanismEnumFromJSON(json['mechanism']),
        'expiration': !exists(json, 'expiration') ? undefined : GroupedTimestampFromJSON(json['expiration']),
        'access': PersonAccessFromJSON(json['access']),
        'type': PersonTypeFromJSON(json['type']),
    };
}

export function SeededPersonToJSON(value?: SeededPerson | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'asset': value.asset,
        'mechanism': MechanismEnumToJSON(value.mechanism),
        'expiration': GroupedTimestampToJSON(value.expiration),
        'access': PersonAccessToJSON(value.access),
        'type': PersonTypeToJSON(value.type),
    };
}


