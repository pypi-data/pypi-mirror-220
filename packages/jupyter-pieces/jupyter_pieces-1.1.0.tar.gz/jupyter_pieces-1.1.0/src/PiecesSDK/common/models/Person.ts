//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Runtime Common Library
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    FlattenedAsset,
    FlattenedAssetFromJSON,
    FlattenedAssetFromJSONTyped,
    FlattenedAssetToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    MechanismEnum,
    MechanismEnumFromJSON,
    MechanismEnumFromJSONTyped,
    MechanismEnumToJSON,
    PersonAccess,
    PersonAccessFromJSON,
    PersonAccessFromJSONTyped,
    PersonAccessToJSON,
    PersonType,
    PersonTypeFromJSON,
    PersonTypeFromJSONTyped,
    PersonTypeToJSON,
} from './';

/**
 * if expiration is add then, after the alloted expiration date the user will only have view && comment only permissions. Only present in the case there is a scope such as a defined collection/asset...
 * 
 * if asset is passed then that means this person belongs to a scoped asset.
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Person
     */
    schema?: EmbeddedModelSchema;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    id: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Person
     */
    created: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Person
     */
    updated: GroupedTimestamp;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Person
     */
    deleted?: GroupedTimestamp;
    /**
     * 
     * @type {PersonAccess}
     * @memberof Person
     */
    access: PersonAccess;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Person
     */
    expiration?: GroupedTimestamp;
    /**
     * 
     * @type {PersonType}
     * @memberof Person
     */
    type: PersonType;
    /**
     * 
     * @type {FlattenedAsset}
     * @memberof Person
     */
    asset?: FlattenedAsset;
    /**
     * 
     * @type {MechanismEnum}
     * @memberof Person
     */
    mechanism: MechanismEnum;
    /**
     * This is an optional value that will keep track of the number of times this has been interacted with.
     * @type {number}
     * @memberof Person
     */
    interactions?: number;
}

export function PersonFromJSON(json: any): Person {
    return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Person {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'created': GroupedTimestampFromJSON(json['created']),
        'updated': GroupedTimestampFromJSON(json['updated']),
        'deleted': !exists(json, 'deleted') ? undefined : GroupedTimestampFromJSON(json['deleted']),
        'access': PersonAccessFromJSON(json['access']),
        'expiration': !exists(json, 'expiration') ? undefined : GroupedTimestampFromJSON(json['expiration']),
        'type': PersonTypeFromJSON(json['type']),
        'asset': !exists(json, 'asset') ? undefined : FlattenedAssetFromJSON(json['asset']),
        'mechanism': MechanismEnumFromJSON(json['mechanism']),
        'interactions': !exists(json, 'interactions') ? undefined : json['interactions'],
    };
}

export function PersonToJSON(value?: Person | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'created': GroupedTimestampToJSON(value.created),
        'updated': GroupedTimestampToJSON(value.updated),
        'deleted': GroupedTimestampToJSON(value.deleted),
        'access': PersonAccessToJSON(value.access),
        'expiration': GroupedTimestampToJSON(value.expiration),
        'type': PersonTypeToJSON(value.type),
        'asset': FlattenedAssetToJSON(value.asset),
        'mechanism': MechanismEnumToJSON(value.mechanism),
        'interactions': value.interactions,
    };
}


