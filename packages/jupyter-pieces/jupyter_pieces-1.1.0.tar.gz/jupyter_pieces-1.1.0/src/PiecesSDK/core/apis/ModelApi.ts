//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Pieces Isomorphic OpenAPI
 * Endpoints for Assets, Formats, Users, Asset, Format, User.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Model,
    ModelFromJSON,
    ModelToJSON,
} from '../models';

export interface ModelUpdateRequest {
    model?: Model;
}

export interface ModelsSpecificModelSnapshotRequest {
    model: string;
}

/**
 * 
 */
export class ModelApi extends runtime.BaseAPI {

    /**
     * /model/update [POST]
     */
    async modelUpdateRaw(requestParameters: ModelUpdateRequest): Promise<runtime.ApiResponse<Model>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/model/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelToJSON(requestParameters.model),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * /model/update [POST]
     */
    async modelUpdate(requestParameters: ModelUpdateRequest): Promise<Model> {
        const response = await this.modelUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * /model/{model} [GET]
     */
    async modelsSpecificModelSnapshotRaw(requestParameters: ModelsSpecificModelSnapshotRequest): Promise<runtime.ApiResponse<Model>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling modelsSpecificModelSnapshot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/model/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(requestParameters.model))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelFromJSON(jsonValue));
    }

    /**
     * /model/{model} [GET]
     */
    async modelsSpecificModelSnapshot(requestParameters: ModelsSpecificModelSnapshotRequest): Promise<Model> {
        const response = await this.modelsSpecificModelSnapshotRaw(requestParameters);
        return await response.value();
    }

}
