//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * This is an open API that holds specific endpoints as a base for Pieces Context Systems
 * The point of this API is to allow us to organize and Auto Generate Code Specific for Connected Applications - this will allow for stateful context abstraction & less code within the Core Connector
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tsavo@pieces.app
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmbeddedModelSchema,
    EmbeddedModelSchemaFromJSON,
    EmbeddedModelSchemaFromJSONTyped,
    EmbeddedModelSchemaToJSON,
    GroupedTimestamp,
    GroupedTimestampFromJSON,
    GroupedTimestampFromJSONTyped,
    GroupedTimestampToJSON,
    ModelTypeEnum,
    ModelTypeEnumFromJSON,
    ModelTypeEnumFromJSONTyped,
    ModelTypeEnumToJSON,
    ModelUsageEnum,
    ModelUsageEnumFromJSON,
    ModelUsageEnumFromJSONTyped,
    ModelUsageEnumToJSON,
} from './';

/**
 * This is a Machine Learning Model, that will give readable information about the Machine Learning Model Used.
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {EmbeddedModelSchema}
     * @memberof Model
     */
    schema?: EmbeddedModelSchema;
    /**
     * uuid
     * @type {string}
     * @memberof Model
     */
    id: string;
    /**
     * this is a version of the model.
     * @type {string}
     * @memberof Model
     */
    version: string;
    /**
     * 
     * @type {GroupedTimestamp}
     * @memberof Model
     */
    created: GroupedTimestamp;
    /**
     * This is an Optional Name of the Model.
     * @type {string}
     * @memberof Model
     */
    name: string;
    /**
     * An Optional Description of the model itself.
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * This will inform the user if this was a model that is hosted in the cloud
     * @type {boolean}
     * @memberof Model
     */
    cloud: boolean;
    /**
     * 
     * @type {ModelTypeEnum}
     * @memberof Model
     */
    type: ModelTypeEnum;
    /**
     * 
     * @type {ModelUsageEnum}
     * @memberof Model
     */
    usage: ModelUsageEnum;
}

export function ModelFromJSON(json: any): Model {
    return ModelFromJSONTyped(json, false);
}

export function ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'schema': !exists(json, 'schema') ? undefined : EmbeddedModelSchemaFromJSON(json['schema']),
        'id': json['id'],
        'version': json['version'],
        'created': GroupedTimestampFromJSON(json['created']),
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'cloud': json['cloud'],
        'type': ModelTypeEnumFromJSON(json['type']),
        'usage': ModelUsageEnumFromJSON(json['usage']),
    };
}

export function ModelToJSON(value?: Model | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'schema': EmbeddedModelSchemaToJSON(value.schema),
        'id': value.id,
        'version': value.version,
        'created': GroupedTimestampToJSON(value.created),
        'name': value.name,
        'description': value.description,
        'cloud': value.cloud,
        'type': ModelTypeEnumToJSON(value.type),
        'usage': ModelUsageEnumToJSON(value.usage),
    };
}


