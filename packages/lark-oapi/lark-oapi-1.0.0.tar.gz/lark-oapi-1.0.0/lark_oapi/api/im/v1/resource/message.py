# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.im.v1.model.create_message_request import CreateMessageRequest
from lark_oapi.api.im.v1.model.create_message_response import CreateMessageResponse
from lark_oapi.api.im.v1.model.delete_message_request import DeleteMessageRequest
from lark_oapi.api.im.v1.model.delete_message_response import DeleteMessageResponse
from lark_oapi.api.im.v1.model.forward_message_request import ForwardMessageRequest
from lark_oapi.api.im.v1.model.forward_message_response import ForwardMessageResponse
from lark_oapi.api.im.v1.model.get_message_request import GetMessageRequest
from lark_oapi.api.im.v1.model.get_message_response import GetMessageResponse
from lark_oapi.api.im.v1.model.list_message_request import ListMessageRequest
from lark_oapi.api.im.v1.model.list_message_response import ListMessageResponse
from lark_oapi.api.im.v1.model.merge_forward_message_request import MergeForwardMessageRequest
from lark_oapi.api.im.v1.model.merge_forward_message_response import MergeForwardMessageResponse
from lark_oapi.api.im.v1.model.patch_message_request import PatchMessageRequest
from lark_oapi.api.im.v1.model.patch_message_response import PatchMessageResponse
from lark_oapi.api.im.v1.model.read_users_message_request import ReadUsersMessageRequest
from lark_oapi.api.im.v1.model.read_users_message_response import ReadUsersMessageResponse
from lark_oapi.api.im.v1.model.reply_message_request import ReplyMessageRequest
from lark_oapi.api.im.v1.model.reply_message_response import ReplyMessageResponse
from lark_oapi.api.im.v1.model.update_message_request import UpdateMessageRequest
from lark_oapi.api.im.v1.model.update_message_response import UpdateMessageResponse
from lark_oapi.api.im.v1.model.urgent_app_message_request import UrgentAppMessageRequest
from lark_oapi.api.im.v1.model.urgent_app_message_response import UrgentAppMessageResponse
from lark_oapi.api.im.v1.model.urgent_phone_message_request import UrgentPhoneMessageRequest
from lark_oapi.api.im.v1.model.urgent_phone_message_response import UrgentPhoneMessageResponse
from lark_oapi.api.im.v1.model.urgent_sms_message_request import UrgentSmsMessageRequest
from lark_oapi.api.im.v1.model.urgent_sms_message_response import UrgentSmsMessageResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Message(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateMessageRequest, option: RequestOption = RequestOption()) -> CreateMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateMessageResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteMessageRequest, option: RequestOption = RequestOption()) -> DeleteMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteMessageResponse)
        response.raw = resp

        return response

    def forward(self, request: ForwardMessageRequest,
                option: RequestOption = RequestOption()) -> ForwardMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ForwardMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), ForwardMessageResponse)
        response.raw = resp

        return response

    def get(self, request: GetMessageRequest, option: RequestOption = RequestOption()) -> GetMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), GetMessageResponse)
        response.raw = resp

        return response

    def list(self, request: ListMessageRequest, option: RequestOption = RequestOption()) -> ListMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), ListMessageResponse)
        response.raw = resp

        return response

    def merge_forward(self, request: MergeForwardMessageRequest,
                      option: RequestOption = RequestOption()) -> MergeForwardMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: MergeForwardMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), MergeForwardMessageResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchMessageRequest, option: RequestOption = RequestOption()) -> PatchMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchMessageResponse)
        response.raw = resp

        return response

    def read_users(self, request: ReadUsersMessageRequest,
                   option: RequestOption = RequestOption()) -> ReadUsersMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ReadUsersMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), ReadUsersMessageResponse)
        response.raw = resp

        return response

    def reply(self, request: ReplyMessageRequest, option: RequestOption = RequestOption()) -> ReplyMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ReplyMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), ReplyMessageResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateMessageRequest, option: RequestOption = RequestOption()) -> UpdateMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateMessageResponse)
        response.raw = resp

        return response

    def urgent_app(self, request: UrgentAppMessageRequest,
                   option: RequestOption = RequestOption()) -> UrgentAppMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UrgentAppMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), UrgentAppMessageResponse)
        response.raw = resp

        return response

    def urgent_phone(self, request: UrgentPhoneMessageRequest,
                     option: RequestOption = RequestOption()) -> UrgentPhoneMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UrgentPhoneMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), UrgentPhoneMessageResponse)
        response.raw = resp

        return response

    def urgent_sms(self, request: UrgentSmsMessageRequest,
                   option: RequestOption = RequestOption()) -> UrgentSmsMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UrgentSmsMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), UrgentSmsMessageResponse)
        response.raw = resp

        return response
