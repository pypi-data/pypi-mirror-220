# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.task.v1.model.create_task_collaborator_request import CreateTaskCollaboratorRequest
from lark_oapi.api.task.v1.model.create_task_collaborator_response import CreateTaskCollaboratorResponse
from lark_oapi.api.task.v1.model.delete_task_collaborator_request import DeleteTaskCollaboratorRequest
from lark_oapi.api.task.v1.model.delete_task_collaborator_response import DeleteTaskCollaboratorResponse
from lark_oapi.api.task.v1.model.list_task_collaborator_request import ListTaskCollaboratorRequest
from lark_oapi.api.task.v1.model.list_task_collaborator_response import ListTaskCollaboratorResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class TaskCollaborator(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateTaskCollaboratorRequest,
               option: RequestOption = RequestOption()) -> CreateTaskCollaboratorResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateTaskCollaboratorResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  CreateTaskCollaboratorResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteTaskCollaboratorRequest,
               option: RequestOption = RequestOption()) -> DeleteTaskCollaboratorResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteTaskCollaboratorResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  DeleteTaskCollaboratorResponse)
        response.raw = resp

        return response

    def list(self, request: ListTaskCollaboratorRequest,
             option: RequestOption = RequestOption()) -> ListTaskCollaboratorResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListTaskCollaboratorResponse = JSON.unmarshal(str(resp.content, UTF_8), ListTaskCollaboratorResponse)
        response.raw = resp

        return response
