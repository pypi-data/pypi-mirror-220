# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.task.v1.model.create_task_comment_request import CreateTaskCommentRequest
from lark_oapi.api.task.v1.model.create_task_comment_response import CreateTaskCommentResponse
from lark_oapi.api.task.v1.model.delete_task_comment_request import DeleteTaskCommentRequest
from lark_oapi.api.task.v1.model.delete_task_comment_response import DeleteTaskCommentResponse
from lark_oapi.api.task.v1.model.get_task_comment_request import GetTaskCommentRequest
from lark_oapi.api.task.v1.model.get_task_comment_response import GetTaskCommentResponse
from lark_oapi.api.task.v1.model.list_task_comment_request import ListTaskCommentRequest
from lark_oapi.api.task.v1.model.list_task_comment_response import ListTaskCommentResponse
from lark_oapi.api.task.v1.model.update_task_comment_request import UpdateTaskCommentRequest
from lark_oapi.api.task.v1.model.update_task_comment_response import UpdateTaskCommentResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class TaskComment(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateTaskCommentRequest,
               option: RequestOption = RequestOption()) -> CreateTaskCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateTaskCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateTaskCommentResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteTaskCommentRequest,
               option: RequestOption = RequestOption()) -> DeleteTaskCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteTaskCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteTaskCommentResponse)
        response.raw = resp

        return response

    def get(self, request: GetTaskCommentRequest, option: RequestOption = RequestOption()) -> GetTaskCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetTaskCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), GetTaskCommentResponse)
        response.raw = resp

        return response

    def list(self, request: ListTaskCommentRequest, option: RequestOption = RequestOption()) -> ListTaskCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListTaskCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), ListTaskCommentResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateTaskCommentRequest,
               option: RequestOption = RequestOption()) -> UpdateTaskCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateTaskCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateTaskCommentResponse)
        response.raw = resp

        return response
