# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.speech_to_text.v1.model.file_recognize_speech_request import FileRecognizeSpeechRequest
from lark_oapi.api.speech_to_text.v1.model.file_recognize_speech_response import FileRecognizeSpeechResponse
from lark_oapi.api.speech_to_text.v1.model.stream_recognize_speech_request import StreamRecognizeSpeechRequest
from lark_oapi.api.speech_to_text.v1.model.stream_recognize_speech_response import StreamRecognizeSpeechResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Speech(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def file_recognize(self, request: FileRecognizeSpeechRequest,
                       option: RequestOption = RequestOption()) -> FileRecognizeSpeechResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: FileRecognizeSpeechResponse = JSON.unmarshal(str(resp.content, UTF_8), FileRecognizeSpeechResponse)
        response.raw = resp

        return response

    def stream_recognize(self, request: StreamRecognizeSpeechRequest,
                         option: RequestOption = RequestOption()) -> StreamRecognizeSpeechResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: StreamRecognizeSpeechResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 StreamRecognizeSpeechResponse)
        response.raw = resp

        return response
