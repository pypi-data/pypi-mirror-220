# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.helpdesk.v1.model.cancel_approve_notification_request import CancelApproveNotificationRequest
from lark_oapi.api.helpdesk.v1.model.cancel_approve_notification_response import CancelApproveNotificationResponse
from lark_oapi.api.helpdesk.v1.model.cancel_send_notification_request import CancelSendNotificationRequest
from lark_oapi.api.helpdesk.v1.model.cancel_send_notification_response import CancelSendNotificationResponse
from lark_oapi.api.helpdesk.v1.model.create_notification_request import CreateNotificationRequest
from lark_oapi.api.helpdesk.v1.model.create_notification_response import CreateNotificationResponse
from lark_oapi.api.helpdesk.v1.model.execute_send_notification_request import ExecuteSendNotificationRequest
from lark_oapi.api.helpdesk.v1.model.execute_send_notification_response import ExecuteSendNotificationResponse
from lark_oapi.api.helpdesk.v1.model.get_notification_request import GetNotificationRequest
from lark_oapi.api.helpdesk.v1.model.get_notification_response import GetNotificationResponse
from lark_oapi.api.helpdesk.v1.model.patch_notification_request import PatchNotificationRequest
from lark_oapi.api.helpdesk.v1.model.patch_notification_response import PatchNotificationResponse
from lark_oapi.api.helpdesk.v1.model.preview_notification_request import PreviewNotificationRequest
from lark_oapi.api.helpdesk.v1.model.preview_notification_response import PreviewNotificationResponse
from lark_oapi.api.helpdesk.v1.model.submit_approve_notification_request import SubmitApproveNotificationRequest
from lark_oapi.api.helpdesk.v1.model.submit_approve_notification_response import SubmitApproveNotificationResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Notification(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def cancel_approve(self, request: CancelApproveNotificationRequest,
                       option: RequestOption = RequestOption()) -> CancelApproveNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CancelApproveNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     CancelApproveNotificationResponse)
        response.raw = resp

        return response

    def cancel_send(self, request: CancelSendNotificationRequest,
                    option: RequestOption = RequestOption()) -> CancelSendNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CancelSendNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  CancelSendNotificationResponse)
        response.raw = resp

        return response

    def create(self, request: CreateNotificationRequest,
               option: RequestOption = RequestOption()) -> CreateNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateNotificationResponse)
        response.raw = resp

        return response

    def execute_send(self, request: ExecuteSendNotificationRequest,
                     option: RequestOption = RequestOption()) -> ExecuteSendNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ExecuteSendNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   ExecuteSendNotificationResponse)
        response.raw = resp

        return response

    def get(self, request: GetNotificationRequest, option: RequestOption = RequestOption()) -> GetNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8), GetNotificationResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchNotificationRequest,
              option: RequestOption = RequestOption()) -> PatchNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchNotificationResponse)
        response.raw = resp

        return response

    def preview(self, request: PreviewNotificationRequest,
                option: RequestOption = RequestOption()) -> PreviewNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PreviewNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8), PreviewNotificationResponse)
        response.raw = resp

        return response

    def submit_approve(self, request: SubmitApproveNotificationRequest,
                       option: RequestOption = RequestOption()) -> SubmitApproveNotificationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SubmitApproveNotificationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     SubmitApproveNotificationResponse)
        response.raw = resp

        return response
