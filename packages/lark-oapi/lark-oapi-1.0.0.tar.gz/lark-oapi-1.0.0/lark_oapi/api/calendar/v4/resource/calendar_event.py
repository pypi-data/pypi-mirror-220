# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.calendar.v4.model.create_calendar_event_request import CreateCalendarEventRequest
from lark_oapi.api.calendar.v4.model.create_calendar_event_response import CreateCalendarEventResponse
from lark_oapi.api.calendar.v4.model.delete_calendar_event_request import DeleteCalendarEventRequest
from lark_oapi.api.calendar.v4.model.delete_calendar_event_response import DeleteCalendarEventResponse
from lark_oapi.api.calendar.v4.model.get_calendar_event_request import GetCalendarEventRequest
from lark_oapi.api.calendar.v4.model.get_calendar_event_response import GetCalendarEventResponse
from lark_oapi.api.calendar.v4.model.list_calendar_event_request import ListCalendarEventRequest
from lark_oapi.api.calendar.v4.model.list_calendar_event_response import ListCalendarEventResponse
from lark_oapi.api.calendar.v4.model.patch_calendar_event_request import PatchCalendarEventRequest
from lark_oapi.api.calendar.v4.model.patch_calendar_event_response import PatchCalendarEventResponse
from lark_oapi.api.calendar.v4.model.search_calendar_event_request import SearchCalendarEventRequest
from lark_oapi.api.calendar.v4.model.search_calendar_event_response import SearchCalendarEventResponse
from lark_oapi.api.calendar.v4.model.subscription_calendar_event_request import SubscriptionCalendarEventRequest
from lark_oapi.api.calendar.v4.model.subscription_calendar_event_response import SubscriptionCalendarEventResponse
from lark_oapi.api.calendar.v4.model.unsubscription_calendar_event_request import UnsubscriptionCalendarEventRequest
from lark_oapi.api.calendar.v4.model.unsubscription_calendar_event_response import UnsubscriptionCalendarEventResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class CalendarEvent(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateCalendarEventRequest,
               option: RequestOption = RequestOption()) -> CreateCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateCalendarEventResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteCalendarEventRequest,
               option: RequestOption = RequestOption()) -> DeleteCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteCalendarEventResponse)
        response.raw = resp

        return response

    def get(self, request: GetCalendarEventRequest,
            option: RequestOption = RequestOption()) -> GetCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8), GetCalendarEventResponse)
        response.raw = resp

        return response

    def list(self, request: ListCalendarEventRequest,
             option: RequestOption = RequestOption()) -> ListCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8), ListCalendarEventResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchCalendarEventRequest,
              option: RequestOption = RequestOption()) -> PatchCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchCalendarEventResponse)
        response.raw = resp

        return response

    def search(self, request: SearchCalendarEventRequest,
               option: RequestOption = RequestOption()) -> SearchCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchCalendarEventResponse)
        response.raw = resp

        return response

    def subscription(self, request: SubscriptionCalendarEventRequest,
                     option: RequestOption = RequestOption()) -> SubscriptionCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SubscriptionCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     SubscriptionCalendarEventResponse)
        response.raw = resp

        return response

    def unsubscription(self, request: UnsubscriptionCalendarEventRequest,
                       option: RequestOption = RequestOption()) -> UnsubscriptionCalendarEventResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UnsubscriptionCalendarEventResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       UnsubscriptionCalendarEventResponse)
        response.raw = resp

        return response
