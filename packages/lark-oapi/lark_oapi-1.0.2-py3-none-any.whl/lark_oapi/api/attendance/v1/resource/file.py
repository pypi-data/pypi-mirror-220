# Code generated by Lark OpenAPI.

import io
from typing import *

from requests_toolbelt import MultipartEncoder

from lark_oapi.api.attendance.v1.model.download_file_request import DownloadFileRequest
from lark_oapi.api.attendance.v1.model.download_file_response import DownloadFileResponse
from lark_oapi.api.attendance.v1.model.upload_file_request import UploadFileRequest
from lark_oapi.api.attendance.v1.model.upload_file_response import UploadFileResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8, CONTENT_TYPE
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify
from lark_oapi.core.utils import Files


class File(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def download(self, request: DownloadFileRequest, option: RequestOption = RequestOption()) -> DownloadFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 处理二进制流
        if resp.status_code == 200:
            response: DownloadFileResponse = DownloadFileResponse({})
            response.code = 0
            response.raw = resp
            response.file = io.BytesIO(resp.content)
            response.file_name = Files.parse_file_name(response.raw.header)
            return response

        # 反序列化
        response: DownloadFileResponse = JSON.unmarshal(str(resp.content, UTF_8), DownloadFileResponse)
        response.raw = resp

        return response

    def upload(self, request: UploadFileRequest, option: RequestOption = RequestOption()) -> UploadFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 处理 form-data
        if request.body is not None:
            form_data = MultipartEncoder(Files.parse_form_data(request.body))
            option.headers[CONTENT_TYPE] = form_data.content_type
            request.body = form_data

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UploadFileResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadFileResponse)
        response.raw = resp

        return response
