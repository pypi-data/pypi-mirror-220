# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.bitable.v1.model.batch_create_app_table_record_request import BatchCreateAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.batch_create_app_table_record_response import BatchCreateAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.batch_delete_app_table_record_request import BatchDeleteAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.batch_delete_app_table_record_response import BatchDeleteAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.batch_update_app_table_record_request import BatchUpdateAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.batch_update_app_table_record_response import BatchUpdateAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.create_app_table_record_request import CreateAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.create_app_table_record_response import CreateAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.delete_app_table_record_request import DeleteAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.delete_app_table_record_response import DeleteAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.get_app_table_record_request import GetAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.get_app_table_record_response import GetAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.list_app_table_record_request import ListAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.list_app_table_record_response import ListAppTableRecordResponse
from lark_oapi.api.bitable.v1.model.update_app_table_record_request import UpdateAppTableRecordRequest
from lark_oapi.api.bitable.v1.model.update_app_table_record_response import UpdateAppTableRecordResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class AppTableRecord(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_create(self, request: BatchCreateAppTableRecordRequest,
                     option: RequestOption = RequestOption()) -> BatchCreateAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchCreateAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchCreateAppTableRecordResponse)
        response.raw = resp

        return response

    def batch_delete(self, request: BatchDeleteAppTableRecordRequest,
                     option: RequestOption = RequestOption()) -> BatchDeleteAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchDeleteAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchDeleteAppTableRecordResponse)
        response.raw = resp

        return response

    def batch_update(self, request: BatchUpdateAppTableRecordRequest,
                     option: RequestOption = RequestOption()) -> BatchUpdateAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUpdateAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchUpdateAppTableRecordResponse)
        response.raw = resp

        return response

    def create(self, request: CreateAppTableRecordRequest,
               option: RequestOption = RequestOption()) -> CreateAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateAppTableRecordResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteAppTableRecordRequest,
               option: RequestOption = RequestOption()) -> DeleteAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteAppTableRecordResponse)
        response.raw = resp

        return response

    def get(self, request: GetAppTableRecordRequest,
            option: RequestOption = RequestOption()) -> GetAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8), GetAppTableRecordResponse)
        response.raw = resp

        return response

    def list(self, request: ListAppTableRecordRequest,
             option: RequestOption = RequestOption()) -> ListAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8), ListAppTableRecordResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateAppTableRecordRequest,
               option: RequestOption = RequestOption()) -> UpdateAppTableRecordResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateAppTableRecordResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateAppTableRecordResponse)
        response.raw = resp

        return response
