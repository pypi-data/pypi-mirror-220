# Code generated by Lark OpenAPI.

import io
from typing import *

from lark_oapi.api.helpdesk.v1.model.create_faq_request import CreateFaqRequest
from lark_oapi.api.helpdesk.v1.model.create_faq_response import CreateFaqResponse
from lark_oapi.api.helpdesk.v1.model.delete_faq_request import DeleteFaqRequest
from lark_oapi.api.helpdesk.v1.model.delete_faq_response import DeleteFaqResponse
from lark_oapi.api.helpdesk.v1.model.faq_image_faq_request import FaqImageFaqRequest
from lark_oapi.api.helpdesk.v1.model.faq_image_faq_response import FaqImageFaqResponse
from lark_oapi.api.helpdesk.v1.model.get_faq_request import GetFaqRequest
from lark_oapi.api.helpdesk.v1.model.get_faq_response import GetFaqResponse
from lark_oapi.api.helpdesk.v1.model.list_faq_request import ListFaqRequest
from lark_oapi.api.helpdesk.v1.model.list_faq_response import ListFaqResponse
from lark_oapi.api.helpdesk.v1.model.patch_faq_request import PatchFaqRequest
from lark_oapi.api.helpdesk.v1.model.patch_faq_response import PatchFaqResponse
from lark_oapi.api.helpdesk.v1.model.search_faq_request import SearchFaqRequest
from lark_oapi.api.helpdesk.v1.model.search_faq_response import SearchFaqResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify
from lark_oapi.core.utils import Files


class Faq(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateFaqRequest, option: RequestOption = RequestOption()) -> CreateFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateFaqResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteFaqRequest, option: RequestOption = RequestOption()) -> DeleteFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteFaqResponse)
        response.raw = resp

        return response

    def faq_image(self, request: FaqImageFaqRequest, option: RequestOption = RequestOption()) -> FaqImageFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 处理二进制流
        if resp.status_code == 200:
            response: FaqImageFaqResponse = FaqImageFaqResponse({})
            response.code = 0
            response.raw = resp
            response.file = io.BytesIO(resp.content)
            response.file_name = Files.parse_file_name(response.raw.header)
            return response

        # 反序列化
        response: FaqImageFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), FaqImageFaqResponse)
        response.raw = resp

        return response

    def get(self, request: GetFaqRequest, option: RequestOption = RequestOption()) -> GetFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), GetFaqResponse)
        response.raw = resp

        return response

    def list(self, request: ListFaqRequest, option: RequestOption = RequestOption()) -> ListFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), ListFaqResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchFaqRequest, option: RequestOption = RequestOption()) -> PatchFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchFaqResponse)
        response.raw = resp

        return response

    def search(self, request: SearchFaqRequest, option: RequestOption = RequestOption()) -> SearchFaqResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchFaqResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchFaqResponse)
        response.raw = resp

        return response
