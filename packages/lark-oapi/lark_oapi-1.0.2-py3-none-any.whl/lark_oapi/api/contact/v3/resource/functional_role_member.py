# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.contact.v3.model.batch_create_functional_role_member_request import \
    BatchCreateFunctionalRoleMemberRequest
from lark_oapi.api.contact.v3.model.batch_create_functional_role_member_response import \
    BatchCreateFunctionalRoleMemberResponse
from lark_oapi.api.contact.v3.model.batch_delete_functional_role_member_request import \
    BatchDeleteFunctionalRoleMemberRequest
from lark_oapi.api.contact.v3.model.batch_delete_functional_role_member_response import \
    BatchDeleteFunctionalRoleMemberResponse
from lark_oapi.api.contact.v3.model.get_functional_role_member_request import GetFunctionalRoleMemberRequest
from lark_oapi.api.contact.v3.model.get_functional_role_member_response import GetFunctionalRoleMemberResponse
from lark_oapi.api.contact.v3.model.list_functional_role_member_request import ListFunctionalRoleMemberRequest
from lark_oapi.api.contact.v3.model.list_functional_role_member_response import ListFunctionalRoleMemberResponse
from lark_oapi.api.contact.v3.model.scopes_functional_role_member_request import ScopesFunctionalRoleMemberRequest
from lark_oapi.api.contact.v3.model.scopes_functional_role_member_response import ScopesFunctionalRoleMemberResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class FunctionalRoleMember(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_create(self, request: BatchCreateFunctionalRoleMemberRequest,
                     option: RequestOption = RequestOption()) -> BatchCreateFunctionalRoleMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchCreateFunctionalRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           BatchCreateFunctionalRoleMemberResponse)
        response.raw = resp

        return response

    def batch_delete(self, request: BatchDeleteFunctionalRoleMemberRequest,
                     option: RequestOption = RequestOption()) -> BatchDeleteFunctionalRoleMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchDeleteFunctionalRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           BatchDeleteFunctionalRoleMemberResponse)
        response.raw = resp

        return response

    def get(self, request: GetFunctionalRoleMemberRequest,
            option: RequestOption = RequestOption()) -> GetFunctionalRoleMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetFunctionalRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   GetFunctionalRoleMemberResponse)
        response.raw = resp

        return response

    def list(self, request: ListFunctionalRoleMemberRequest,
             option: RequestOption = RequestOption()) -> ListFunctionalRoleMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListFunctionalRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    ListFunctionalRoleMemberResponse)
        response.raw = resp

        return response

    def scopes(self, request: ScopesFunctionalRoleMemberRequest,
               option: RequestOption = RequestOption()) -> ScopesFunctionalRoleMemberResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ScopesFunctionalRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                      ScopesFunctionalRoleMemberResponse)
        response.raw = resp

        return response
