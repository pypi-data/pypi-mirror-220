# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.admin.v1.model.create_badge_grant_request import CreateBadgeGrantRequest
from lark_oapi.api.admin.v1.model.create_badge_grant_response import CreateBadgeGrantResponse
from lark_oapi.api.admin.v1.model.delete_badge_grant_request import DeleteBadgeGrantRequest
from lark_oapi.api.admin.v1.model.delete_badge_grant_response import DeleteBadgeGrantResponse
from lark_oapi.api.admin.v1.model.get_badge_grant_request import GetBadgeGrantRequest
from lark_oapi.api.admin.v1.model.get_badge_grant_response import GetBadgeGrantResponse
from lark_oapi.api.admin.v1.model.list_badge_grant_request import ListBadgeGrantRequest
from lark_oapi.api.admin.v1.model.list_badge_grant_response import ListBadgeGrantResponse
from lark_oapi.api.admin.v1.model.update_badge_grant_request import UpdateBadgeGrantRequest
from lark_oapi.api.admin.v1.model.update_badge_grant_response import UpdateBadgeGrantResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class BadgeGrant(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateBadgeGrantRequest,
               option: RequestOption = RequestOption()) -> CreateBadgeGrantResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateBadgeGrantResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateBadgeGrantResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteBadgeGrantRequest,
               option: RequestOption = RequestOption()) -> DeleteBadgeGrantResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteBadgeGrantResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteBadgeGrantResponse)
        response.raw = resp

        return response

    def get(self, request: GetBadgeGrantRequest, option: RequestOption = RequestOption()) -> GetBadgeGrantResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetBadgeGrantResponse = JSON.unmarshal(str(resp.content, UTF_8), GetBadgeGrantResponse)
        response.raw = resp

        return response

    def list(self, request: ListBadgeGrantRequest, option: RequestOption = RequestOption()) -> ListBadgeGrantResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListBadgeGrantResponse = JSON.unmarshal(str(resp.content, UTF_8), ListBadgeGrantResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateBadgeGrantRequest,
               option: RequestOption = RequestOption()) -> UpdateBadgeGrantResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateBadgeGrantResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateBadgeGrantResponse)
        response.raw = resp

        return response
