# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.search.v2.model.create_schema_request import CreateSchemaRequest
from lark_oapi.api.search.v2.model.create_schema_response import CreateSchemaResponse
from lark_oapi.api.search.v2.model.delete_schema_request import DeleteSchemaRequest
from lark_oapi.api.search.v2.model.delete_schema_response import DeleteSchemaResponse
from lark_oapi.api.search.v2.model.get_schema_request import GetSchemaRequest
from lark_oapi.api.search.v2.model.get_schema_response import GetSchemaResponse
from lark_oapi.api.search.v2.model.patch_schema_request import PatchSchemaRequest
from lark_oapi.api.search.v2.model.patch_schema_response import PatchSchemaResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Schema(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateSchemaRequest, option: RequestOption = RequestOption()) -> CreateSchemaResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateSchemaResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateSchemaResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteSchemaRequest, option: RequestOption = RequestOption()) -> DeleteSchemaResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteSchemaResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteSchemaResponse)
        response.raw = resp

        return response

    def get(self, request: GetSchemaRequest, option: RequestOption = RequestOption()) -> GetSchemaResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetSchemaResponse = JSON.unmarshal(str(resp.content, UTF_8), GetSchemaResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchSchemaRequest, option: RequestOption = RequestOption()) -> PatchSchemaResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchSchemaResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchSchemaResponse)
        response.raw = resp

        return response
