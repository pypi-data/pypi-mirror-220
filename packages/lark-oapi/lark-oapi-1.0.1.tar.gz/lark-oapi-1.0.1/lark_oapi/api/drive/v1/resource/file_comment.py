# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.drive.v1.model.batch_query_file_comment_request import BatchQueryFileCommentRequest
from lark_oapi.api.drive.v1.model.batch_query_file_comment_response import BatchQueryFileCommentResponse
from lark_oapi.api.drive.v1.model.create_file_comment_request import CreateFileCommentRequest
from lark_oapi.api.drive.v1.model.create_file_comment_response import CreateFileCommentResponse
from lark_oapi.api.drive.v1.model.get_file_comment_request import GetFileCommentRequest
from lark_oapi.api.drive.v1.model.get_file_comment_response import GetFileCommentResponse
from lark_oapi.api.drive.v1.model.list_file_comment_request import ListFileCommentRequest
from lark_oapi.api.drive.v1.model.list_file_comment_response import ListFileCommentResponse
from lark_oapi.api.drive.v1.model.patch_file_comment_request import PatchFileCommentRequest
from lark_oapi.api.drive.v1.model.patch_file_comment_response import PatchFileCommentResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class FileComment(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_query(self, request: BatchQueryFileCommentRequest,
                    option: RequestOption = RequestOption()) -> BatchQueryFileCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchQueryFileCommentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 BatchQueryFileCommentResponse)
        response.raw = resp

        return response

    def create(self, request: CreateFileCommentRequest,
               option: RequestOption = RequestOption()) -> CreateFileCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateFileCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateFileCommentResponse)
        response.raw = resp

        return response

    def get(self, request: GetFileCommentRequest, option: RequestOption = RequestOption()) -> GetFileCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetFileCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), GetFileCommentResponse)
        response.raw = resp

        return response

    def list(self, request: ListFileCommentRequest, option: RequestOption = RequestOption()) -> ListFileCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListFileCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), ListFileCommentResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchFileCommentRequest,
              option: RequestOption = RequestOption()) -> PatchFileCommentResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchFileCommentResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchFileCommentResponse)
        response.raw = resp

        return response
