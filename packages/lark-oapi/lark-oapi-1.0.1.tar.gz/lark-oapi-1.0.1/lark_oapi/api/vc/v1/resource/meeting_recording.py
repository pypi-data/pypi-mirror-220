# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.vc.v1.model.get_meeting_recording_request import GetMeetingRecordingRequest
from lark_oapi.api.vc.v1.model.get_meeting_recording_response import GetMeetingRecordingResponse
from lark_oapi.api.vc.v1.model.set_permission_meeting_recording_request import SetPermissionMeetingRecordingRequest
from lark_oapi.api.vc.v1.model.set_permission_meeting_recording_response import SetPermissionMeetingRecordingResponse
from lark_oapi.api.vc.v1.model.start_meeting_recording_request import StartMeetingRecordingRequest
from lark_oapi.api.vc.v1.model.start_meeting_recording_response import StartMeetingRecordingResponse
from lark_oapi.api.vc.v1.model.stop_meeting_recording_request import StopMeetingRecordingRequest
from lark_oapi.api.vc.v1.model.stop_meeting_recording_response import StopMeetingRecordingResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class MeetingRecording(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def get(self, request: GetMeetingRecordingRequest,
            option: RequestOption = RequestOption()) -> GetMeetingRecordingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetMeetingRecordingResponse = JSON.unmarshal(str(resp.content, UTF_8), GetMeetingRecordingResponse)
        response.raw = resp

        return response

    def set_permission(self, request: SetPermissionMeetingRecordingRequest,
                       option: RequestOption = RequestOption()) -> SetPermissionMeetingRecordingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SetPermissionMeetingRecordingResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         SetPermissionMeetingRecordingResponse)
        response.raw = resp

        return response

    def start(self, request: StartMeetingRecordingRequest,
              option: RequestOption = RequestOption()) -> StartMeetingRecordingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: StartMeetingRecordingResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 StartMeetingRecordingResponse)
        response.raw = resp

        return response

    def stop(self, request: StopMeetingRecordingRequest,
             option: RequestOption = RequestOption()) -> StopMeetingRecordingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: StopMeetingRecordingResponse = JSON.unmarshal(str(resp.content, UTF_8), StopMeetingRecordingResponse)
        response.raw = resp

        return response
