# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.sheets.v3.model.create_spreadsheet_sheet_filter_view_condition_request import \
    CreateSpreadsheetSheetFilterViewConditionRequest
from lark_oapi.api.sheets.v3.model.create_spreadsheet_sheet_filter_view_condition_response import \
    CreateSpreadsheetSheetFilterViewConditionResponse
from lark_oapi.api.sheets.v3.model.delete_spreadsheet_sheet_filter_view_condition_request import \
    DeleteSpreadsheetSheetFilterViewConditionRequest
from lark_oapi.api.sheets.v3.model.delete_spreadsheet_sheet_filter_view_condition_response import \
    DeleteSpreadsheetSheetFilterViewConditionResponse
from lark_oapi.api.sheets.v3.model.get_spreadsheet_sheet_filter_view_condition_request import \
    GetSpreadsheetSheetFilterViewConditionRequest
from lark_oapi.api.sheets.v3.model.get_spreadsheet_sheet_filter_view_condition_response import \
    GetSpreadsheetSheetFilterViewConditionResponse
from lark_oapi.api.sheets.v3.model.query_spreadsheet_sheet_filter_view_condition_request import \
    QuerySpreadsheetSheetFilterViewConditionRequest
from lark_oapi.api.sheets.v3.model.query_spreadsheet_sheet_filter_view_condition_response import \
    QuerySpreadsheetSheetFilterViewConditionResponse
from lark_oapi.api.sheets.v3.model.update_spreadsheet_sheet_filter_view_condition_request import \
    UpdateSpreadsheetSheetFilterViewConditionRequest
from lark_oapi.api.sheets.v3.model.update_spreadsheet_sheet_filter_view_condition_response import \
    UpdateSpreadsheetSheetFilterViewConditionResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class SpreadsheetSheetFilterViewCondition(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateSpreadsheetSheetFilterViewConditionRequest,
               option: RequestOption = RequestOption()) -> CreateSpreadsheetSheetFilterViewConditionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateSpreadsheetSheetFilterViewConditionResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                     CreateSpreadsheetSheetFilterViewConditionResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteSpreadsheetSheetFilterViewConditionRequest,
               option: RequestOption = RequestOption()) -> DeleteSpreadsheetSheetFilterViewConditionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteSpreadsheetSheetFilterViewConditionResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                     DeleteSpreadsheetSheetFilterViewConditionResponse)
        response.raw = resp

        return response

    def get(self, request: GetSpreadsheetSheetFilterViewConditionRequest,
            option: RequestOption = RequestOption()) -> GetSpreadsheetSheetFilterViewConditionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetSpreadsheetSheetFilterViewConditionResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                  GetSpreadsheetSheetFilterViewConditionResponse)
        response.raw = resp

        return response

    def query(self, request: QuerySpreadsheetSheetFilterViewConditionRequest,
              option: RequestOption = RequestOption()) -> QuerySpreadsheetSheetFilterViewConditionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QuerySpreadsheetSheetFilterViewConditionResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                    QuerySpreadsheetSheetFilterViewConditionResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateSpreadsheetSheetFilterViewConditionRequest,
               option: RequestOption = RequestOption()) -> UpdateSpreadsheetSheetFilterViewConditionResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateSpreadsheetSheetFilterViewConditionResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                     UpdateSpreadsheetSheetFilterViewConditionResponse)
        response.raw = resp

        return response
