# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.contact.v3.model.create_job_family_request import CreateJobFamilyRequest
from lark_oapi.api.contact.v3.model.create_job_family_response import CreateJobFamilyResponse
from lark_oapi.api.contact.v3.model.delete_job_family_request import DeleteJobFamilyRequest
from lark_oapi.api.contact.v3.model.delete_job_family_response import DeleteJobFamilyResponse
from lark_oapi.api.contact.v3.model.get_job_family_request import GetJobFamilyRequest
from lark_oapi.api.contact.v3.model.get_job_family_response import GetJobFamilyResponse
from lark_oapi.api.contact.v3.model.list_job_family_request import ListJobFamilyRequest
from lark_oapi.api.contact.v3.model.list_job_family_response import ListJobFamilyResponse
from lark_oapi.api.contact.v3.model.update_job_family_request import UpdateJobFamilyRequest
from lark_oapi.api.contact.v3.model.update_job_family_response import UpdateJobFamilyResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class JobFamily(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateJobFamilyRequest,
               option: RequestOption = RequestOption()) -> CreateJobFamilyResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateJobFamilyResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteJobFamilyRequest,
               option: RequestOption = RequestOption()) -> DeleteJobFamilyResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteJobFamilyResponse)
        response.raw = resp

        return response

    def get(self, request: GetJobFamilyRequest, option: RequestOption = RequestOption()) -> GetJobFamilyResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), GetJobFamilyResponse)
        response.raw = resp

        return response

    def list(self, request: ListJobFamilyRequest, option: RequestOption = RequestOption()) -> ListJobFamilyResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), ListJobFamilyResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateJobFamilyRequest,
               option: RequestOption = RequestOption()) -> UpdateJobFamilyResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateJobFamilyResponse)
        response.raw = resp

        return response
