# Code generated by Lark OpenAPI.

import io
from typing import *

from requests_toolbelt import MultipartEncoder

from lark_oapi.api.drive.v1.model.copy_file_request import CopyFileRequest
from lark_oapi.api.drive.v1.model.copy_file_response import CopyFileResponse
from lark_oapi.api.drive.v1.model.create_folder_file_request import CreateFolderFileRequest
from lark_oapi.api.drive.v1.model.create_folder_file_response import CreateFolderFileResponse
from lark_oapi.api.drive.v1.model.create_shortcut_file_request import CreateShortcutFileRequest
from lark_oapi.api.drive.v1.model.create_shortcut_file_response import CreateShortcutFileResponse
from lark_oapi.api.drive.v1.model.delete_file_request import DeleteFileRequest
from lark_oapi.api.drive.v1.model.delete_file_response import DeleteFileResponse
from lark_oapi.api.drive.v1.model.download_file_request import DownloadFileRequest
from lark_oapi.api.drive.v1.model.download_file_response import DownloadFileResponse
from lark_oapi.api.drive.v1.model.list_file_request import ListFileRequest
from lark_oapi.api.drive.v1.model.list_file_response import ListFileResponse
from lark_oapi.api.drive.v1.model.move_file_request import MoveFileRequest
from lark_oapi.api.drive.v1.model.move_file_response import MoveFileResponse
from lark_oapi.api.drive.v1.model.subscribe_file_request import SubscribeFileRequest
from lark_oapi.api.drive.v1.model.subscribe_file_response import SubscribeFileResponse
from lark_oapi.api.drive.v1.model.task_check_file_request import TaskCheckFileRequest
from lark_oapi.api.drive.v1.model.task_check_file_response import TaskCheckFileResponse
from lark_oapi.api.drive.v1.model.upload_all_file_request import UploadAllFileRequest
from lark_oapi.api.drive.v1.model.upload_all_file_response import UploadAllFileResponse
from lark_oapi.api.drive.v1.model.upload_finish_file_request import UploadFinishFileRequest
from lark_oapi.api.drive.v1.model.upload_finish_file_response import UploadFinishFileResponse
from lark_oapi.api.drive.v1.model.upload_part_file_request import UploadPartFileRequest
from lark_oapi.api.drive.v1.model.upload_part_file_response import UploadPartFileResponse
from lark_oapi.api.drive.v1.model.upload_prepare_file_request import UploadPrepareFileRequest
from lark_oapi.api.drive.v1.model.upload_prepare_file_response import UploadPrepareFileResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8, CONTENT_TYPE
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify
from lark_oapi.core.utils import Files


class File(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def copy(self, request: CopyFileRequest, option: RequestOption = RequestOption()) -> CopyFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CopyFileResponse = JSON.unmarshal(str(resp.content, UTF_8), CopyFileResponse)
        response.raw = resp

        return response

    def create_folder(self, request: CreateFolderFileRequest,
                      option: RequestOption = RequestOption()) -> CreateFolderFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateFolderFileResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateFolderFileResponse)
        response.raw = resp

        return response

    def create_shortcut(self, request: CreateShortcutFileRequest,
                        option: RequestOption = RequestOption()) -> CreateShortcutFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateShortcutFileResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateShortcutFileResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteFileRequest, option: RequestOption = RequestOption()) -> DeleteFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteFileResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteFileResponse)
        response.raw = resp

        return response

    def download(self, request: DownloadFileRequest, option: RequestOption = RequestOption()) -> DownloadFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 处理二进制流
        if resp.status_code == 200:
            response: DownloadFileResponse = DownloadFileResponse({})
            response.code = 0
            response.raw = resp
            response.file = io.BytesIO(resp.content)
            response.file_name = Files.parse_file_name(response.raw.header)
            return response

        # 反序列化
        response: DownloadFileResponse = JSON.unmarshal(str(resp.content, UTF_8), DownloadFileResponse)
        response.raw = resp

        return response

    def list(self, request: ListFileRequest, option: RequestOption = RequestOption()) -> ListFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListFileResponse = JSON.unmarshal(str(resp.content, UTF_8), ListFileResponse)
        response.raw = resp

        return response

    def move(self, request: MoveFileRequest, option: RequestOption = RequestOption()) -> MoveFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: MoveFileResponse = JSON.unmarshal(str(resp.content, UTF_8), MoveFileResponse)
        response.raw = resp

        return response

    def subscribe(self, request: SubscribeFileRequest,
                  option: RequestOption = RequestOption()) -> SubscribeFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SubscribeFileResponse = JSON.unmarshal(str(resp.content, UTF_8), SubscribeFileResponse)
        response.raw = resp

        return response

    def task_check(self, request: TaskCheckFileRequest,
                   option: RequestOption = RequestOption()) -> TaskCheckFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: TaskCheckFileResponse = JSON.unmarshal(str(resp.content, UTF_8), TaskCheckFileResponse)
        response.raw = resp

        return response

    def upload_all(self, request: UploadAllFileRequest,
                   option: RequestOption = RequestOption()) -> UploadAllFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 处理 form-data
        if request.body is not None:
            form_data = MultipartEncoder(Files.parse_form_data(request.body))
            option.headers[CONTENT_TYPE] = form_data.content_type
            request.body = form_data

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UploadAllFileResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadAllFileResponse)
        response.raw = resp

        return response

    def upload_finish(self, request: UploadFinishFileRequest,
                      option: RequestOption = RequestOption()) -> UploadFinishFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UploadFinishFileResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadFinishFileResponse)
        response.raw = resp

        return response

    def upload_part(self, request: UploadPartFileRequest,
                    option: RequestOption = RequestOption()) -> UploadPartFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 处理 form-data
        if request.body is not None:
            form_data = MultipartEncoder(Files.parse_form_data(request.body))
            option.headers[CONTENT_TYPE] = form_data.content_type
            request.body = form_data

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UploadPartFileResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadPartFileResponse)
        response.raw = resp

        return response

    def upload_prepare(self, request: UploadPrepareFileRequest,
                       option: RequestOption = RequestOption()) -> UploadPrepareFileResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UploadPrepareFileResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadPrepareFileResponse)
        response.raw = resp

        return response
