# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.vc.v1.model.end_meeting_request import EndMeetingRequest
from lark_oapi.api.vc.v1.model.end_meeting_response import EndMeetingResponse
from lark_oapi.api.vc.v1.model.get_meeting_request import GetMeetingRequest
from lark_oapi.api.vc.v1.model.get_meeting_response import GetMeetingResponse
from lark_oapi.api.vc.v1.model.invite_meeting_request import InviteMeetingRequest
from lark_oapi.api.vc.v1.model.invite_meeting_response import InviteMeetingResponse
from lark_oapi.api.vc.v1.model.kickout_meeting_request import KickoutMeetingRequest
from lark_oapi.api.vc.v1.model.kickout_meeting_response import KickoutMeetingResponse
from lark_oapi.api.vc.v1.model.list_by_no_meeting_request import ListByNoMeetingRequest
from lark_oapi.api.vc.v1.model.list_by_no_meeting_response import ListByNoMeetingResponse
from lark_oapi.api.vc.v1.model.set_host_meeting_request import SetHostMeetingRequest
from lark_oapi.api.vc.v1.model.set_host_meeting_response import SetHostMeetingResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Meeting(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def end(self, request: EndMeetingRequest, option: RequestOption = RequestOption()) -> EndMeetingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: EndMeetingResponse = JSON.unmarshal(str(resp.content, UTF_8), EndMeetingResponse)
        response.raw = resp

        return response

    def get(self, request: GetMeetingRequest, option: RequestOption = RequestOption()) -> GetMeetingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetMeetingResponse = JSON.unmarshal(str(resp.content, UTF_8), GetMeetingResponse)
        response.raw = resp

        return response

    def invite(self, request: InviteMeetingRequest, option: RequestOption = RequestOption()) -> InviteMeetingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: InviteMeetingResponse = JSON.unmarshal(str(resp.content, UTF_8), InviteMeetingResponse)
        response.raw = resp

        return response

    def kickout(self, request: KickoutMeetingRequest,
                option: RequestOption = RequestOption()) -> KickoutMeetingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: KickoutMeetingResponse = JSON.unmarshal(str(resp.content, UTF_8), KickoutMeetingResponse)
        response.raw = resp

        return response

    def list_by_no(self, request: ListByNoMeetingRequest,
                   option: RequestOption = RequestOption()) -> ListByNoMeetingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListByNoMeetingResponse = JSON.unmarshal(str(resp.content, UTF_8), ListByNoMeetingResponse)
        response.raw = resp

        return response

    def set_host(self, request: SetHostMeetingRequest,
                 option: RequestOption = RequestOption()) -> SetHostMeetingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SetHostMeetingResponse = JSON.unmarshal(str(resp.content, UTF_8), SetHostMeetingResponse)
        response.raw = resp

        return response
