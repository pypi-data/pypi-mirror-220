# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.sheets.v3.model.create_spreadsheet_sheet_float_image_request import \
    CreateSpreadsheetSheetFloatImageRequest
from lark_oapi.api.sheets.v3.model.create_spreadsheet_sheet_float_image_response import \
    CreateSpreadsheetSheetFloatImageResponse
from lark_oapi.api.sheets.v3.model.delete_spreadsheet_sheet_float_image_request import \
    DeleteSpreadsheetSheetFloatImageRequest
from lark_oapi.api.sheets.v3.model.delete_spreadsheet_sheet_float_image_response import \
    DeleteSpreadsheetSheetFloatImageResponse
from lark_oapi.api.sheets.v3.model.get_spreadsheet_sheet_float_image_request import GetSpreadsheetSheetFloatImageRequest
from lark_oapi.api.sheets.v3.model.get_spreadsheet_sheet_float_image_response import \
    GetSpreadsheetSheetFloatImageResponse
from lark_oapi.api.sheets.v3.model.patch_spreadsheet_sheet_float_image_request import \
    PatchSpreadsheetSheetFloatImageRequest
from lark_oapi.api.sheets.v3.model.patch_spreadsheet_sheet_float_image_response import \
    PatchSpreadsheetSheetFloatImageResponse
from lark_oapi.api.sheets.v3.model.query_spreadsheet_sheet_float_image_request import \
    QuerySpreadsheetSheetFloatImageRequest
from lark_oapi.api.sheets.v3.model.query_spreadsheet_sheet_float_image_response import \
    QuerySpreadsheetSheetFloatImageResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class SpreadsheetSheetFloatImage(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateSpreadsheetSheetFloatImageRequest,
               option: RequestOption = RequestOption()) -> CreateSpreadsheetSheetFloatImageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateSpreadsheetSheetFloatImageResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                            CreateSpreadsheetSheetFloatImageResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteSpreadsheetSheetFloatImageRequest,
               option: RequestOption = RequestOption()) -> DeleteSpreadsheetSheetFloatImageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteSpreadsheetSheetFloatImageResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                            DeleteSpreadsheetSheetFloatImageResponse)
        response.raw = resp

        return response

    def get(self, request: GetSpreadsheetSheetFloatImageRequest,
            option: RequestOption = RequestOption()) -> GetSpreadsheetSheetFloatImageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetSpreadsheetSheetFloatImageResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         GetSpreadsheetSheetFloatImageResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchSpreadsheetSheetFloatImageRequest,
              option: RequestOption = RequestOption()) -> PatchSpreadsheetSheetFloatImageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchSpreadsheetSheetFloatImageResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           PatchSpreadsheetSheetFloatImageResponse)
        response.raw = resp

        return response

    def query(self, request: QuerySpreadsheetSheetFloatImageRequest,
              option: RequestOption = RequestOption()) -> QuerySpreadsheetSheetFloatImageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QuerySpreadsheetSheetFloatImageResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           QuerySpreadsheetSheetFloatImageResponse)
        response.raw = resp

        return response
