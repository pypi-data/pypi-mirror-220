# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.corehr.v1.model.create_working_hours_type_request import CreateWorkingHoursTypeRequest
from lark_oapi.api.corehr.v1.model.create_working_hours_type_response import CreateWorkingHoursTypeResponse
from lark_oapi.api.corehr.v1.model.delete_working_hours_type_request import DeleteWorkingHoursTypeRequest
from lark_oapi.api.corehr.v1.model.delete_working_hours_type_response import DeleteWorkingHoursTypeResponse
from lark_oapi.api.corehr.v1.model.get_working_hours_type_request import GetWorkingHoursTypeRequest
from lark_oapi.api.corehr.v1.model.get_working_hours_type_response import GetWorkingHoursTypeResponse
from lark_oapi.api.corehr.v1.model.list_working_hours_type_request import ListWorkingHoursTypeRequest
from lark_oapi.api.corehr.v1.model.list_working_hours_type_response import ListWorkingHoursTypeResponse
from lark_oapi.api.corehr.v1.model.patch_working_hours_type_request import PatchWorkingHoursTypeRequest
from lark_oapi.api.corehr.v1.model.patch_working_hours_type_response import PatchWorkingHoursTypeResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class WorkingHoursType(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateWorkingHoursTypeRequest,
               option: RequestOption = RequestOption()) -> CreateWorkingHoursTypeResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateWorkingHoursTypeResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  CreateWorkingHoursTypeResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteWorkingHoursTypeRequest,
               option: RequestOption = RequestOption()) -> DeleteWorkingHoursTypeResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteWorkingHoursTypeResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  DeleteWorkingHoursTypeResponse)
        response.raw = resp

        return response

    def get(self, request: GetWorkingHoursTypeRequest,
            option: RequestOption = RequestOption()) -> GetWorkingHoursTypeResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetWorkingHoursTypeResponse = JSON.unmarshal(str(resp.content, UTF_8), GetWorkingHoursTypeResponse)
        response.raw = resp

        return response

    def list(self, request: ListWorkingHoursTypeRequest,
             option: RequestOption = RequestOption()) -> ListWorkingHoursTypeResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListWorkingHoursTypeResponse = JSON.unmarshal(str(resp.content, UTF_8), ListWorkingHoursTypeResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchWorkingHoursTypeRequest,
              option: RequestOption = RequestOption()) -> PatchWorkingHoursTypeResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchWorkingHoursTypeResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 PatchWorkingHoursTypeResponse)
        response.raw = resp

        return response
