# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.approval.v4.model.add_sign_instance_request import AddSignInstanceRequest
from lark_oapi.api.approval.v4.model.add_sign_instance_response import AddSignInstanceResponse
from lark_oapi.api.approval.v4.model.cancel_instance_request import CancelInstanceRequest
from lark_oapi.api.approval.v4.model.cancel_instance_response import CancelInstanceResponse
from lark_oapi.api.approval.v4.model.cc_instance_request import CcInstanceRequest
from lark_oapi.api.approval.v4.model.cc_instance_response import CcInstanceResponse
from lark_oapi.api.approval.v4.model.create_instance_request import CreateInstanceRequest
from lark_oapi.api.approval.v4.model.create_instance_response import CreateInstanceResponse
from lark_oapi.api.approval.v4.model.get_instance_request import GetInstanceRequest
from lark_oapi.api.approval.v4.model.get_instance_response import GetInstanceResponse
from lark_oapi.api.approval.v4.model.list_instance_request import ListInstanceRequest
from lark_oapi.api.approval.v4.model.list_instance_response import ListInstanceResponse
from lark_oapi.api.approval.v4.model.preview_instance_request import PreviewInstanceRequest
from lark_oapi.api.approval.v4.model.preview_instance_response import PreviewInstanceResponse
from lark_oapi.api.approval.v4.model.query_instance_request import QueryInstanceRequest
from lark_oapi.api.approval.v4.model.query_instance_response import QueryInstanceResponse
from lark_oapi.api.approval.v4.model.search_cc_instance_request import SearchCcInstanceRequest
from lark_oapi.api.approval.v4.model.search_cc_instance_response import SearchCcInstanceResponse
from lark_oapi.api.approval.v4.model.specified_rollback_instance_request import SpecifiedRollbackInstanceRequest
from lark_oapi.api.approval.v4.model.specified_rollback_instance_response import SpecifiedRollbackInstanceResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Instance(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def add_sign(self, request: AddSignInstanceRequest,
                 option: RequestOption = RequestOption()) -> AddSignInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: AddSignInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), AddSignInstanceResponse)
        response.raw = resp

        return response

    def cancel(self, request: CancelInstanceRequest, option: RequestOption = RequestOption()) -> CancelInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CancelInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), CancelInstanceResponse)
        response.raw = resp

        return response

    def cc(self, request: CcInstanceRequest, option: RequestOption = RequestOption()) -> CcInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CcInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), CcInstanceResponse)
        response.raw = resp

        return response

    def create(self, request: CreateInstanceRequest, option: RequestOption = RequestOption()) -> CreateInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateInstanceResponse)
        response.raw = resp

        return response

    def get(self, request: GetInstanceRequest, option: RequestOption = RequestOption()) -> GetInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), GetInstanceResponse)
        response.raw = resp

        return response

    def list(self, request: ListInstanceRequest, option: RequestOption = RequestOption()) -> ListInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), ListInstanceResponse)
        response.raw = resp

        return response

    def preview(self, request: PreviewInstanceRequest,
                option: RequestOption = RequestOption()) -> PreviewInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PreviewInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), PreviewInstanceResponse)
        response.raw = resp

        return response

    def query(self, request: QueryInstanceRequest, option: RequestOption = RequestOption()) -> QueryInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), QueryInstanceResponse)
        response.raw = resp

        return response

    def search_cc(self, request: SearchCcInstanceRequest,
                  option: RequestOption = RequestOption()) -> SearchCcInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchCcInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchCcInstanceResponse)
        response.raw = resp

        return response

    def specified_rollback(self, request: SpecifiedRollbackInstanceRequest,
                           option: RequestOption = RequestOption()) -> SpecifiedRollbackInstanceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SpecifiedRollbackInstanceResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     SpecifiedRollbackInstanceResponse)
        response.raw = resp

        return response
