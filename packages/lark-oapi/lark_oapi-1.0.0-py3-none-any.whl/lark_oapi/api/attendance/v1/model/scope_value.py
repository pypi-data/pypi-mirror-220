# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.core.construct import init


class ScopeValue(object):
    _types = {
        "key": str,
        "name": str,
    }

    def __init__(self, d):
        self.key: Optional[str] = None
        self.name: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ScopeValueBuilder":
        return ScopeValueBuilder()


class ScopeValueBuilder(object):
    def __init__(self, scope_value: ScopeValue = ScopeValue({})) -> None:
        self._scope_value: ScopeValue = scope_value

    def key(self, key: str) -> "ScopeValueBuilder":
        self._scope_value.key = key
        return self

    def name(self, name: str) -> "ScopeValueBuilder":
        self._scope_value.name = name
        return self

    def build(self) -> "ScopeValue":
        return self._scope_value
