# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.attendance.v1.model.create_shift_request import CreateShiftRequest
from lark_oapi.api.attendance.v1.model.create_shift_response import CreateShiftResponse
from lark_oapi.api.attendance.v1.model.delete_shift_request import DeleteShiftRequest
from lark_oapi.api.attendance.v1.model.delete_shift_response import DeleteShiftResponse
from lark_oapi.api.attendance.v1.model.get_shift_request import GetShiftRequest
from lark_oapi.api.attendance.v1.model.get_shift_response import GetShiftResponse
from lark_oapi.api.attendance.v1.model.list_shift_request import ListShiftRequest
from lark_oapi.api.attendance.v1.model.list_shift_response import ListShiftResponse
from lark_oapi.api.attendance.v1.model.query_shift_request import QueryShiftRequest
from lark_oapi.api.attendance.v1.model.query_shift_response import QueryShiftResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Shift(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateShiftRequest, option: RequestOption = RequestOption()) -> CreateShiftResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateShiftResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateShiftResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteShiftRequest, option: RequestOption = RequestOption()) -> DeleteShiftResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteShiftResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteShiftResponse)
        response.raw = resp

        return response

    def get(self, request: GetShiftRequest, option: RequestOption = RequestOption()) -> GetShiftResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetShiftResponse = JSON.unmarshal(str(resp.content, UTF_8), GetShiftResponse)
        response.raw = resp

        return response

    def list(self, request: ListShiftRequest, option: RequestOption = RequestOption()) -> ListShiftResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListShiftResponse = JSON.unmarshal(str(resp.content, UTF_8), ListShiftResponse)
        response.raw = resp

        return response

    def query(self, request: QueryShiftRequest, option: RequestOption = RequestOption()) -> QueryShiftResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryShiftResponse = JSON.unmarshal(str(resp.content, UTF_8), QueryShiftResponse)
        response.raw = resp

        return response
