# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.corehr.v1.model.delete_pre_hire_request import DeletePreHireRequest
from lark_oapi.api.corehr.v1.model.delete_pre_hire_response import DeletePreHireResponse
from lark_oapi.api.corehr.v1.model.get_pre_hire_request import GetPreHireRequest
from lark_oapi.api.corehr.v1.model.get_pre_hire_response import GetPreHireResponse
from lark_oapi.api.corehr.v1.model.list_pre_hire_request import ListPreHireRequest
from lark_oapi.api.corehr.v1.model.list_pre_hire_response import ListPreHireResponse
from lark_oapi.api.corehr.v1.model.patch_pre_hire_request import PatchPreHireRequest
from lark_oapi.api.corehr.v1.model.patch_pre_hire_response import PatchPreHireResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class PreHire(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def delete(self, request: DeletePreHireRequest, option: RequestOption = RequestOption()) -> DeletePreHireResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeletePreHireResponse = JSON.unmarshal(str(resp.content, UTF_8), DeletePreHireResponse)
        response.raw = resp

        return response

    def get(self, request: GetPreHireRequest, option: RequestOption = RequestOption()) -> GetPreHireResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetPreHireResponse = JSON.unmarshal(str(resp.content, UTF_8), GetPreHireResponse)
        response.raw = resp

        return response

    def list(self, request: ListPreHireRequest, option: RequestOption = RequestOption()) -> ListPreHireResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListPreHireResponse = JSON.unmarshal(str(resp.content, UTF_8), ListPreHireResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchPreHireRequest, option: RequestOption = RequestOption()) -> PatchPreHireResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchPreHireResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchPreHireResponse)
        response.raw = resp

        return response
