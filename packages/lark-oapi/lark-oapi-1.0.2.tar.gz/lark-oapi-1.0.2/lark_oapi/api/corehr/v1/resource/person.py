# Code generated by Lark OpenAPI.

from typing import *

from requests_toolbelt import MultipartEncoder

from lark_oapi.api.corehr.v1.model.delete_person_request import DeletePersonRequest
from lark_oapi.api.corehr.v1.model.delete_person_response import DeletePersonResponse
from lark_oapi.api.corehr.v1.model.get_person_request import GetPersonRequest
from lark_oapi.api.corehr.v1.model.get_person_response import GetPersonResponse
from lark_oapi.api.corehr.v1.model.upload_person_request import UploadPersonRequest
from lark_oapi.api.corehr.v1.model.upload_person_response import UploadPersonResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8, CONTENT_TYPE
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify
from lark_oapi.core.utils import Files


class Person(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def delete(self, request: DeletePersonRequest, option: RequestOption = RequestOption()) -> DeletePersonResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeletePersonResponse = JSON.unmarshal(str(resp.content, UTF_8), DeletePersonResponse)
        response.raw = resp

        return response

    def get(self, request: GetPersonRequest, option: RequestOption = RequestOption()) -> GetPersonResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetPersonResponse = JSON.unmarshal(str(resp.content, UTF_8), GetPersonResponse)
        response.raw = resp

        return response

    def upload(self, request: UploadPersonRequest, option: RequestOption = RequestOption()) -> UploadPersonResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 处理 form-data
        if request.body is not None:
            form_data = MultipartEncoder(Files.parse_form_data(request.body))
            option.headers[CONTENT_TYPE] = form_data.content_type
            request.body = form_data

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UploadPersonResponse = JSON.unmarshal(str(resp.content, UTF_8), UploadPersonResponse)
        response.raw = resp

        return response
