# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from lark_oapi.core.const import UTF_8, CONTENT_TYPE
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from lark_oapi.api.personal_settings.v1.model.batch_close_system_status_request import BatchCloseSystemStatusRequest
from lark_oapi.api.personal_settings.v1.model.batch_close_system_status_response import BatchCloseSystemStatusResponse
from lark_oapi.api.personal_settings.v1.model.batch_open_system_status_request import BatchOpenSystemStatusRequest
from lark_oapi.api.personal_settings.v1.model.batch_open_system_status_response import BatchOpenSystemStatusResponse
from lark_oapi.api.personal_settings.v1.model.create_system_status_request import CreateSystemStatusRequest
from lark_oapi.api.personal_settings.v1.model.create_system_status_response import CreateSystemStatusResponse
from lark_oapi.api.personal_settings.v1.model.delete_system_status_request import DeleteSystemStatusRequest
from lark_oapi.api.personal_settings.v1.model.delete_system_status_response import DeleteSystemStatusResponse
from lark_oapi.api.personal_settings.v1.model.list_system_status_request import ListSystemStatusRequest
from lark_oapi.api.personal_settings.v1.model.list_system_status_response import ListSystemStatusResponse
from lark_oapi.api.personal_settings.v1.model.patch_system_status_request import PatchSystemStatusRequest
from lark_oapi.api.personal_settings.v1.model.patch_system_status_response import PatchSystemStatusResponse


class SystemStatus(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_close(self, request: BatchCloseSystemStatusRequest, option: RequestOption = RequestOption()) -> BatchCloseSystemStatusResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: BatchCloseSystemStatusResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchCloseSystemStatusResponse)
        response.raw = resp

        return response

    def batch_open(self, request: BatchOpenSystemStatusRequest, option: RequestOption = RequestOption()) -> BatchOpenSystemStatusResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: BatchOpenSystemStatusResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchOpenSystemStatusResponse)
        response.raw = resp

        return response

    def create(self, request: CreateSystemStatusRequest, option: RequestOption = RequestOption()) -> CreateSystemStatusResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateSystemStatusResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateSystemStatusResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteSystemStatusRequest, option: RequestOption = RequestOption()) -> DeleteSystemStatusResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteSystemStatusResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteSystemStatusResponse)
        response.raw = resp

        return response

    def list(self, request: ListSystemStatusRequest, option: RequestOption = RequestOption()) -> ListSystemStatusResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: ListSystemStatusResponse = JSON.unmarshal(str(resp.content, UTF_8), ListSystemStatusResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchSystemStatusRequest, option: RequestOption = RequestOption()) -> PatchSystemStatusResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: PatchSystemStatusResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchSystemStatusResponse)
        response.raw = resp

        return response

    
