# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.okr.v1.model.batch_update_metric_source_table_item_request import \
    BatchUpdateMetricSourceTableItemRequest
from lark_oapi.api.okr.v1.model.batch_update_metric_source_table_item_response import \
    BatchUpdateMetricSourceTableItemResponse
from lark_oapi.api.okr.v1.model.get_metric_source_table_item_request import GetMetricSourceTableItemRequest
from lark_oapi.api.okr.v1.model.get_metric_source_table_item_response import GetMetricSourceTableItemResponse
from lark_oapi.api.okr.v1.model.list_metric_source_table_item_request import ListMetricSourceTableItemRequest
from lark_oapi.api.okr.v1.model.list_metric_source_table_item_response import ListMetricSourceTableItemResponse
from lark_oapi.api.okr.v1.model.patch_metric_source_table_item_request import PatchMetricSourceTableItemRequest
from lark_oapi.api.okr.v1.model.patch_metric_source_table_item_response import PatchMetricSourceTableItemResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class MetricSourceTableItem(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_update(self, request: BatchUpdateMetricSourceTableItemRequest,
                     option: RequestOption = RequestOption()) -> BatchUpdateMetricSourceTableItemResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUpdateMetricSourceTableItemResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                            BatchUpdateMetricSourceTableItemResponse)
        response.raw = resp

        return response

    def get(self, request: GetMetricSourceTableItemRequest,
            option: RequestOption = RequestOption()) -> GetMetricSourceTableItemResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetMetricSourceTableItemResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    GetMetricSourceTableItemResponse)
        response.raw = resp

        return response

    def list(self, request: ListMetricSourceTableItemRequest,
             option: RequestOption = RequestOption()) -> ListMetricSourceTableItemResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListMetricSourceTableItemResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     ListMetricSourceTableItemResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchMetricSourceTableItemRequest,
              option: RequestOption = RequestOption()) -> PatchMetricSourceTableItemResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchMetricSourceTableItemResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                      PatchMetricSourceTableItemResponse)
        response.raw = resp

        return response
