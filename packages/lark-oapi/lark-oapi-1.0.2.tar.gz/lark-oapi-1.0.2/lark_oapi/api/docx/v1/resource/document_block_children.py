# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.docx.v1.model.batch_delete_document_block_children_request import \
    BatchDeleteDocumentBlockChildrenRequest
from lark_oapi.api.docx.v1.model.batch_delete_document_block_children_response import \
    BatchDeleteDocumentBlockChildrenResponse
from lark_oapi.api.docx.v1.model.create_document_block_children_request import CreateDocumentBlockChildrenRequest
from lark_oapi.api.docx.v1.model.create_document_block_children_response import CreateDocumentBlockChildrenResponse
from lark_oapi.api.docx.v1.model.get_document_block_children_request import GetDocumentBlockChildrenRequest
from lark_oapi.api.docx.v1.model.get_document_block_children_response import GetDocumentBlockChildrenResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class DocumentBlockChildren(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_delete(self, request: BatchDeleteDocumentBlockChildrenRequest,
                     option: RequestOption = RequestOption()) -> BatchDeleteDocumentBlockChildrenResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchDeleteDocumentBlockChildrenResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                            BatchDeleteDocumentBlockChildrenResponse)
        response.raw = resp

        return response

    def create(self, request: CreateDocumentBlockChildrenRequest,
               option: RequestOption = RequestOption()) -> CreateDocumentBlockChildrenResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateDocumentBlockChildrenResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       CreateDocumentBlockChildrenResponse)
        response.raw = resp

        return response

    def get(self, request: GetDocumentBlockChildrenRequest,
            option: RequestOption = RequestOption()) -> GetDocumentBlockChildrenResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetDocumentBlockChildrenResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    GetDocumentBlockChildrenResponse)
        response.raw = resp

        return response
