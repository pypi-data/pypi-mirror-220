# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.sheets.v3.model.create_spreadsheet_request import CreateSpreadsheetRequest
from lark_oapi.api.sheets.v3.model.create_spreadsheet_response import CreateSpreadsheetResponse
from lark_oapi.api.sheets.v3.model.get_spreadsheet_request import GetSpreadsheetRequest
from lark_oapi.api.sheets.v3.model.get_spreadsheet_response import GetSpreadsheetResponse
from lark_oapi.api.sheets.v3.model.patch_spreadsheet_request import PatchSpreadsheetRequest
from lark_oapi.api.sheets.v3.model.patch_spreadsheet_response import PatchSpreadsheetResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Spreadsheet(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateSpreadsheetRequest,
               option: RequestOption = RequestOption()) -> CreateSpreadsheetResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateSpreadsheetResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateSpreadsheetResponse)
        response.raw = resp

        return response

    def get(self, request: GetSpreadsheetRequest, option: RequestOption = RequestOption()) -> GetSpreadsheetResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetSpreadsheetResponse = JSON.unmarshal(str(resp.content, UTF_8), GetSpreadsheetResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchSpreadsheetRequest,
              option: RequestOption = RequestOption()) -> PatchSpreadsheetResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchSpreadsheetResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchSpreadsheetResponse)
        response.raw = resp

        return response
