# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.contact.v3.model.batch_get_id_user_request import BatchGetIdUserRequest
from lark_oapi.api.contact.v3.model.batch_get_id_user_response import BatchGetIdUserResponse
from lark_oapi.api.contact.v3.model.batch_user_request import BatchUserRequest
from lark_oapi.api.contact.v3.model.batch_user_response import BatchUserResponse
from lark_oapi.api.contact.v3.model.create_user_request import CreateUserRequest
from lark_oapi.api.contact.v3.model.create_user_response import CreateUserResponse
from lark_oapi.api.contact.v3.model.delete_user_request import DeleteUserRequest
from lark_oapi.api.contact.v3.model.delete_user_response import DeleteUserResponse
from lark_oapi.api.contact.v3.model.find_by_department_user_request import FindByDepartmentUserRequest
from lark_oapi.api.contact.v3.model.find_by_department_user_response import FindByDepartmentUserResponse
from lark_oapi.api.contact.v3.model.get_user_request import GetUserRequest
from lark_oapi.api.contact.v3.model.get_user_response import GetUserResponse
from lark_oapi.api.contact.v3.model.list_user_request import ListUserRequest
from lark_oapi.api.contact.v3.model.list_user_response import ListUserResponse
from lark_oapi.api.contact.v3.model.patch_user_request import PatchUserRequest
from lark_oapi.api.contact.v3.model.patch_user_response import PatchUserResponse
from lark_oapi.api.contact.v3.model.resurrect_user_request import ResurrectUserRequest
from lark_oapi.api.contact.v3.model.resurrect_user_response import ResurrectUserResponse
from lark_oapi.api.contact.v3.model.update_user_id_user_request import UpdateUserIdUserRequest
from lark_oapi.api.contact.v3.model.update_user_id_user_response import UpdateUserIdUserResponse
from lark_oapi.api.contact.v3.model.update_user_request import UpdateUserRequest
from lark_oapi.api.contact.v3.model.update_user_response import UpdateUserResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class User(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch(self, request: BatchUserRequest, option: RequestOption = RequestOption()) -> BatchUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUserResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchUserResponse)
        response.raw = resp

        return response

    def batch_get_id(self, request: BatchGetIdUserRequest,
                     option: RequestOption = RequestOption()) -> BatchGetIdUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchGetIdUserResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetIdUserResponse)
        response.raw = resp

        return response

    def create(self, request: CreateUserRequest, option: RequestOption = RequestOption()) -> CreateUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateUserResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateUserResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteUserRequest, option: RequestOption = RequestOption()) -> DeleteUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteUserResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteUserResponse)
        response.raw = resp

        return response

    def find_by_department(self, request: FindByDepartmentUserRequest,
                           option: RequestOption = RequestOption()) -> FindByDepartmentUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: FindByDepartmentUserResponse = JSON.unmarshal(str(resp.content, UTF_8), FindByDepartmentUserResponse)
        response.raw = resp

        return response

    def get(self, request: GetUserRequest, option: RequestOption = RequestOption()) -> GetUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetUserResponse = JSON.unmarshal(str(resp.content, UTF_8), GetUserResponse)
        response.raw = resp

        return response

    def list(self, request: ListUserRequest, option: RequestOption = RequestOption()) -> ListUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListUserResponse = JSON.unmarshal(str(resp.content, UTF_8), ListUserResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchUserRequest, option: RequestOption = RequestOption()) -> PatchUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchUserResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchUserResponse)
        response.raw = resp

        return response

    def resurrect(self, request: ResurrectUserRequest,
                  option: RequestOption = RequestOption()) -> ResurrectUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ResurrectUserResponse = JSON.unmarshal(str(resp.content, UTF_8), ResurrectUserResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateUserRequest, option: RequestOption = RequestOption()) -> UpdateUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateUserResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateUserResponse)
        response.raw = resp

        return response

    def update_user_id(self, request: UpdateUserIdUserRequest,
                       option: RequestOption = RequestOption()) -> UpdateUserIdUserResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateUserIdUserResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateUserIdUserResponse)
        response.raw = resp

        return response
