# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.vc.v1.model.create_room_request import CreateRoomRequest
from lark_oapi.api.vc.v1.model.create_room_response import CreateRoomResponse
from lark_oapi.api.vc.v1.model.delete_room_request import DeleteRoomRequest
from lark_oapi.api.vc.v1.model.delete_room_response import DeleteRoomResponse
from lark_oapi.api.vc.v1.model.get_room_request import GetRoomRequest
from lark_oapi.api.vc.v1.model.get_room_response import GetRoomResponse
from lark_oapi.api.vc.v1.model.list_room_request import ListRoomRequest
from lark_oapi.api.vc.v1.model.list_room_response import ListRoomResponse
from lark_oapi.api.vc.v1.model.mget_room_request import MgetRoomRequest
from lark_oapi.api.vc.v1.model.mget_room_response import MgetRoomResponse
from lark_oapi.api.vc.v1.model.patch_room_request import PatchRoomRequest
from lark_oapi.api.vc.v1.model.patch_room_response import PatchRoomResponse
from lark_oapi.api.vc.v1.model.search_room_request import SearchRoomRequest
from lark_oapi.api.vc.v1.model.search_room_response import SearchRoomResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Room(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateRoomRequest, option: RequestOption = RequestOption()) -> CreateRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateRoomResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteRoomRequest, option: RequestOption = RequestOption()) -> DeleteRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteRoomResponse)
        response.raw = resp

        return response

    def get(self, request: GetRoomRequest, option: RequestOption = RequestOption()) -> GetRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), GetRoomResponse)
        response.raw = resp

        return response

    def list(self, request: ListRoomRequest, option: RequestOption = RequestOption()) -> ListRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), ListRoomResponse)
        response.raw = resp

        return response

    def mget(self, request: MgetRoomRequest, option: RequestOption = RequestOption()) -> MgetRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: MgetRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), MgetRoomResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchRoomRequest, option: RequestOption = RequestOption()) -> PatchRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchRoomResponse)
        response.raw = resp

        return response

    def search(self, request: SearchRoomRequest, option: RequestOption = RequestOption()) -> SearchRoomResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchRoomResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchRoomResponse)
        response.raw = resp

        return response
