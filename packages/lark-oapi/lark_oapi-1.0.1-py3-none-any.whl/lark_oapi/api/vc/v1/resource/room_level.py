# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.vc.v1.model.create_room_level_request import CreateRoomLevelRequest
from lark_oapi.api.vc.v1.model.create_room_level_response import CreateRoomLevelResponse
from lark_oapi.api.vc.v1.model.del_room_level_request import DelRoomLevelRequest
from lark_oapi.api.vc.v1.model.del_room_level_response import DelRoomLevelResponse
from lark_oapi.api.vc.v1.model.get_room_level_request import GetRoomLevelRequest
from lark_oapi.api.vc.v1.model.get_room_level_response import GetRoomLevelResponse
from lark_oapi.api.vc.v1.model.list_room_level_request import ListRoomLevelRequest
from lark_oapi.api.vc.v1.model.list_room_level_response import ListRoomLevelResponse
from lark_oapi.api.vc.v1.model.mget_room_level_request import MgetRoomLevelRequest
from lark_oapi.api.vc.v1.model.mget_room_level_response import MgetRoomLevelResponse
from lark_oapi.api.vc.v1.model.patch_room_level_request import PatchRoomLevelRequest
from lark_oapi.api.vc.v1.model.patch_room_level_response import PatchRoomLevelResponse
from lark_oapi.api.vc.v1.model.search_room_level_request import SearchRoomLevelRequest
from lark_oapi.api.vc.v1.model.search_room_level_response import SearchRoomLevelResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class RoomLevel(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateRoomLevelRequest,
               option: RequestOption = RequestOption()) -> CreateRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateRoomLevelResponse)
        response.raw = resp

        return response

    def del_(self, request: DelRoomLevelRequest, option: RequestOption = RequestOption()) -> DelRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DelRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), DelRoomLevelResponse)
        response.raw = resp

        return response

    def get(self, request: GetRoomLevelRequest, option: RequestOption = RequestOption()) -> GetRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), GetRoomLevelResponse)
        response.raw = resp

        return response

    def list(self, request: ListRoomLevelRequest, option: RequestOption = RequestOption()) -> ListRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), ListRoomLevelResponse)
        response.raw = resp

        return response

    def mget(self, request: MgetRoomLevelRequest, option: RequestOption = RequestOption()) -> MgetRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: MgetRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), MgetRoomLevelResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchRoomLevelRequest, option: RequestOption = RequestOption()) -> PatchRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchRoomLevelResponse)
        response.raw = resp

        return response

    def search(self, request: SearchRoomLevelRequest,
               option: RequestOption = RequestOption()) -> SearchRoomLevelResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchRoomLevelResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchRoomLevelResponse)
        response.raw = resp

        return response
