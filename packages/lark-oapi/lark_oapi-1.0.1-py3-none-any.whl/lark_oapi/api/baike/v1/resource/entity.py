# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.baike.v1.model.create_entity_request import CreateEntityRequest
from lark_oapi.api.baike.v1.model.create_entity_response import CreateEntityResponse
from lark_oapi.api.baike.v1.model.extract_entity_request import ExtractEntityRequest
from lark_oapi.api.baike.v1.model.extract_entity_response import ExtractEntityResponse
from lark_oapi.api.baike.v1.model.get_entity_request import GetEntityRequest
from lark_oapi.api.baike.v1.model.get_entity_response import GetEntityResponse
from lark_oapi.api.baike.v1.model.highlight_entity_request import HighlightEntityRequest
from lark_oapi.api.baike.v1.model.highlight_entity_response import HighlightEntityResponse
from lark_oapi.api.baike.v1.model.list_entity_request import ListEntityRequest
from lark_oapi.api.baike.v1.model.list_entity_response import ListEntityResponse
from lark_oapi.api.baike.v1.model.match_entity_request import MatchEntityRequest
from lark_oapi.api.baike.v1.model.match_entity_response import MatchEntityResponse
from lark_oapi.api.baike.v1.model.search_entity_request import SearchEntityRequest
from lark_oapi.api.baike.v1.model.search_entity_response import SearchEntityResponse
from lark_oapi.api.baike.v1.model.update_entity_request import UpdateEntityRequest
from lark_oapi.api.baike.v1.model.update_entity_response import UpdateEntityResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Entity(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateEntityRequest, option: RequestOption = RequestOption()) -> CreateEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateEntityResponse)
        response.raw = resp

        return response

    def extract(self, request: ExtractEntityRequest, option: RequestOption = RequestOption()) -> ExtractEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ExtractEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), ExtractEntityResponse)
        response.raw = resp

        return response

    def get(self, request: GetEntityRequest, option: RequestOption = RequestOption()) -> GetEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), GetEntityResponse)
        response.raw = resp

        return response

    def highlight(self, request: HighlightEntityRequest,
                  option: RequestOption = RequestOption()) -> HighlightEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: HighlightEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), HighlightEntityResponse)
        response.raw = resp

        return response

    def list(self, request: ListEntityRequest, option: RequestOption = RequestOption()) -> ListEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), ListEntityResponse)
        response.raw = resp

        return response

    def match(self, request: MatchEntityRequest, option: RequestOption = RequestOption()) -> MatchEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: MatchEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), MatchEntityResponse)
        response.raw = resp

        return response

    def search(self, request: SearchEntityRequest, option: RequestOption = RequestOption()) -> SearchEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchEntityResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateEntityRequest, option: RequestOption = RequestOption()) -> UpdateEntityResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateEntityResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateEntityResponse)
        response.raw = resp

        return response
