# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.docx.v1.model.batch_update_document_block_request import BatchUpdateDocumentBlockRequest
from lark_oapi.api.docx.v1.model.batch_update_document_block_response import BatchUpdateDocumentBlockResponse
from lark_oapi.api.docx.v1.model.get_document_block_request import GetDocumentBlockRequest
from lark_oapi.api.docx.v1.model.get_document_block_response import GetDocumentBlockResponse
from lark_oapi.api.docx.v1.model.list_document_block_request import ListDocumentBlockRequest
from lark_oapi.api.docx.v1.model.list_document_block_response import ListDocumentBlockResponse
from lark_oapi.api.docx.v1.model.patch_document_block_request import PatchDocumentBlockRequest
from lark_oapi.api.docx.v1.model.patch_document_block_response import PatchDocumentBlockResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class DocumentBlock(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def batch_update(self, request: BatchUpdateDocumentBlockRequest,
                     option: RequestOption = RequestOption()) -> BatchUpdateDocumentBlockResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUpdateDocumentBlockResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    BatchUpdateDocumentBlockResponse)
        response.raw = resp

        return response

    def get(self, request: GetDocumentBlockRequest,
            option: RequestOption = RequestOption()) -> GetDocumentBlockResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetDocumentBlockResponse = JSON.unmarshal(str(resp.content, UTF_8), GetDocumentBlockResponse)
        response.raw = resp

        return response

    def list(self, request: ListDocumentBlockRequest,
             option: RequestOption = RequestOption()) -> ListDocumentBlockResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListDocumentBlockResponse = JSON.unmarshal(str(resp.content, UTF_8), ListDocumentBlockResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchDocumentBlockRequest,
              option: RequestOption = RequestOption()) -> PatchDocumentBlockResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchDocumentBlockResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchDocumentBlockResponse)
        response.raw = resp

        return response
