# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.search.v2.model.create_data_source_request import CreateDataSourceRequest
from lark_oapi.api.search.v2.model.create_data_source_response import CreateDataSourceResponse
from lark_oapi.api.search.v2.model.delete_data_source_request import DeleteDataSourceRequest
from lark_oapi.api.search.v2.model.delete_data_source_response import DeleteDataSourceResponse
from lark_oapi.api.search.v2.model.get_data_source_request import GetDataSourceRequest
from lark_oapi.api.search.v2.model.get_data_source_response import GetDataSourceResponse
from lark_oapi.api.search.v2.model.list_data_source_request import ListDataSourceRequest
from lark_oapi.api.search.v2.model.list_data_source_response import ListDataSourceResponse
from lark_oapi.api.search.v2.model.patch_data_source_request import PatchDataSourceRequest
from lark_oapi.api.search.v2.model.patch_data_source_response import PatchDataSourceResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class DataSource(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateDataSourceRequest,
               option: RequestOption = RequestOption()) -> CreateDataSourceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateDataSourceResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateDataSourceResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteDataSourceRequest,
               option: RequestOption = RequestOption()) -> DeleteDataSourceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteDataSourceResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteDataSourceResponse)
        response.raw = resp

        return response

    def get(self, request: GetDataSourceRequest, option: RequestOption = RequestOption()) -> GetDataSourceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetDataSourceResponse = JSON.unmarshal(str(resp.content, UTF_8), GetDataSourceResponse)
        response.raw = resp

        return response

    def list(self, request: ListDataSourceRequest, option: RequestOption = RequestOption()) -> ListDataSourceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListDataSourceResponse = JSON.unmarshal(str(resp.content, UTF_8), ListDataSourceResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchDataSourceRequest,
              option: RequestOption = RequestOption()) -> PatchDataSourceResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchDataSourceResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchDataSourceResponse)
        response.raw = resp

        return response
