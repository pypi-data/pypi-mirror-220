# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.hire.v1.model.create_application_request import CreateApplicationRequest
from lark_oapi.api.hire.v1.model.create_application_response import CreateApplicationResponse
from lark_oapi.api.hire.v1.model.get_application_request import GetApplicationRequest
from lark_oapi.api.hire.v1.model.get_application_response import GetApplicationResponse
from lark_oapi.api.hire.v1.model.list_application_request import ListApplicationRequest
from lark_oapi.api.hire.v1.model.list_application_response import ListApplicationResponse
from lark_oapi.api.hire.v1.model.offer_application_request import OfferApplicationRequest
from lark_oapi.api.hire.v1.model.offer_application_response import OfferApplicationResponse
from lark_oapi.api.hire.v1.model.terminate_application_request import TerminateApplicationRequest
from lark_oapi.api.hire.v1.model.terminate_application_response import TerminateApplicationResponse
from lark_oapi.api.hire.v1.model.transfer_onboard_application_request import TransferOnboardApplicationRequest
from lark_oapi.api.hire.v1.model.transfer_onboard_application_response import TransferOnboardApplicationResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Application(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateApplicationRequest,
               option: RequestOption = RequestOption()) -> CreateApplicationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateApplicationResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateApplicationResponse)
        response.raw = resp

        return response

    def get(self, request: GetApplicationRequest, option: RequestOption = RequestOption()) -> GetApplicationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetApplicationResponse = JSON.unmarshal(str(resp.content, UTF_8), GetApplicationResponse)
        response.raw = resp

        return response

    def list(self, request: ListApplicationRequest, option: RequestOption = RequestOption()) -> ListApplicationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListApplicationResponse = JSON.unmarshal(str(resp.content, UTF_8), ListApplicationResponse)
        response.raw = resp

        return response

    def offer(self, request: OfferApplicationRequest,
              option: RequestOption = RequestOption()) -> OfferApplicationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: OfferApplicationResponse = JSON.unmarshal(str(resp.content, UTF_8), OfferApplicationResponse)
        response.raw = resp

        return response

    def terminate(self, request: TerminateApplicationRequest,
                  option: RequestOption = RequestOption()) -> TerminateApplicationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: TerminateApplicationResponse = JSON.unmarshal(str(resp.content, UTF_8), TerminateApplicationResponse)
        response.raw = resp

        return response

    def transfer_onboard(self, request: TransferOnboardApplicationRequest,
                         option: RequestOption = RequestOption()) -> TransferOnboardApplicationResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: TransferOnboardApplicationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                      TransferOnboardApplicationResponse)
        response.raw = resp

        return response
