# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.im.v1.model.delete_batch_message_request import DeleteBatchMessageRequest
from lark_oapi.api.im.v1.model.delete_batch_message_response import DeleteBatchMessageResponse
from lark_oapi.api.im.v1.model.get_progress_batch_message_request import GetProgressBatchMessageRequest
from lark_oapi.api.im.v1.model.get_progress_batch_message_response import GetProgressBatchMessageResponse
from lark_oapi.api.im.v1.model.read_user_batch_message_request import ReadUserBatchMessageRequest
from lark_oapi.api.im.v1.model.read_user_batch_message_response import ReadUserBatchMessageResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class BatchMessage(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def delete(self, request: DeleteBatchMessageRequest,
               option: RequestOption = RequestOption()) -> DeleteBatchMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteBatchMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteBatchMessageResponse)
        response.raw = resp

        return response

    def get_progress(self, request: GetProgressBatchMessageRequest,
                     option: RequestOption = RequestOption()) -> GetProgressBatchMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetProgressBatchMessageResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   GetProgressBatchMessageResponse)
        response.raw = resp

        return response

    def read_user(self, request: ReadUserBatchMessageRequest,
                  option: RequestOption = RequestOption()) -> ReadUserBatchMessageResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ReadUserBatchMessageResponse = JSON.unmarshal(str(resp.content, UTF_8), ReadUserBatchMessageResponse)
        response.raw = resp

        return response
