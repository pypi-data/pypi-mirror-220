# Code generated by Lark OpenAPI.

from typing import *

from lark_oapi.api.im.v1.model.create_chat_request import CreateChatRequest
from lark_oapi.api.im.v1.model.create_chat_response import CreateChatResponse
from lark_oapi.api.im.v1.model.delete_chat_request import DeleteChatRequest
from lark_oapi.api.im.v1.model.delete_chat_response import DeleteChatResponse
from lark_oapi.api.im.v1.model.get_chat_request import GetChatRequest
from lark_oapi.api.im.v1.model.get_chat_response import GetChatResponse
from lark_oapi.api.im.v1.model.link_chat_request import LinkChatRequest
from lark_oapi.api.im.v1.model.link_chat_response import LinkChatResponse
from lark_oapi.api.im.v1.model.list_chat_request import ListChatRequest
from lark_oapi.api.im.v1.model.list_chat_response import ListChatResponse
from lark_oapi.api.im.v1.model.search_chat_request import SearchChatRequest
from lark_oapi.api.im.v1.model.search_chat_response import SearchChatResponse
from lark_oapi.api.im.v1.model.update_chat_request import UpdateChatRequest
from lark_oapi.api.im.v1.model.update_chat_response import UpdateChatResponse
from lark_oapi.core import JSON
from lark_oapi.core.const import UTF_8
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.token import verify


class Chat(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateChatRequest, option: RequestOption = RequestOption()) -> CreateChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateChatResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateChatResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteChatRequest, option: RequestOption = RequestOption()) -> DeleteChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteChatResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteChatResponse)
        response.raw = resp

        return response

    def get(self, request: GetChatRequest, option: RequestOption = RequestOption()) -> GetChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetChatResponse = JSON.unmarshal(str(resp.content, UTF_8), GetChatResponse)
        response.raw = resp

        return response

    def link(self, request: LinkChatRequest, option: RequestOption = RequestOption()) -> LinkChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: LinkChatResponse = JSON.unmarshal(str(resp.content, UTF_8), LinkChatResponse)
        response.raw = resp

        return response

    def list(self, request: ListChatRequest, option: RequestOption = RequestOption()) -> ListChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListChatResponse = JSON.unmarshal(str(resp.content, UTF_8), ListChatResponse)
        response.raw = resp

        return response

    def search(self, request: SearchChatRequest, option: RequestOption = RequestOption()) -> SearchChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchChatResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchChatResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateChatRequest, option: RequestOption = RequestOption()) -> UpdateChatResponse:
        # 鉴权、获取token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateChatResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateChatResponse)
        response.raw = resp

        return response
