# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p2pd.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\np2pd.proto\x12\x11p2pclient.p2pd.pb\"\xc9\x05\n\x07Request\x12-\n\x04type\x18\x01 \x02(\x0e\x32\x1f.p2pclient.p2pd.pb.Request.Type\x12\x32\n\x07\x63onnect\x18\x02 \x01(\x0b\x32!.p2pclient.p2pd.pb.ConnectRequest\x12\x38\n\nstreamOpen\x18\x03 \x01(\x0b\x32$.p2pclient.p2pd.pb.StreamOpenRequest\x12>\n\rstreamHandler\x18\x04 \x01(\x0b\x32\'.p2pclient.p2pd.pb.StreamHandlerRequest\x12J\n\x13removeStreamHandler\x18\t \x01(\x0b\x32-.p2pclient.p2pd.pb.RemoveStreamHandlerRequest\x12*\n\x03\x64ht\x18\x05 \x01(\x0b\x32\x1d.p2pclient.p2pd.pb.DHTRequest\x12:\n\x0b\x63onnManager\x18\x06 \x01(\x0b\x32%.p2pclient.p2pd.pb.ConnManagerRequest\x12\x38\n\ndisconnect\x18\x07 \x01(\x0b\x32$.p2pclient.p2pd.pb.DisconnectRequest\x12,\n\x06pubsub\x18\x08 \x01(\x0b\x32\x1c.p2pclient.p2pd.pb.PSRequest\"\xc4\x01\n\x04Type\x12\x0c\n\x08IDENTIFY\x10\x00\x12\x0b\n\x07\x43ONNECT\x10\x01\x12\x0f\n\x0bSTREAM_OPEN\x10\x02\x12\x12\n\x0eSTREAM_HANDLER\x10\x03\x12\x19\n\x15REMOVE_STREAM_HANDLER\x10\n\x12\x07\n\x03\x44HT\x10\x04\x12\x0e\n\nLIST_PEERS\x10\x05\x12\x0f\n\x0b\x43ONNMANAGER\x10\x06\x12\x0e\n\nDISCONNECT\x10\x07\x12\n\n\x06PUBSUB\x10\x08\x12\x1b\n\x17PERSISTENT_CONN_UPGRADE\x10\t\"\xf8\x02\n\x08Response\x12.\n\x04type\x18\x01 \x02(\x0e\x32 .p2pclient.p2pd.pb.Response.Type\x12/\n\x05\x65rror\x18\x02 \x01(\x0b\x32 .p2pclient.p2pd.pb.ErrorResponse\x12\x31\n\nstreamInfo\x18\x03 \x01(\x0b\x32\x1d.p2pclient.p2pd.pb.StreamInfo\x12\x35\n\x08identify\x18\x04 \x01(\x0b\x32#.p2pclient.p2pd.pb.IdentifyResponse\x12+\n\x03\x64ht\x18\x05 \x01(\x0b\x32\x1e.p2pclient.p2pd.pb.DHTResponse\x12*\n\x05peers\x18\x06 \x03(\x0b\x32\x1b.p2pclient.p2pd.pb.PeerInfo\x12-\n\x06pubsub\x18\x07 \x01(\x0b\x32\x1d.p2pclient.p2pd.pb.PSResponse\"\x19\n\x04Type\x12\x06\n\x02OK\x10\x00\x12\t\n\x05\x45RROR\x10\x01\"\xf0\x02\n\x1bPersistentConnectionRequest\x12\x0e\n\x06\x63\x61llId\x18\x01 \x02(\x0c\x12\x44\n\x0f\x61\x64\x64UnaryHandler\x18\x02 \x01(\x0b\x32).p2pclient.p2pd.pb.AddUnaryHandlerRequestH\x00\x12J\n\x12removeUnaryHandler\x18\x06 \x01(\x0b\x32,.p2pclient.p2pd.pb.RemoveUnaryHandlerRequestH\x00\x12\x38\n\tcallUnary\x18\x03 \x01(\x0b\x32#.p2pclient.p2pd.pb.CallUnaryRequestH\x00\x12=\n\runaryResponse\x18\x04 \x01(\x0b\x32$.p2pclient.p2pd.pb.CallUnaryResponseH\x00\x12+\n\x06\x63\x61ncel\x18\x05 \x01(\x0b\x32\x19.p2pclient.p2pd.pb.CancelH\x00\x42\t\n\x07message\"\xa0\x02\n\x1cPersistentConnectionResponse\x12\x0e\n\x06\x63\x61llId\x18\x01 \x02(\x0c\x12\x41\n\x11\x63\x61llUnaryResponse\x18\x02 \x01(\x0b\x32$.p2pclient.p2pd.pb.CallUnaryResponseH\x00\x12>\n\x0frequestHandling\x18\x03 \x01(\x0b\x32#.p2pclient.p2pd.pb.CallUnaryRequestH\x00\x12\x35\n\x0b\x64\x61\x65monError\x18\x04 \x01(\x0b\x32\x1e.p2pclient.p2pd.pb.DaemonErrorH\x00\x12+\n\x06\x63\x61ncel\x18\x05 \x01(\x0b\x32\x19.p2pclient.p2pd.pb.CancelH\x00\x42\t\n\x07message\"-\n\x10IdentifyResponse\x12\n\n\x02id\x18\x01 \x02(\x0c\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0c\">\n\x0e\x43onnectRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0c\x12\x0f\n\x07timeout\x18\x03 \x01(\x03\"A\n\x11StreamOpenRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\r\n\x05proto\x18\x02 \x03(\t\x12\x0f\n\x07timeout\x18\x03 \x01(\x03\"E\n\x14StreamHandlerRequest\x12\x0c\n\x04\x61\x64\x64r\x18\x01 \x02(\x0c\x12\r\n\x05proto\x18\x02 \x03(\t\x12\x10\n\x08\x62\x61lanced\x18\x03 \x02(\x08\"9\n\x1aRemoveStreamHandlerRequest\x12\x0c\n\x04\x61\x64\x64r\x18\x01 \x02(\x0c\x12\r\n\x05proto\x18\x02 \x03(\t\"\x1c\n\rErrorResponse\x12\x0b\n\x03msg\x18\x01 \x02(\t\"7\n\nStreamInfo\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\x0c\n\x04\x61\x64\x64r\x18\x02 \x02(\x0c\x12\r\n\x05proto\x18\x03 \x02(\t\"\xcb\x02\n\nDHTRequest\x12\x30\n\x04type\x18\x01 \x02(\x0e\x32\".p2pclient.p2pd.pb.DHTRequest.Type\x12\x0c\n\x04peer\x18\x02 \x01(\x0c\x12\x0b\n\x03\x63id\x18\x03 \x01(\x0c\x12\x0b\n\x03key\x18\x04 \x01(\x0c\x12\r\n\x05value\x18\x05 \x01(\x0c\x12\r\n\x05\x63ount\x18\x06 \x01(\x05\x12\x0f\n\x07timeout\x18\x07 \x01(\x03\"\xb3\x01\n\x04Type\x12\r\n\tFIND_PEER\x10\x00\x12 \n\x1c\x46IND_PEERS_CONNECTED_TO_PEER\x10\x01\x12\x12\n\x0e\x46IND_PROVIDERS\x10\x02\x12\x15\n\x11GET_CLOSEST_PEERS\x10\x03\x12\x12\n\x0eGET_PUBLIC_KEY\x10\x04\x12\r\n\tGET_VALUE\x10\x05\x12\x10\n\x0cSEARCH_VALUE\x10\x06\x12\r\n\tPUT_VALUE\x10\x07\x12\x0b\n\x07PROVIDE\x10\x08\"\xa1\x01\n\x0b\x44HTResponse\x12\x31\n\x04type\x18\x01 \x02(\x0e\x32#.p2pclient.p2pd.pb.DHTResponse.Type\x12)\n\x04peer\x18\x02 \x01(\x0b\x32\x1b.p2pclient.p2pd.pb.PeerInfo\x12\r\n\x05value\x18\x03 \x01(\x0c\"%\n\x04Type\x12\t\n\x05\x42\x45GIN\x10\x00\x12\t\n\x05VALUE\x10\x01\x12\x07\n\x03\x45ND\x10\x02\"%\n\x08PeerInfo\x12\n\n\x02id\x18\x01 \x02(\x0c\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\x0c\"\xa9\x01\n\x12\x43onnManagerRequest\x12\x38\n\x04type\x18\x01 \x02(\x0e\x32*.p2pclient.p2pd.pb.ConnManagerRequest.Type\x12\x0c\n\x04peer\x18\x02 \x01(\x0c\x12\x0b\n\x03tag\x18\x03 \x01(\t\x12\x0e\n\x06weight\x18\x04 \x01(\x03\".\n\x04Type\x12\x0c\n\x08TAG_PEER\x10\x00\x12\x0e\n\nUNTAG_PEER\x10\x01\x12\x08\n\x04TRIM\x10\x02\"!\n\x11\x44isconnectRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\"\x9d\x01\n\tPSRequest\x12/\n\x04type\x18\x01 \x02(\x0e\x32!.p2pclient.p2pd.pb.PSRequest.Type\x12\r\n\x05topic\x18\x02 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\"B\n\x04Type\x12\x0e\n\nGET_TOPICS\x10\x00\x12\x0e\n\nLIST_PEERS\x10\x01\x12\x0b\n\x07PUBLISH\x10\x02\x12\r\n\tSUBSCRIBE\x10\x03\"h\n\tPSMessage\x12\x0c\n\x04\x66rom\x18\x01 \x01(\x0c\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x12\r\n\x05seqno\x18\x03 \x01(\x0c\x12\x10\n\x08topicIDs\x18\x04 \x03(\t\x12\x11\n\tsignature\x18\x05 \x01(\x0c\x12\x0b\n\x03key\x18\x06 \x01(\x0c\"-\n\nPSResponse\x12\x0e\n\x06topics\x18\x01 \x03(\t\x12\x0f\n\x07peerIDs\x18\x02 \x03(\x0c\"=\n\x10\x43\x61llUnaryRequest\x12\x0c\n\x04peer\x18\x01 \x02(\x0c\x12\r\n\x05proto\x18\x02 \x02(\t\x12\x0c\n\x04\x64\x61ta\x18\x03 \x02(\x0c\"B\n\x11\x43\x61llUnaryResponse\x12\x12\n\x08response\x18\x01 \x01(\x0cH\x00\x12\x0f\n\x05\x65rror\x18\x02 \x01(\x0cH\x00\x42\x08\n\x06result\"9\n\x16\x41\x64\x64UnaryHandlerRequest\x12\r\n\x05proto\x18\x01 \x02(\t\x12\x10\n\x08\x62\x61lanced\x18\x02 \x02(\x08\"*\n\x19RemoveUnaryHandlerRequest\x12\r\n\x05proto\x18\x01 \x02(\t\"\x1e\n\x0b\x44\x61\x65monError\x12\x0f\n\x07message\x18\x01 \x01(\t\"\x08\n\x06\x43\x61ncel\"\x1b\n\x08RPCError\x12\x0f\n\x07message\x18\x01 \x01(\t')



_REQUEST = DESCRIPTOR.message_types_by_name['Request']
_RESPONSE = DESCRIPTOR.message_types_by_name['Response']
_PERSISTENTCONNECTIONREQUEST = DESCRIPTOR.message_types_by_name['PersistentConnectionRequest']
_PERSISTENTCONNECTIONRESPONSE = DESCRIPTOR.message_types_by_name['PersistentConnectionResponse']
_IDENTIFYRESPONSE = DESCRIPTOR.message_types_by_name['IdentifyResponse']
_CONNECTREQUEST = DESCRIPTOR.message_types_by_name['ConnectRequest']
_STREAMOPENREQUEST = DESCRIPTOR.message_types_by_name['StreamOpenRequest']
_STREAMHANDLERREQUEST = DESCRIPTOR.message_types_by_name['StreamHandlerRequest']
_REMOVESTREAMHANDLERREQUEST = DESCRIPTOR.message_types_by_name['RemoveStreamHandlerRequest']
_ERRORRESPONSE = DESCRIPTOR.message_types_by_name['ErrorResponse']
_STREAMINFO = DESCRIPTOR.message_types_by_name['StreamInfo']
_DHTREQUEST = DESCRIPTOR.message_types_by_name['DHTRequest']
_DHTRESPONSE = DESCRIPTOR.message_types_by_name['DHTResponse']
_PEERINFO = DESCRIPTOR.message_types_by_name['PeerInfo']
_CONNMANAGERREQUEST = DESCRIPTOR.message_types_by_name['ConnManagerRequest']
_DISCONNECTREQUEST = DESCRIPTOR.message_types_by_name['DisconnectRequest']
_PSREQUEST = DESCRIPTOR.message_types_by_name['PSRequest']
_PSMESSAGE = DESCRIPTOR.message_types_by_name['PSMessage']
_PSRESPONSE = DESCRIPTOR.message_types_by_name['PSResponse']
_CALLUNARYREQUEST = DESCRIPTOR.message_types_by_name['CallUnaryRequest']
_CALLUNARYRESPONSE = DESCRIPTOR.message_types_by_name['CallUnaryResponse']
_ADDUNARYHANDLERREQUEST = DESCRIPTOR.message_types_by_name['AddUnaryHandlerRequest']
_REMOVEUNARYHANDLERREQUEST = DESCRIPTOR.message_types_by_name['RemoveUnaryHandlerRequest']
_DAEMONERROR = DESCRIPTOR.message_types_by_name['DaemonError']
_CANCEL = DESCRIPTOR.message_types_by_name['Cancel']
_RPCERROR = DESCRIPTOR.message_types_by_name['RPCError']
_REQUEST_TYPE = _REQUEST.enum_types_by_name['Type']
_RESPONSE_TYPE = _RESPONSE.enum_types_by_name['Type']
_DHTREQUEST_TYPE = _DHTREQUEST.enum_types_by_name['Type']
_DHTRESPONSE_TYPE = _DHTRESPONSE.enum_types_by_name['Type']
_CONNMANAGERREQUEST_TYPE = _CONNMANAGERREQUEST.enum_types_by_name['Type']
_PSREQUEST_TYPE = _PSREQUEST.enum_types_by_name['Type']
Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), {
  'DESCRIPTOR' : _REQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.Request)
  })
_sym_db.RegisterMessage(Request)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), {
  'DESCRIPTOR' : _RESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.Response)
  })
_sym_db.RegisterMessage(Response)

PersistentConnectionRequest = _reflection.GeneratedProtocolMessageType('PersistentConnectionRequest', (_message.Message,), {
  'DESCRIPTOR' : _PERSISTENTCONNECTIONREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.PersistentConnectionRequest)
  })
_sym_db.RegisterMessage(PersistentConnectionRequest)

PersistentConnectionResponse = _reflection.GeneratedProtocolMessageType('PersistentConnectionResponse', (_message.Message,), {
  'DESCRIPTOR' : _PERSISTENTCONNECTIONRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.PersistentConnectionResponse)
  })
_sym_db.RegisterMessage(PersistentConnectionResponse)

IdentifyResponse = _reflection.GeneratedProtocolMessageType('IdentifyResponse', (_message.Message,), {
  'DESCRIPTOR' : _IDENTIFYRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.IdentifyResponse)
  })
_sym_db.RegisterMessage(IdentifyResponse)

ConnectRequest = _reflection.GeneratedProtocolMessageType('ConnectRequest', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.ConnectRequest)
  })
_sym_db.RegisterMessage(ConnectRequest)

StreamOpenRequest = _reflection.GeneratedProtocolMessageType('StreamOpenRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMOPENREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.StreamOpenRequest)
  })
_sym_db.RegisterMessage(StreamOpenRequest)

StreamHandlerRequest = _reflection.GeneratedProtocolMessageType('StreamHandlerRequest', (_message.Message,), {
  'DESCRIPTOR' : _STREAMHANDLERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.StreamHandlerRequest)
  })
_sym_db.RegisterMessage(StreamHandlerRequest)

RemoveStreamHandlerRequest = _reflection.GeneratedProtocolMessageType('RemoveStreamHandlerRequest', (_message.Message,), {
  'DESCRIPTOR' : _REMOVESTREAMHANDLERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.RemoveStreamHandlerRequest)
  })
_sym_db.RegisterMessage(RemoveStreamHandlerRequest)

ErrorResponse = _reflection.GeneratedProtocolMessageType('ErrorResponse', (_message.Message,), {
  'DESCRIPTOR' : _ERRORRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.ErrorResponse)
  })
_sym_db.RegisterMessage(ErrorResponse)

StreamInfo = _reflection.GeneratedProtocolMessageType('StreamInfo', (_message.Message,), {
  'DESCRIPTOR' : _STREAMINFO,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.StreamInfo)
  })
_sym_db.RegisterMessage(StreamInfo)

DHTRequest = _reflection.GeneratedProtocolMessageType('DHTRequest', (_message.Message,), {
  'DESCRIPTOR' : _DHTREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.DHTRequest)
  })
_sym_db.RegisterMessage(DHTRequest)

DHTResponse = _reflection.GeneratedProtocolMessageType('DHTResponse', (_message.Message,), {
  'DESCRIPTOR' : _DHTRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.DHTResponse)
  })
_sym_db.RegisterMessage(DHTResponse)

PeerInfo = _reflection.GeneratedProtocolMessageType('PeerInfo', (_message.Message,), {
  'DESCRIPTOR' : _PEERINFO,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.PeerInfo)
  })
_sym_db.RegisterMessage(PeerInfo)

ConnManagerRequest = _reflection.GeneratedProtocolMessageType('ConnManagerRequest', (_message.Message,), {
  'DESCRIPTOR' : _CONNMANAGERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.ConnManagerRequest)
  })
_sym_db.RegisterMessage(ConnManagerRequest)

DisconnectRequest = _reflection.GeneratedProtocolMessageType('DisconnectRequest', (_message.Message,), {
  'DESCRIPTOR' : _DISCONNECTREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.DisconnectRequest)
  })
_sym_db.RegisterMessage(DisconnectRequest)

PSRequest = _reflection.GeneratedProtocolMessageType('PSRequest', (_message.Message,), {
  'DESCRIPTOR' : _PSREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.PSRequest)
  })
_sym_db.RegisterMessage(PSRequest)

PSMessage = _reflection.GeneratedProtocolMessageType('PSMessage', (_message.Message,), {
  'DESCRIPTOR' : _PSMESSAGE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.PSMessage)
  })
_sym_db.RegisterMessage(PSMessage)

PSResponse = _reflection.GeneratedProtocolMessageType('PSResponse', (_message.Message,), {
  'DESCRIPTOR' : _PSRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.PSResponse)
  })
_sym_db.RegisterMessage(PSResponse)

CallUnaryRequest = _reflection.GeneratedProtocolMessageType('CallUnaryRequest', (_message.Message,), {
  'DESCRIPTOR' : _CALLUNARYREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.CallUnaryRequest)
  })
_sym_db.RegisterMessage(CallUnaryRequest)

CallUnaryResponse = _reflection.GeneratedProtocolMessageType('CallUnaryResponse', (_message.Message,), {
  'DESCRIPTOR' : _CALLUNARYRESPONSE,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.CallUnaryResponse)
  })
_sym_db.RegisterMessage(CallUnaryResponse)

AddUnaryHandlerRequest = _reflection.GeneratedProtocolMessageType('AddUnaryHandlerRequest', (_message.Message,), {
  'DESCRIPTOR' : _ADDUNARYHANDLERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.AddUnaryHandlerRequest)
  })
_sym_db.RegisterMessage(AddUnaryHandlerRequest)

RemoveUnaryHandlerRequest = _reflection.GeneratedProtocolMessageType('RemoveUnaryHandlerRequest', (_message.Message,), {
  'DESCRIPTOR' : _REMOVEUNARYHANDLERREQUEST,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.RemoveUnaryHandlerRequest)
  })
_sym_db.RegisterMessage(RemoveUnaryHandlerRequest)

DaemonError = _reflection.GeneratedProtocolMessageType('DaemonError', (_message.Message,), {
  'DESCRIPTOR' : _DAEMONERROR,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.DaemonError)
  })
_sym_db.RegisterMessage(DaemonError)

Cancel = _reflection.GeneratedProtocolMessageType('Cancel', (_message.Message,), {
  'DESCRIPTOR' : _CANCEL,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.Cancel)
  })
_sym_db.RegisterMessage(Cancel)

RPCError = _reflection.GeneratedProtocolMessageType('RPCError', (_message.Message,), {
  'DESCRIPTOR' : _RPCERROR,
  '__module__' : 'p2pd_pb2'
  # @@protoc_insertion_point(class_scope:p2pclient.p2pd.pb.RPCError)
  })
_sym_db.RegisterMessage(RPCError)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _REQUEST._serialized_start=34
  _REQUEST._serialized_end=747
  _REQUEST_TYPE._serialized_start=551
  _REQUEST_TYPE._serialized_end=747
  _RESPONSE._serialized_start=750
  _RESPONSE._serialized_end=1126
  _RESPONSE_TYPE._serialized_start=1101
  _RESPONSE_TYPE._serialized_end=1126
  _PERSISTENTCONNECTIONREQUEST._serialized_start=1129
  _PERSISTENTCONNECTIONREQUEST._serialized_end=1497
  _PERSISTENTCONNECTIONRESPONSE._serialized_start=1500
  _PERSISTENTCONNECTIONRESPONSE._serialized_end=1788
  _IDENTIFYRESPONSE._serialized_start=1790
  _IDENTIFYRESPONSE._serialized_end=1835
  _CONNECTREQUEST._serialized_start=1837
  _CONNECTREQUEST._serialized_end=1899
  _STREAMOPENREQUEST._serialized_start=1901
  _STREAMOPENREQUEST._serialized_end=1966
  _STREAMHANDLERREQUEST._serialized_start=1968
  _STREAMHANDLERREQUEST._serialized_end=2037
  _REMOVESTREAMHANDLERREQUEST._serialized_start=2039
  _REMOVESTREAMHANDLERREQUEST._serialized_end=2096
  _ERRORRESPONSE._serialized_start=2098
  _ERRORRESPONSE._serialized_end=2126
  _STREAMINFO._serialized_start=2128
  _STREAMINFO._serialized_end=2183
  _DHTREQUEST._serialized_start=2186
  _DHTREQUEST._serialized_end=2517
  _DHTREQUEST_TYPE._serialized_start=2338
  _DHTREQUEST_TYPE._serialized_end=2517
  _DHTRESPONSE._serialized_start=2520
  _DHTRESPONSE._serialized_end=2681
  _DHTRESPONSE_TYPE._serialized_start=2644
  _DHTRESPONSE_TYPE._serialized_end=2681
  _PEERINFO._serialized_start=2683
  _PEERINFO._serialized_end=2720
  _CONNMANAGERREQUEST._serialized_start=2723
  _CONNMANAGERREQUEST._serialized_end=2892
  _CONNMANAGERREQUEST_TYPE._serialized_start=2846
  _CONNMANAGERREQUEST_TYPE._serialized_end=2892
  _DISCONNECTREQUEST._serialized_start=2894
  _DISCONNECTREQUEST._serialized_end=2927
  _PSREQUEST._serialized_start=2930
  _PSREQUEST._serialized_end=3087
  _PSREQUEST_TYPE._serialized_start=3021
  _PSREQUEST_TYPE._serialized_end=3087
  _PSMESSAGE._serialized_start=3089
  _PSMESSAGE._serialized_end=3193
  _PSRESPONSE._serialized_start=3195
  _PSRESPONSE._serialized_end=3240
  _CALLUNARYREQUEST._serialized_start=3242
  _CALLUNARYREQUEST._serialized_end=3303
  _CALLUNARYRESPONSE._serialized_start=3305
  _CALLUNARYRESPONSE._serialized_end=3371
  _ADDUNARYHANDLERREQUEST._serialized_start=3373
  _ADDUNARYHANDLERREQUEST._serialized_end=3430
  _REMOVEUNARYHANDLERREQUEST._serialized_start=3432
  _REMOVEUNARYHANDLERREQUEST._serialized_end=3474
  _DAEMONERROR._serialized_start=3476
  _DAEMONERROR._serialized_end=3506
  _CANCEL._serialized_start=3508
  _CANCEL._serialized_end=3516
  _RPCERROR._serialized_start=3518
  _RPCERROR._serialized_end=3545
# @@protoc_insertion_point(module_scope)
