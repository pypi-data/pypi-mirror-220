Metadata-Version: 2.1
Name: formal-sdk
Version: 0.13.0
Summary: Formal SDK
Author-email: Formal <hello@joinformal.com>
License: Copyright (c) 2018 The Python Packaging Authority
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/formalco
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests (>=2.26.0)

# Formal Admin Python SDK


This is the Python SDK for the Formal Admin API.



## Installing
    pip install formal-sdk

## Example Use

Create and Get a Native Role

```python
import os
import formal_sdk

if __name__ == '__main__':

    dataStoreId = ""
    nativeRoleId = ""
    nativeRoleSecret = ""
    useAsDefault = True
    apiKey = os.environ.get('TEST_API_KEY')
    
    newClient = formal_sdk.Client(apiKey)
    # Create Native Role
    createdRole = newClient.DataStoreClient.CreateNativeRole(dataStoreId=dataStoreId, nativeRoleId=nativeRoleId, nativeRoleSecret=nativeRoleSecret, useAsDefault=useAsDefault)
    
    # Get Native Role    
    previousRole = newClient.DataStoreClient.GetNativeRole(dataStoreId=dataStoreId, nativeRoleId=nativeRoleId)

    print(f'DataStoreId: {previousRole.dataStoreId}')
    print(f'NativeRoleId: {previousRole.nativeRoleId}')
    print(f'NativeRoleSecret: {previousRole.nativeRoleSecret}')
    print(f'UseAsDefault: {previousRole.useAsDefault}')

    # Get sidecar tls certificate and private key
    sidecarId = ""
    certificate, privateKey, fullSecret = newClient.SidecarClient.GetTLSCertificate(sidecarId)
```


```python
import os
import formal_sdk


from formal_sdk import inventory

if __name__ == '__main__':

    datastoreId = ""
    apiKey = os.environ.get('API_KEY')

    newClient = formal_sdk.Client(apiKey).InventoryClient

    column_dict = {
        "path": "database.schema.table.column",
        "name": "column",
        "dataType": "string"
    }

    # Create Inventory Object
    createInventoryObjectRequest = inventory.CreateInventoryObjectRequest(
        datastoreId=datastoreId,
        objectType="column",
        column=column_dict
    )
    newClient.CreateInventoryObject(createInventoryObjectRequest)

    # Get Inventory Object
    getInventoryObjectRequest = inventory.GetInventoryObjectRequest(datastoreId=datastoreId,
                                                                               path="database.schema.table.column")
    inventoryColumn = newClient.GetInventoryObject(getInventoryObjectRequest)

    print(f'DatastoreId: {inventoryColumn.datastoreId}')
    print(f'Path: {inventoryColumn.path}')
    print(f'Name: {inventoryColumn.name}')
    print(f'DataType: {inventoryColumn.dataType}')

    # Create and Get Inventory Tag
    createInventoryTagRequest = inventory.CreateInventoryTagRequest(name="important")
    createInventoryTagResponse = newClient.CreateInventoryTag(createInventoryTagRequest)

    inventoryTags = newClient.GetInventoryTags()
    for tag in inventoryTags.tags:
        print(f'TagId: {tag.id}')
        print(f'TagName: {tag.name}')
        print(f'CreatedAt: {tag.createdAt}')
        newClient.DeleteInventoryTag(id=tag.id)


```
