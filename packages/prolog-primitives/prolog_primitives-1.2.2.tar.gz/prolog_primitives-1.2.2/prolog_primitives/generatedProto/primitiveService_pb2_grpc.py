# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import basicMessages_pb2 as basicMessages__pb2
from . import primitiveService_pb2 as primitiveService__pb2


class GenericPrimitiveServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.callPrimitive = channel.stream_stream(
                '/primitives.GenericPrimitiveService/callPrimitive',
                request_serializer=primitiveService__pb2.SolverMsg.SerializeToString,
                response_deserializer=primitiveService__pb2.GeneratorMsg.FromString,
                )
        self.getSignature = channel.unary_unary(
                '/primitives.GenericPrimitiveService/getSignature',
                request_serializer=basicMessages__pb2.EmptyMsg.SerializeToString,
                response_deserializer=basicMessages__pb2.SignatureMsg.FromString,
                )


class GenericPrimitiveServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def callPrimitive(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSignature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GenericPrimitiveServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'callPrimitive': grpc.stream_stream_rpc_method_handler(
                    servicer.callPrimitive,
                    request_deserializer=primitiveService__pb2.SolverMsg.FromString,
                    response_serializer=primitiveService__pb2.GeneratorMsg.SerializeToString,
            ),
            'getSignature': grpc.unary_unary_rpc_method_handler(
                    servicer.getSignature,
                    request_deserializer=basicMessages__pb2.EmptyMsg.FromString,
                    response_serializer=basicMessages__pb2.SignatureMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'primitives.GenericPrimitiveService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GenericPrimitiveService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def callPrimitive(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/primitives.GenericPrimitiveService/callPrimitive',
            primitiveService__pb2.SolverMsg.SerializeToString,
            primitiveService__pb2.GeneratorMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSignature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/primitives.GenericPrimitiveService/getSignature',
            basicMessages__pb2.EmptyMsg.SerializeToString,
            basicMessages__pb2.SignatureMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
