"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2020 Alibaba Group Holding Limited. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import collections.abc
import graphscope.proto.message_pb2
import grpc

class CoordinatorServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    ConnectSession: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.ConnectSessionRequest,
        graphscope.proto.message_pb2.ConnectSessionResponse,
    ]
    """Connect a session."""
    HeartBeat: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.HeartBeatRequest,
        graphscope.proto.message_pb2.HeartBeatResponse,
    ]
    """Heart Beat between client and coordinator"""
    RunStep: grpc.StreamStreamMultiCallable[
        graphscope.proto.message_pb2.RunStepRequest,
        graphscope.proto.message_pb2.RunStepResponse,
    ]
    """Drives the graph computation."""
    FetchLogs: grpc.UnaryStreamMultiCallable[
        graphscope.proto.message_pb2.FetchLogsRequest,
        graphscope.proto.message_pb2.FetchLogsResponse,
    ]
    """Fetch analytical engine logs."""
    CloseSession: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CloseSessionRequest,
        graphscope.proto.message_pb2.CloseSessionResponse,
    ]
    """Closes a session."""
    AddLib: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.AddLibRequest,
        graphscope.proto.message_pb2.AddLibResponse,
    ]
    """Distribute the specified libary to servers"""
    CreateAnalyticalInstance: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CreateAnalyticalInstanceRequest,
        graphscope.proto.message_pb2.CreateAnalyticalInstanceResponse,
    ]
    CreateInteractiveInstance: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CreateInteractiveInstanceRequest,
        graphscope.proto.message_pb2.CreateInteractiveInstanceResponse,
    ]
    CreateLearningInstance: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CreateLearningInstanceRequest,
        graphscope.proto.message_pb2.CreateLearningInstanceResponse,
    ]
    CloseAnalyticalInstance: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CloseAnalyticalInstanceRequest,
        graphscope.proto.message_pb2.CloseAnalyticalInstanceResponse,
    ]
    CloseInteractiveInstance: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CloseInteractiveInstanceRequest,
        graphscope.proto.message_pb2.CloseInteractiveInstanceResponse,
    ]
    CloseLearningInstance: grpc.UnaryUnaryMultiCallable[
        graphscope.proto.message_pb2.CloseLearningInstanceRequest,
        graphscope.proto.message_pb2.CloseLearningInstanceResponse,
    ]

class CoordinatorServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ConnectSession(
        self,
        request: graphscope.proto.message_pb2.ConnectSessionRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.ConnectSessionResponse:
        """Connect a session."""
    @abc.abstractmethod
    def HeartBeat(
        self,
        request: graphscope.proto.message_pb2.HeartBeatRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.HeartBeatResponse:
        """Heart Beat between client and coordinator"""
    @abc.abstractmethod
    def RunStep(
        self,
        request_iterator: collections.abc.Iterator[graphscope.proto.message_pb2.RunStepRequest],
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[graphscope.proto.message_pb2.RunStepResponse]:
        """Drives the graph computation."""
    @abc.abstractmethod
    def FetchLogs(
        self,
        request: graphscope.proto.message_pb2.FetchLogsRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[graphscope.proto.message_pb2.FetchLogsResponse]:
        """Fetch analytical engine logs."""
    @abc.abstractmethod
    def CloseSession(
        self,
        request: graphscope.proto.message_pb2.CloseSessionRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CloseSessionResponse:
        """Closes a session."""
    @abc.abstractmethod
    def AddLib(
        self,
        request: graphscope.proto.message_pb2.AddLibRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.AddLibResponse:
        """Distribute the specified libary to servers"""
    @abc.abstractmethod
    def CreateAnalyticalInstance(
        self,
        request: graphscope.proto.message_pb2.CreateAnalyticalInstanceRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CreateAnalyticalInstanceResponse: ...
    @abc.abstractmethod
    def CreateInteractiveInstance(
        self,
        request: graphscope.proto.message_pb2.CreateInteractiveInstanceRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CreateInteractiveInstanceResponse: ...
    @abc.abstractmethod
    def CreateLearningInstance(
        self,
        request: graphscope.proto.message_pb2.CreateLearningInstanceRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CreateLearningInstanceResponse: ...
    @abc.abstractmethod
    def CloseAnalyticalInstance(
        self,
        request: graphscope.proto.message_pb2.CloseAnalyticalInstanceRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CloseAnalyticalInstanceResponse: ...
    @abc.abstractmethod
    def CloseInteractiveInstance(
        self,
        request: graphscope.proto.message_pb2.CloseInteractiveInstanceRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CloseInteractiveInstanceResponse: ...
    @abc.abstractmethod
    def CloseLearningInstance(
        self,
        request: graphscope.proto.message_pb2.CloseLearningInstanceRequest,
        context: grpc.ServicerContext,
    ) -> graphscope.proto.message_pb2.CloseLearningInstanceResponse: ...

def add_CoordinatorServiceServicer_to_server(servicer: CoordinatorServiceServicer, server: grpc.Server) -> None: ...
