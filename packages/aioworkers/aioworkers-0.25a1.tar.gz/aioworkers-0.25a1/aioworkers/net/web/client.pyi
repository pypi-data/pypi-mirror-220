import urllib.request
from _typeshed import Incomplete
from aioworkers.core.base import ExecutorEntity as ExecutorEntity
from aioworkers.http import URL as URL
from http.client import HTTPResponse
from typing import Any, Awaitable, Callable, Mapping, Optional, Tuple, Union

logger: Incomplete

class Request:
    def __init__(self, session: Session, *args, **kwargs) -> None: ...
    async def __aenter__(self) -> Response: ...
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None: ...

class Response:
    def __init__(self, response: HTTPResponse, session: Session) -> None: ...
    @property
    def status(self): ...
    @property
    def reason(self): ...
    @property
    def headers(self): ...
    async def read(self) -> bytes: ...
    def isclosed(self): ...
    async def close(self): ...

class Session:
    run: Incomplete
    opener: Incomplete
    def __init__(self, runner: Callable[..., Awaitable[Any]], headers: Optional[Mapping] = ..., conn_timeout: float = ..., read_timeout: float = ..., handlers: Optional[Tuple[urllib.request.BaseHandler]] = ...) -> None: ...
    @classmethod
    def from_entity(cls, entity: ExecutorEntity, **kwargs) -> Session: ...
    def request(self, url: Union[str, URL], method: str = ..., **kwargs) -> Request: ...
    async def close(self) -> None: ...
