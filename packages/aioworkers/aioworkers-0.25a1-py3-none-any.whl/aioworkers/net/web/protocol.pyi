import asyncio
from .headers import CONNECTION as CONNECTION, CONTENT_LENGTH as CONTENT_LENGTH
from .server import WebServer as WebServer
from _typeshed import Incomplete
from typing import Dict, Mapping

logger: Incomplete
HEADER_CONNECTION: Incomplete
HEADERS_LOWER: Mapping[bytes, bytes]

class ASGIResponseSender:
    SERVER: bytes
    KEEP_ALIVE: bytes
    CLOSE: bytes
    SEP: bytes
    SET: bytes
    status_reason: Mapping[int, bytes]
    def __init__(self, transport: asyncio.Transport, server: WebServer, scope: Dict) -> None: ...
    def __call__(self, message: Mapping) -> ASGIResponseSender: ...
    def __await__(self): ...

class Protocol(asyncio.Protocol):
    def __init__(self, server) -> None: ...
    @classmethod
    def factory(cls, **kwargs): ...
    def connection_made(self, transport) -> None: ...
    def data_received(self, data) -> None: ...
    def on_message_begin(self) -> None: ...
    def on_url(self, url: bytes): ...
    def on_header(self, name: bytes, value: bytes): ...
    def on_headers_complete(self) -> None: ...
    def on_body(self, body: bytes): ...
    def on_message_complete(self) -> None: ...
    def connection_lost(self, exc) -> None: ...
    def on_chunk_header(self) -> None: ...
    def on_chunk_complete(self) -> None: ...
