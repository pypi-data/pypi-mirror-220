from ..uri import URL as URL
from .app import Application as Application
from .exceptions import HttpException as HttpException
from _typeshed import Incomplete
from aioworkers.core.context import Context as Context
from aioworkers.core.formatter import registry as registry
from aioworkers.utils import cached_property as cached_property
from typing import Any, Awaitable, Callable, Mapping, Optional, Sequence, Tuple

class Request:
    context: Incomplete
    app: Incomplete
    def __init__(self, scope: Mapping, receive: Callable[[], Awaitable], send: Callable[[Mapping], Awaitable], context: Context, app: Application) -> None: ...
    async def read(self): ...
    def method(self) -> str: ...
    def url(self) -> URL: ...
    def content_length(self) -> int: ...
    def headers(self) -> Mapping[str, str]: ...
    def response(self, data: Any = ..., status: int = ..., reason: str = ..., format: Optional[str] = ..., headers: Sequence[Tuple[str, str]] = ...): ...
