from .. import utils as utils
from ..core.formatter import FormattedEntity as FormattedEntity
from .base import Worker as Worker
from _typeshed import Incomplete
from aioworkers.core.config import ValueExtractor as ValueExtractor
from asyncio.subprocess import Process
from typing import Any, Coroutine, Optional, Tuple

class Subprocess(FormattedEntity, Worker):
    params: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def set_config(self, config: ValueExtractor): ...
    async def init(self) -> None: ...
    @property
    def process(self) -> Optional[Process]: ...
    def create_subprocess(self, *args) -> Coroutine[Any, Any, Process]: ...
    def make_command(self, value: Any = ...) -> Tuple[str, ...]: ...
    async def run_cmd(self, *args, **kwargs): ...
    async def work(self): ...
    async def start(self): ...
    async def stop(self, force: bool = ...) -> None: ...
