# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from onelogin import schemas  # noqa: F401


class Connector(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            name = schemas.StrSchema
            icon_url = schemas.StrSchema
        
            @staticmethod
            def auth_method() -> typing.Type['AuthMethod']:
                return AuthMethod
            allows_new_parameters = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "icon_url": icon_url,
                "auth_method": auth_method,
                "allows_new_parameters": allows_new_parameters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon_url"]) -> MetaOapg.properties.icon_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_method"]) -> 'AuthMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allows_new_parameters"]) -> MetaOapg.properties.allows_new_parameters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "icon_url", "auth_method", "allows_new_parameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon_url"]) -> typing.Union[MetaOapg.properties.icon_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_method"]) -> typing.Union['AuthMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allows_new_parameters"]) -> typing.Union[MetaOapg.properties.allows_new_parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "icon_url", "auth_method", "allows_new_parameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        icon_url: typing.Union[MetaOapg.properties.icon_url, str, schemas.Unset] = schemas.unset,
        auth_method: typing.Union['AuthMethod', schemas.Unset] = schemas.unset,
        allows_new_parameters: typing.Union[MetaOapg.properties.allows_new_parameters, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Connector':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            icon_url=icon_url,
            auth_method=auth_method,
            allows_new_parameters=allows_new_parameters,
            _configuration=_configuration,
            **kwargs,
        )

from onelogin.model.auth_method import AuthMethod
