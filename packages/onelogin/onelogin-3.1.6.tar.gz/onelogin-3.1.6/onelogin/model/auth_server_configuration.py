# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from onelogin import schemas  # noqa: F401


class AuthServerConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Authorization server configuration
    """


    class MetaOapg:
        required = {
            "resource_identifier",
            "audiences",
        }
        
        class properties:
            
            
            class audiences(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'audiences':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            resource_identifier = schemas.StrSchema
            refresh_token_expiration_minutes = schemas.IntSchema
            access_token_expiration_minutes = schemas.IntSchema
            __annotations__ = {
                "audiences": audiences,
                "resource_identifier": resource_identifier,
                "refresh_token_expiration_minutes": refresh_token_expiration_minutes,
                "access_token_expiration_minutes": access_token_expiration_minutes,
            }
    
    resource_identifier: MetaOapg.properties.resource_identifier
    audiences: MetaOapg.properties.audiences
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audiences"]) -> MetaOapg.properties.audiences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_identifier"]) -> MetaOapg.properties.resource_identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refresh_token_expiration_minutes"]) -> MetaOapg.properties.refresh_token_expiration_minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_token_expiration_minutes"]) -> MetaOapg.properties.access_token_expiration_minutes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["audiences", "resource_identifier", "refresh_token_expiration_minutes", "access_token_expiration_minutes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audiences"]) -> MetaOapg.properties.audiences: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_identifier"]) -> MetaOapg.properties.resource_identifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refresh_token_expiration_minutes"]) -> typing.Union[MetaOapg.properties.refresh_token_expiration_minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_token_expiration_minutes"]) -> typing.Union[MetaOapg.properties.access_token_expiration_minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["audiences", "resource_identifier", "refresh_token_expiration_minutes", "access_token_expiration_minutes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        resource_identifier: typing.Union[MetaOapg.properties.resource_identifier, str, ],
        audiences: typing.Union[MetaOapg.properties.audiences, list, tuple, ],
        refresh_token_expiration_minutes: typing.Union[MetaOapg.properties.refresh_token_expiration_minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        access_token_expiration_minutes: typing.Union[MetaOapg.properties.access_token_expiration_minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthServerConfiguration':
        return super().__new__(
            cls,
            *_args,
            resource_identifier=resource_identifier,
            audiences=audiences,
            refresh_token_expiration_minutes=refresh_token_expiration_minutes,
            access_token_expiration_minutes=access_token_expiration_minutes,
            _configuration=_configuration,
            **kwargs,
        )
