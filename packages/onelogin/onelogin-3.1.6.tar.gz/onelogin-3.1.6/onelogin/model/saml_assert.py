# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from onelogin import schemas  # noqa: F401


class SamlAssert(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "password",
            "subdomain",
            "username_or_email",
            "app_id",
        }
        
        class properties:
            username_or_email = schemas.StrSchema
            password = schemas.StrSchema
            app_id = schemas.StrSchema
            subdomain = schemas.StrSchema
            ip_address = schemas.StrSchema
            __annotations__ = {
                "username_or_email": username_or_email,
                "password": password,
                "app_id": app_id,
                "subdomain": subdomain,
                "ip_address": ip_address,
            }
    
    password: MetaOapg.properties.password
    subdomain: MetaOapg.properties.subdomain
    username_or_email: MetaOapg.properties.username_or_email
    app_id: MetaOapg.properties.app_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username_or_email"]) -> MetaOapg.properties.username_or_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subdomain"]) -> MetaOapg.properties.subdomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["username_or_email", "password", "app_id", "subdomain", "ip_address", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username_or_email"]) -> MetaOapg.properties.username_or_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subdomain"]) -> MetaOapg.properties.subdomain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["username_or_email", "password", "app_id", "subdomain", "ip_address", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        password: typing.Union[MetaOapg.properties.password, str, ],
        subdomain: typing.Union[MetaOapg.properties.subdomain, str, ],
        username_or_email: typing.Union[MetaOapg.properties.username_or_email, str, ],
        app_id: typing.Union[MetaOapg.properties.app_id, str, ],
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SamlAssert':
        return super().__new__(
            cls,
            *_args,
            password=password,
            subdomain=subdomain,
            username_or_email=username_or_email,
            app_id=app_id,
            ip_address=ip_address,
            _configuration=_configuration,
            **kwargs,
        )
