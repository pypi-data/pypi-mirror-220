# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from onelogin import schemas  # noqa: F401


class SamlFactor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "device_id",
            "state_token",
            "app_id",
        }
        
        class properties:
            app_id = schemas.StrSchema
            device_id = schemas.StrSchema
            state_token = schemas.StrSchema
            otp_token = schemas.StrSchema
            do_not_notify = schemas.BoolSchema
            __annotations__ = {
                "app_id": app_id,
                "device_id": device_id,
                "state_token": state_token,
                "otp_token": otp_token,
                "do_not_notify": do_not_notify,
            }
    
    device_id: MetaOapg.properties.device_id
    state_token: MetaOapg.properties.state_token
    app_id: MetaOapg.properties.app_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_token"]) -> MetaOapg.properties.state_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otp_token"]) -> MetaOapg.properties.otp_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["do_not_notify"]) -> MetaOapg.properties.do_not_notify: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_id", "device_id", "state_token", "otp_token", "do_not_notify", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> MetaOapg.properties.app_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_token"]) -> MetaOapg.properties.state_token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otp_token"]) -> typing.Union[MetaOapg.properties.otp_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["do_not_notify"]) -> typing.Union[MetaOapg.properties.do_not_notify, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_id", "device_id", "state_token", "otp_token", "do_not_notify", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_id: typing.Union[MetaOapg.properties.device_id, str, ],
        state_token: typing.Union[MetaOapg.properties.state_token, str, ],
        app_id: typing.Union[MetaOapg.properties.app_id, str, ],
        otp_token: typing.Union[MetaOapg.properties.otp_token, str, schemas.Unset] = schemas.unset,
        do_not_notify: typing.Union[MetaOapg.properties.do_not_notify, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SamlFactor':
        return super().__new__(
            cls,
            *_args,
            device_id=device_id,
            state_token=state_token,
            app_id=app_id,
            otp_token=otp_token,
            do_not_notify=do_not_notify,
            _configuration=_configuration,
            **kwargs,
        )
