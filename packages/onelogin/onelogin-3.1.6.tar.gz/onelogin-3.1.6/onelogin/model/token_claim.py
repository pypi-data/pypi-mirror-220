# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from onelogin import schemas  # noqa: F401


class TokenClaim(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            label = schemas.StrSchema
            user_attribute_mappings = schemas.StrSchema
            user_attribute_macros = schemas.StrSchema
            attribute_transformations = schemas.StrSchema
            skip_if_blank = schemas.BoolSchema
            
            
            class values(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'values':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            default_values = schemas.StrSchema
            provisioned_entitlements = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "label": label,
                "user_attribute_mappings": user_attribute_mappings,
                "user_attribute_macros": user_attribute_macros,
                "attribute_transformations": attribute_transformations,
                "skip_if_blank": skip_if_blank,
                "values": values,
                "default_values": default_values,
                "provisioned_entitlements": provisioned_entitlements,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_attribute_mappings"]) -> MetaOapg.properties.user_attribute_mappings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_attribute_macros"]) -> MetaOapg.properties.user_attribute_macros: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_transformations"]) -> MetaOapg.properties.attribute_transformations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip_if_blank"]) -> MetaOapg.properties.skip_if_blank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> MetaOapg.properties.values: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_values"]) -> MetaOapg.properties.default_values: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisioned_entitlements"]) -> MetaOapg.properties.provisioned_entitlements: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "label", "user_attribute_mappings", "user_attribute_macros", "attribute_transformations", "skip_if_blank", "values", "default_values", "provisioned_entitlements", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_attribute_mappings"]) -> typing.Union[MetaOapg.properties.user_attribute_mappings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_attribute_macros"]) -> typing.Union[MetaOapg.properties.user_attribute_macros, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_transformations"]) -> typing.Union[MetaOapg.properties.attribute_transformations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip_if_blank"]) -> typing.Union[MetaOapg.properties.skip_if_blank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> typing.Union[MetaOapg.properties.values, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_values"]) -> typing.Union[MetaOapg.properties.default_values, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisioned_entitlements"]) -> typing.Union[MetaOapg.properties.provisioned_entitlements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "label", "user_attribute_mappings", "user_attribute_macros", "attribute_transformations", "skip_if_blank", "values", "default_values", "provisioned_entitlements", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        user_attribute_mappings: typing.Union[MetaOapg.properties.user_attribute_mappings, str, schemas.Unset] = schemas.unset,
        user_attribute_macros: typing.Union[MetaOapg.properties.user_attribute_macros, str, schemas.Unset] = schemas.unset,
        attribute_transformations: typing.Union[MetaOapg.properties.attribute_transformations, str, schemas.Unset] = schemas.unset,
        skip_if_blank: typing.Union[MetaOapg.properties.skip_if_blank, bool, schemas.Unset] = schemas.unset,
        values: typing.Union[MetaOapg.properties.values, list, tuple, schemas.Unset] = schemas.unset,
        default_values: typing.Union[MetaOapg.properties.default_values, str, schemas.Unset] = schemas.unset,
        provisioned_entitlements: typing.Union[MetaOapg.properties.provisioned_entitlements, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TokenClaim':
        return super().__new__(
            cls,
            *_args,
            id=id,
            label=label,
            user_attribute_mappings=user_attribute_mappings,
            user_attribute_macros=user_attribute_macros,
            attribute_transformations=attribute_transformations,
            skip_if_blank=skip_if_blank,
            values=values,
            default_values=default_values,
            provisioned_entitlements=provisioned_entitlements,
            _configuration=_configuration,
            **kwargs,
        )
