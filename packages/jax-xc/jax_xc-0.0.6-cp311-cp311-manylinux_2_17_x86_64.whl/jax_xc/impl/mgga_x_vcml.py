"""Generated from mgga_x_vcml.mpl."""

import jax
import jax.lax as lax
import jax.numpy as jnp
from jax.numpy import array as array
from jax.numpy import int32 as int32
from jax.numpy import nan as nan
from typing import Callable, Optional
from .utils import *


def pol(p, r, s=(None, None, None), l=(None, None), tau=(None, None)):
  params = p.params
  (r0, r1), (s0, s1, s2), (l0, l1), (tau0, tau1) = r, s, l, tau
  t2 = jnp.cbrt(3)
  t3 = jnp.cbrt(jnp.pi)
  t5 = t2 / t3
  t6 = r0 + r1
  t7 = 0.1e1 / t6
  t10 = 0.2e1 * r0 * t7 <= p.zeta_threshold
  t11 = p.zeta_threshold - 0.1e1
  t14 = 0.2e1 * r1 * t7 <= p.zeta_threshold
  t15 = -t11
  t17 = (r0 - r1) * t7
  t18 = jnp.where(t14, t15, t17)
  t19 = jnp.where(t10, t11, t18)
  t20 = t19 + 0.1e1
  t22 = jnp.cbrt(p.zeta_threshold)
  t23 = t22 * p.zeta_threshold
  t24 = jnp.cbrt(t20)
  t26 = jnp.where(t20 <= p.zeta_threshold, t23, t24 * t20)
  t27 = jnp.cbrt(t6)
  t29 = jnp.cbrt(6)
  t30 = jnp.pi ** 2
  t31 = jnp.cbrt(t30)
  t32 = t31 ** 2
  t33 = 0.1e1 / t32
  t34 = t29 * t33
  t35 = r0 ** 2
  t36 = jnp.cbrt(r0)
  t37 = t36 ** 2
  t40 = s0 / t37 / t35
  t46 = t34 * t40 / (0.65124e1 + t34 * t40 / 0.24e2)
  t48 = t46 / 0.12e2 - 0.1e1
  t49 = t48 ** 2
  t50 = t49 ** 2
  t60 = 0.5e1 / 0.9e1 * (tau0 / t37 / r0 - t40 / 0.8e1) * t29 * t33
  t62 = 0.1e5 < t60
  t63 = jnp.where(t62, t60, 0.1e5)
  t64 = t63 ** 2
  t70 = t64 ** 2
  t74 = jnp.where(t62, 0.1e5, t60)
  t75 = t74 ** 2
  t76 = 0.1e1 - t75
  t77 = t76 ** 2
  t79 = t75 * t74
  t86 = jnp.where(0.1e5 <= t60, -0.1e1 / 0.4e1 + 0.3e1 / 0.4e1 / t64 + 0.1e1 / t64 / t63 / 0.16e2 - 0.3e1 / 0.4e1 / t70, t77 * t76 / (0.1e1 + t79 * (0.1e1 + 0.4e1 * t79)))
  t87 = t86 ** 2
  t88 = t87 ** 2
  t89 = t88 * t87
  t94 = t88 * t86
  t96 = t87 * t86
  t98 = t88 * t96
  t100 = t50 * t48
  t102 = t49 * t48
  t104 = t50 * t102
  t106 = t50 * t49
  t110 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t88 - 0.15e2 / 0.4e1 * t87
  t116 = 0.63e2 / 0.8e1 * t94 - 0.35e2 / 0.4e1 * t96 + 0.15e2 / 0.8e1 * t86
  t122 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t89 - 0.315e3 / 0.16e2 * t88 + 0.105e3 / 0.16e2 * t87
  t125 = -0.57084476241712602813e-1 * t50 - 0.38230940935406268094 * t49 + 0.44142553981357691475e-2 * t89 - 0.12287293765057329462e-1 * t88 + 0.63559222793315408625e-2 * t87 + 0.19451907596748125344 * t86 + 0.52279783829707640062e-1 * t94 - 0.5923137049970073438e-2 * t96 - 0.54303814303104071062e-1 * t98 + 0.50197247070683313037e-1 * t100 - 0.8047507298914579188e-2 * t102 - 0.40204197854033482912e-1 * t104 + 0.73000610738035552688e-1 * t106 + 0.50995906979556666e-2 * t48 * t110 + 0.16437722411542371e-2 * t48 * t116 + 0.5970286163074767e-3 * t48 * t122
  t130 = 0.429e3 / 0.16e2 * t98 - 0.693e3 / 0.16e2 * t94 + 0.315e3 / 0.16e2 * t96 - 0.35e2 / 0.16e2 * t86
  t134 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t49
  t138 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t87
  t143 = 0.5e1 / 0.2e1 * t96 - 0.3e1 / 0.2e1 * t86
  t158 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t50 - 0.15e2 / 0.4e1 * t49
  t169 = 0.5e1 / 0.2e1 * t102 - t46 / 0.8e1 + 0.3e1 / 0.2e1
  t176 = 0.23160016166370034e-2 * t48 * t130 - 0.13135604251829597e-1 * t134 * t86 - 0.835331263170036e-3 * t134 * t138 - 0.8670535705479461e-3 * t134 * t143 + 0.3180493235941731e-3 * t134 * t110 + 0.8482767148525194e-4 * t134 * t116 - 0.9048853909642742e-3 * t134 * t122 + 0.18939021743243079e-3 * t134 * t130 + 0.12131628073942294 * t48 * t86 - 0.7261106354828029e-4 * t158 * t116 - 0.2571281595426713e-3 * t158 * t143 - 0.14878680171769923e-2 * t158 * t138 - 0.21100890252897446e-2 * t158 * t86 - 0.689695394243961e-3 * t169 * t122 + 0.4308565933608885e-3 * t169 * t130 - 0.19375881298946268e-3 * t169 * t116
  t193 = 0.63e2 / 0.8e1 * t100 - 0.35e2 / 0.4e1 * t102 + 0.5e1 / 0.32e2 * t46 - 0.15e2 / 0.8e1
  t215 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t106 - 0.315e3 / 0.16e2 * t50 + 0.105e3 / 0.16e2 * t49
  t218 = -0.4704436332280876e-2 * t169 * t110 + 0.27822064319562786e-2 * t169 * t143 - 0.16823429546012295e-1 * t169 * t86 - 0.7823588139015819e-4 * t169 * t138 + 0.12341314639045392e-2 * t48 * t138 + 0.24977311122498513e-2 * t48 * t143 - 0.5194058669188706e-3 * t193 * t130 - 0.38541498256550073e-2 * t193 * t116 - 0.10249162124576494e-2 * t193 * t110 - 0.3656012084198544e-4 * t193 * t143 - 0.16609256494831233e-2 * t193 * t86 + 0.5061925051098745e-2 * t193 * t138 - 0.1792697304428732e-4 * t158 * t130 + 0.1331797359718674e-3 * t158 * t122 + 0.9891355730978566e-3 * t158 * t110 - 0.18156466410673526e-3 * t215 * t130
  t237 = 0.429e3 / 0.16e2 * t104 - 0.693e3 / 0.16e2 * t100 + 0.315e3 / 0.16e2 * t102 - 0.35e2 / 0.192e3 * t46 + 0.35e2 / 0.16e2
  t253 = 0.13669196781387441795e1 + 0.1864317026752979e-2 * t215 * t122 + 0.8367073496483024e-3 * t215 * t110 - 0.31296536914037784e-2 * t215 * t116 - 0.9195715678311926e-2 * t215 * t143 - 0.7631605623646023e-2 * t215 * t138 + 0.28206838819829017e-2 * t215 * t86 - 0.7555456486598222e-2 * t193 * t122 - 0.29476504977320184e-3 * t237 * t130 - 0.19095139973664826e-3 * t237 * t122 + 0.38758929812102785e-2 * t237 * t116 - 0.31389079758955066e-3 * t237 * t110 - 0.1006770315965861e-1 * t237 * t138 + 0.10726279571787276e-1 * t237 * t143 + 0.17309630990864668e-3 * t237 * t86 - 0.1114587791227991087e-1 * t46
  t259 = jnp.where(r0 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t26 * t27 * (t125 + t176 + t218 + t253))
  t261 = jnp.where(t10, t15, -t17)
  t262 = jnp.where(t14, t11, t261)
  t263 = t262 + 0.1e1
  t265 = jnp.cbrt(t263)
  t267 = jnp.where(t263 <= p.zeta_threshold, t23, t265 * t263)
  t269 = r1 ** 2
  t270 = jnp.cbrt(r1)
  t271 = t270 ** 2
  t274 = s2 / t271 / t269
  t280 = t34 * t274 / (0.65124e1 + t34 * t274 / 0.24e2)
  t282 = t280 / 0.12e2 - 0.1e1
  t283 = t282 ** 2
  t285 = t283 ** 2
  t287 = t285 * t283
  t296 = 0.5e1 / 0.9e1 * (tau1 / t271 / r1 - t274 / 0.8e1) * t29 * t33
  t298 = 0.1e5 < t296
  t299 = jnp.where(t298, t296, 0.1e5)
  t300 = t299 ** 2
  t306 = t300 ** 2
  t310 = jnp.where(t298, 0.1e5, t296)
  t311 = t310 ** 2
  t312 = 0.1e1 - t311
  t313 = t312 ** 2
  t315 = t311 * t310
  t322 = jnp.where(0.1e5 <= t296, -0.1e1 / 0.4e1 + 0.3e1 / 0.4e1 / t300 + 0.1e1 / t300 / t299 / 0.16e2 - 0.3e1 / 0.4e1 / t306, t313 * t312 / (0.1e1 + t315 * (0.1e1 + 0.4e1 * t315)))
  t323 = t322 ** 2
  t324 = t323 ** 2
  t327 = t324 * t323
  t330 = t324 * t322
  t332 = t323 * t322
  t334 = t324 * t332
  t336 = t285 * t282
  t338 = t283 * t282
  t340 = t285 * t338
  t343 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t283
  t348 = 0.429e3 / 0.16e2 * t334 - 0.693e3 / 0.16e2 * t330 + 0.315e3 / 0.16e2 * t332 - 0.35e2 / 0.16e2 * t322
  t354 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t327 - 0.315e3 / 0.16e2 * t324 + 0.105e3 / 0.16e2 * t323
  t360 = 0.63e2 / 0.8e1 * t330 - 0.35e2 / 0.4e1 * t332 + 0.15e2 / 0.8e1 * t322
  t363 = -0.38230940935406268094 * t283 - 0.57084476241712602813e-1 * t285 + 0.73000610738035552688e-1 * t287 - 0.12287293765057329462e-1 * t324 + 0.63559222793315408625e-2 * t323 + 0.44142553981357691475e-2 * t327 + 0.19451907596748125344 * t322 + 0.52279783829707640062e-1 * t330 - 0.5923137049970073438e-2 * t332 - 0.54303814303104071062e-1 * t334 + 0.50197247070683313037e-1 * t336 - 0.8047507298914579188e-2 * t338 - 0.40204197854033482912e-1 * t340 + 0.18939021743243079e-3 * t343 * t348 - 0.9048853909642742e-3 * t343 * t354 + 0.8482767148525194e-4 * t343 * t360
  t366 = 0.5e1 / 0.2e1 * t332 - 0.3e1 / 0.2e1 * t322
  t371 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t324 - 0.15e2 / 0.4e1 * t323
  t375 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t323
  t396 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t285 - 0.15e2 / 0.4e1 * t283
  t407 = -0.8670535705479461e-3 * t343 * t366 + 0.3180493235941731e-3 * t343 * t371 - 0.835331263170036e-3 * t343 * t375 - 0.13135604251829597e-1 * t343 * t322 + 0.5970286163074767e-3 * t282 * t354 + 0.23160016166370034e-2 * t282 * t348 + 0.16437722411542371e-2 * t282 * t360 + 0.50995906979556666e-2 * t282 * t371 + 0.12341314639045392e-2 * t282 * t375 + 0.24977311122498513e-2 * t282 * t366 + 0.12131628073942294 * t282 * t322 - 0.7261106354828029e-4 * t396 * t360 - 0.2571281595426713e-3 * t396 * t366 + 0.9891355730978566e-3 * t396 * t371 - 0.14878680171769923e-2 * t396 * t375 - 0.21100890252897446e-2 * t396 * t322
  t411 = 0.5e1 / 0.2e1 * t338 - t280 / 0.8e1 + 0.3e1 / 0.2e1
  t429 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t287 - 0.315e3 / 0.16e2 * t285 + 0.105e3 / 0.16e2 * t283
  t435 = 0.63e2 / 0.8e1 * t336 - 0.35e2 / 0.4e1 * t338 + 0.5e1 / 0.32e2 * t280 - 0.15e2 / 0.8e1
  t452 = -0.689695394243961e-3 * t411 * t354 + 0.4308565933608885e-3 * t411 * t348 - 0.19375881298946268e-3 * t411 * t360 - 0.4704436332280876e-2 * t411 * t371 + 0.27822064319562786e-2 * t411 * t366 - 0.16823429546012295e-1 * t411 * t322 - 0.7823588139015819e-4 * t411 * t375 + 0.28206838819829017e-2 * t429 * t322 - 0.7555456486598222e-2 * t435 * t354 - 0.5194058669188706e-3 * t435 * t348 - 0.38541498256550073e-2 * t435 * t360 - 0.10249162124576494e-2 * t435 * t371 - 0.3656012084198544e-4 * t435 * t366 - 0.16609256494831233e-2 * t435 * t322 + 0.5061925051098745e-2 * t435 * t375 - 0.1792697304428732e-4 * t396 * t348
  t459 = 0.429e3 / 0.16e2 * t340 - 0.693e3 / 0.16e2 * t336 + 0.315e3 / 0.16e2 * t338 - 0.35e2 / 0.192e3 * t280 + 0.35e2 / 0.16e2
  t487 = 0.13669196781387441795e1 + 0.1331797359718674e-3 * t396 * t354 + 0.10726279571787276e-1 * t459 * t366 + 0.17309630990864668e-3 * t459 * t322 - 0.18156466410673526e-3 * t429 * t348 + 0.1864317026752979e-2 * t429 * t354 + 0.8367073496483024e-3 * t429 * t371 - 0.31296536914037784e-2 * t429 * t360 - 0.9195715678311926e-2 * t429 * t366 - 0.7631605623646023e-2 * t429 * t375 - 0.29476504977320184e-3 * t459 * t348 - 0.19095139973664826e-3 * t459 * t354 + 0.38758929812102785e-2 * t459 * t360 - 0.31389079758955066e-3 * t459 * t371 - 0.1006770315965861e-1 * t459 * t375 - 0.1114587791227991087e-1 * t280
  t493 = jnp.where(r1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t5 * t267 * t27 * (t363 + t407 + t452 + t487))
  res = t259 + t493
  return res


def unpol(p, r, s=None, l=None, tau=None):
  params = p.params
  r0, s0, l0, tau0 = r, s, l, tau
  t3 = jnp.cbrt(3)
  t4 = jnp.cbrt(jnp.pi)
  t7 = 0.1e1 <= p.zeta_threshold
  t8 = p.zeta_threshold - 0.1e1
  t10 = jnp.where(t7, -t8, 0)
  t11 = jnp.where(t7, t8, t10)
  t12 = t11 + 0.1e1
  t14 = jnp.cbrt(p.zeta_threshold)
  t16 = jnp.cbrt(t12)
  t18 = jnp.where(t12 <= p.zeta_threshold, t14 * p.zeta_threshold, t16 * t12)
  t19 = jnp.cbrt(r0)
  t21 = jnp.cbrt(6)
  t22 = jnp.pi ** 2
  t23 = jnp.cbrt(t22)
  t24 = t23 ** 2
  t25 = 0.1e1 / t24
  t26 = t21 * t25
  t28 = jnp.cbrt(2)
  t29 = t28 ** 2
  t30 = r0 ** 2
  t31 = t19 ** 2
  t33 = 0.1e1 / t31 / t30
  t36 = s0 * t29 * t33
  t42 = t26 * s0 * t29 * t33 / (0.65124e1 + t26 * t36 / 0.24e2)
  t44 = t42 / 0.12e2 - 0.1e1
  t45 = t44 ** 2
  t46 = t45 ** 2
  t49 = t46 * t45
  t59 = 0.5e1 / 0.9e1 * (tau0 * t29 / t31 / r0 - t36 / 0.8e1) * t21 * t25
  t61 = 0.1e5 < t59
  t62 = jnp.where(t61, t59, 0.1e5)
  t63 = t62 ** 2
  t69 = t63 ** 2
  t73 = jnp.where(t61, 0.1e5, t59)
  t74 = t73 ** 2
  t75 = 0.1e1 - t74
  t76 = t75 ** 2
  t78 = t74 * t73
  t85 = jnp.where(0.1e5 <= t59, 0.3e1 / 0.4e1 / t63 + 0.1e1 / t63 / t62 / 0.16e2 - 0.3e1 / 0.4e1 / t69 - 0.1e1 / 0.4e1, t76 * t75 / (0.1e1 + t78 * (0.1e1 + 0.4e1 * t78)))
  t86 = t85 ** 2
  t87 = t86 ** 2
  t88 = t87 * t86
  t93 = t87 * t85
  t95 = t86 * t85
  t97 = t87 * t95
  t99 = t45 * t44
  t101 = t46 * t44
  t103 = t46 * t99
  t107 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t87 - 0.15e2 / 0.4e1 * t86
  t113 = 0.63e2 / 0.8e1 * t93 - 0.35e2 / 0.4e1 * t95 + 0.15e2 / 0.8e1 * t85
  t120 = 0.429e3 / 0.16e2 * t97 - 0.693e3 / 0.16e2 * t93 + 0.315e3 / 0.16e2 * t95 - 0.35e2 / 0.16e2 * t85
  t123 = -0.57084476241712602813e-1 * t46 - 0.38230940935406268094 * t45 + 0.73000610738035552688e-1 * t49 + 0.44142553981357691475e-2 * t88 - 0.12287293765057329462e-1 * t87 + 0.63559222793315408625e-2 * t86 + 0.19451907596748125344 * t85 + 0.52279783829707640062e-1 * t93 - 0.5923137049970073438e-2 * t95 - 0.54303814303104071062e-1 * t97 - 0.8047507298914579188e-2 * t99 + 0.50197247070683313037e-1 * t101 - 0.40204197854033482912e-1 * t103 + 0.50995906979556666e-2 * t44 * t107 + 0.16437722411542371e-2 * t44 * t113 + 0.23160016166370034e-2 * t44 * t120
  t125 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t45
  t129 = -0.1e1 / 0.2e1 + 0.3e1 / 0.2e1 * t86
  t134 = 0.5e1 / 0.2e1 * t95 - 0.3e1 / 0.2e1 * t85
  t144 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t88 - 0.315e3 / 0.16e2 * t87 + 0.105e3 / 0.16e2 * t86
  t151 = 0.5e1 / 0.2e1 * t99 - t42 / 0.8e1 + 0.3e1 / 0.2e1
  t168 = 0.3e1 / 0.8e1 + 0.35e2 / 0.8e1 * t46 - 0.15e2 / 0.4e1 * t45
  t173 = -0.13135604251829597e-1 * t125 * t85 - 0.835331263170036e-3 * t125 * t129 - 0.8670535705479461e-3 * t125 * t134 + 0.3180493235941731e-3 * t125 * t107 + 0.8482767148525194e-4 * t125 * t113 - 0.9048853909642742e-3 * t125 * t144 + 0.18939021743243079e-3 * t125 * t120 - 0.16823429546012295e-1 * t151 * t85 - 0.7823588139015819e-4 * t151 * t129 + 0.27822064319562786e-2 * t151 * t134 - 0.4704436332280876e-2 * t151 * t107 + 0.12131628073942294 * t44 * t85 + 0.12341314639045392e-2 * t44 * t129 + 0.24977311122498513e-2 * t44 * t134 - 0.1792697304428732e-4 * t168 * t120 + 0.1331797359718674e-3 * t168 * t144
  t196 = -0.5e1 / 0.16e2 + 0.231e3 / 0.16e2 * t49 - 0.315e3 / 0.16e2 * t46 + 0.105e3 / 0.16e2 * t45
  t204 = 0.63e2 / 0.8e1 * t101 - 0.35e2 / 0.4e1 * t99 + 0.5e1 / 0.32e2 * t42 - 0.15e2 / 0.8e1
  t215 = -0.7261106354828029e-4 * t168 * t113 - 0.2571281595426713e-3 * t168 * t134 + 0.9891355730978566e-3 * t168 * t107 - 0.14878680171769923e-2 * t168 * t129 - 0.21100890252897446e-2 * t168 * t85 - 0.689695394243961e-3 * t151 * t144 + 0.4308565933608885e-3 * t151 * t120 - 0.19375881298946268e-3 * t151 * t113 + 0.5970286163074767e-3 * t44 * t144 - 0.7631605623646023e-2 * t196 * t129 + 0.28206838819829017e-2 * t196 * t85 - 0.5194058669188706e-3 * t204 * t120 - 0.38541498256550073e-2 * t204 * t113 - 0.7555456486598222e-2 * t204 * t144 - 0.10249162124576494e-2 * t204 * t107 - 0.3656012084198544e-4 * t204 * t134
  t224 = 0.429e3 / 0.16e2 * t103 - 0.693e3 / 0.16e2 * t101 + 0.315e3 / 0.16e2 * t99 - 0.35e2 / 0.192e3 * t42 + 0.35e2 / 0.16e2
  t250 = 0.13669196781387441795e1 + 0.5061925051098745e-2 * t204 * t129 - 0.16609256494831233e-2 * t204 * t85 + 0.10726279571787276e-1 * t224 * t134 - 0.1006770315965861e-1 * t224 * t129 + 0.17309630990864668e-3 * t224 * t85 - 0.18156466410673526e-3 * t196 * t120 + 0.1864317026752979e-2 * t196 * t144 - 0.31296536914037784e-2 * t196 * t113 - 0.9195715678311926e-2 * t196 * t134 + 0.8367073496483024e-3 * t196 * t107 - 0.29476504977320184e-3 * t224 * t120 + 0.38758929812102785e-2 * t224 * t113 - 0.19095139973664826e-3 * t224 * t144 - 0.31389079758955066e-3 * t224 * t107 - 0.1114587791227991087e-1 * t42
  t256 = jnp.where(r0 / 0.2e1 <= p.dens_threshold, 0, -0.3e1 / 0.8e1 * t3 / t4 * t18 * t19 * (t123 + t173 + t215 + t250))
  res = 0.2e1 * t256
  return res


def invoke(
  p: NamedTuple, rho: Callable, r: jnp.ndarray, mo: Optional[Callable] = None,
  deorbitalize: Optional[float] = None,
):
  args = rho_to_arguments(p, rho, r, mo, deorbitalize)
  ret = pol(p, *args) if p.nspin == 2 else unpol(p, *args)
  dens = args[0] if p.nspin == 1 else sum(args[0])
  ret = lax.select((dens < p.dens_threshold), 0., ret)
  return ret