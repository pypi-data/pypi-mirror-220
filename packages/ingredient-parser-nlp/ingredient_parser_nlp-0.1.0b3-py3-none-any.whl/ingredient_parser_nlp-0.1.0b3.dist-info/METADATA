Metadata-Version: 2.1
Name: ingredient-parser-nlp
Version: 0.1.0b3
Summary: A Python package to parse structured information from recipe ingredient sentences
Author-email: Tom Strange <tpstrange@gmail.com>
License: MIT License
        
        Copyright (c) 2023 Tom Strange
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
Project-URL: Homepage, https://github.com/strangetom/ingredient-parser/
Project-URL: Documentation, https://ingredient-parser.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/strangetom/ingredient-parser
Keywords: recipe,ingredient,ingredients,nlp,parsing
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Text Processing :: Linguistic
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: nltk
Requires-Dist: python-crfsuite
Requires-Dist: typing-extensions

# Ingredient Parser

The Ingredient Parser package is a Python package for parsing structured information out of recipe ingredient sentences.

![](docs/source/_static/logo.svg)

## Documentation

Documentation on using the package and training the model can be found at https://ingredient-parser.readthedocs.io/en/latest/.

## Quick Start

Install the package using pip

```bash
python -m pip install ingredient-parser-nlp
```

Import the ```parse_ingredient``` function and pass it an ingredient sentence.

```python
>>> from ingredient_parser import parse_ingredient

>>> parse_ingredient("3 pounds pork shoulder, cut into 2-inch chunks")
{'sentence': '3 pounds pork shoulder, cut into 2-inch chunks',
 'quantity': '3',
 'unit': 'pound',
 'name': 'pork shoulder',
 'comment': 'cut into 2-inch chunks',
 'other': ''}

# Output confidence for each label
>>> parse_ingredient("3 pounds pork shoulder, cut into 2-inch chunks", confidence=True)
{'sentence': '3 pounds pork shoulder, cut into 2-inch chunks',
 'quantity': '3',
 'unit': 'pound',
 'name': 'pork shoulder',
 'comment': 'cut into 2-inch chunks',
 'other': '',
 'confidence': {'quantity': 0.9988,
  'unit': 0.9969,
  'name': 0.9698,
  'comment': 0.9992,
  'other': 0}}
```

The returned dictionary has the format

```python
{
    "sentence": str,
    "quantity": str,
    "unit": str,
    "name": str,
    "comment": str,
    "other": str
}
```

## Model accuracy

The model provided in ```ingredient-parser/``` directory has the following accuracy on a test data set of 25% of the total  data used:

```
Sentence-level results:
	Total: 9448
	Correct: 8189
	-> 86.67%

Word-level results:
	Total: 54854
	Correct: 52509
	-> 95.73%
```

## Development

The development dependencies are in the ```requirements-dev.txt``` file.

Note that development includes training the model.

* ```Black``` is used for code formatting.
* ```ruff``` is used for linting. 
* ```pyright``` is used for type static analysis.
* ```pytest``` is used for tests, with ```coverage``` being used for test coverage.

The documentation dependencies are in the ```requirement-doc.txt``` file.
