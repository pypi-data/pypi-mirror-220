# This schema currently covers all view states - eventually to be split out to handle all substates
# (want to delay splitting out as long as possible for simplicities sake)
# NOTES:
# - we don't allow mixed-mode content right now, e.g. char data along with nested elements
#   instead text nodes must be leaf nodes
# - using <xsl:strip-space/> simply removes all white-space only nodes, including space between node and nested node
#   which would be mixed-mode and isn't allowed by schema anyway
# - whitespace otherwise is preserved inside nodes, e.g. Code blocks, without requireing CDATA - CDATA is purely for escaping
#   see https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256144(v=vs.100)
# NOTE - the .rng file is autogenerated using the `trang` java tool
# run `java -jar /path/to/trang.jar full_schema.rnc full_schema.rng`
#default namespace = "https://datapane.com/view"

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

start = element View {
  attribute fragment { xsd:boolean },
  attribute version { xsd:positiveInteger },
  # do we want Internal here just-in-case??
  Block+
}


################################################################################
# Internal fields, used when modifying the internal report structure
# TODO - do we need this??
Internal = element Internal {
  empty
  # id_count used to track free variables count
  # attribute id_count { xsd:nonNegativeInteger }
}


################################################################################
# Main Report Tree
#Pages = element Pages {
#  attribute layout { string "top" | string "side" }?,
#  Page+
#}

# name is optional generally, can be user-defined, used for referencing
block_name = attribute name { xsd:ID }
block_label = attribute label { xsd:string { minLength = "1" maxLength = "256" } }
block_label_or_name = block_name?, block_label?


# Pages don't have id's or name's - as can't be extracted to be displayed elsewhere
# Pages have an implict single column
#Page = element Page {
#  block_label_or_name, Block+
#}

Block = LayoutBlock | DataBlock | Compute | Empty

# Used to describe a Placeholder element we can patch - like empty div in HTML
Empty = element Empty {
  block_name
}


################################################################################
# Compute block handling
Compute = element Compute {
  block_label_or_name,

  # htmx-like attributes
  attribute function_id { xsd:string { minLength = "1" maxLength = "32" } },
  # attribute function_id { xsd:positiveInteger },
  attribute target { xsd:string { minLength = "1" } },
  # submit has hard-coded "Go" button
  # schedule is hard-coded to 30s for now
  attribute trigger { string "submit" | string "schedule" | string "visible" | string "load" | string "mount" },
  attribute swap { string "replace" | string "prepend" | string "append" | string "inner" },
  attribute submit_label { xsd:string { minLength = "1" maxLength = "32" } }?,
  attribute timer { xsd:positiveInteger }?,
  attribute immediate { xsd:boolean }?,

  # internal controls
  Controls
}

Controls = element Controls {
  attribute label { xsd:string { minLength = "1"} }?,
  Param*
}

Param = PTextBox | PNumberBox | PRange | PSwitch | PChoice | PMultiChoice | PTags | PDate | PTime | PDateTime | PFile

paramAttributes =
  attribute name { xsd:string { minLength = "1" } },
  attribute label { xsd:string { minLength = "1" } }?,
  attribute required { xsd:boolean }

PTextBox = element TextBox {
  paramAttributes,
  attribute initial { xsd:string }?
}

PNumberBox = element NumberBox {
  paramAttributes,
  attribute initial { xsd:double }?
}

PRange = element Range {
  paramAttributes,
  attribute initial { xsd:double }?,
  attribute min { xsd:double },
  attribute max { xsd:double },
  attribute step { xsd:double }?
}

PSwitch = element Switch {
  attribute initial { xsd:boolean }?,
  paramAttributes
}

PChoice = element Choice {
  paramAttributes,
  attribute initial { xsd:string }?,
  # json list of strings, non empty
  attribute options { xsd:string { minLength = "2" pattern = """\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]""" } }
}

PMultiChoice = element MultiChoice {
  paramAttributes,
  # json list of strings, non empty
  attribute initial { xsd:string { minLength = "2" pattern = """\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]""" } }?,
  attribute options { xsd:string { minLength = "2" pattern = """\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]""" } }
}

PTags = element Tags {
  paramAttributes,
  # json list of strings, non empty
  attribute initial { xsd:string { minLength = "2" pattern = """\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]""" } }?
}

PDate = element Date {
  paramAttributes,
  attribute initial { xsd:date  }?
}

PTime = element Time {
  paramAttributes,
  attribute initial { xsd:time  }?
}

PDateTime = element DateTime {
  paramAttributes,
  attribute initial { xsd:dateTime  }?
}

PFile = element File {
  paramAttributes
}


################################################################################
# NOTE - we could add Grid, Columns, etc. here
LayoutBlock = Group | Select | Toggle

Select = element Select {
  block_label_or_name,
  attribute type { string "dropdown" | string "tabs" }?,
  # Selects used to require at least 2 elements (for Reports), with Apps this has been relaxed
  Block*
}

Group = element Group {
  block_label_or_name,

  [ a:defaultValue = "1" ]
  attribute columns { xsd:nonNegativeInteger },
  # widths is a json list of ints
  attribute widths { xsd:string { minLength = "2" pattern = """\[\d+(,\s*\d+)*\]""" } }?,
  attribute valign { string "top" | string "center" | string "bottom" },

  Block*
}

Toggle = element Toggle {
  block_label_or_name,
  Block
}

################################################################################
DataBlock = EmbeddedTextBlock | AssetBlock | BigNumber

EmbeddedTextBlock = Text | HTML | Code | Embed | Formula

AssetBlock = Attachment | Media | Plot | Table | DataTable

################################################################################
# misc
opt_caption = attribute caption { xsd:string { minLength = "1" maxLength = "512" } }?


################################################################################
# EmbeddedTextBlocks
# Markdown Text
Text = element Text {
  block_label_or_name,
  xsd:string { minLength = "1" pattern = "(.|\s)*\S(.|\s)*" }
}

HTML = element HTML {
  block_label_or_name,
  xsd:string { minLength = "1" }
}

Code = element Code {
  block_label_or_name,
  attribute language { xsd:string { minLength = "1" maxLength = "127" } },
  opt_caption,
  xsd:string { minLength = "1" }
}

Embed = element Embed {
  block_label_or_name,
  attribute url { xsd:anyURI },
  attribute title { xsd:string { minLength = "1" maxLength = "255" } },
  attribute provider_name { xsd:string { minLength = "1" maxLength = "127" } },
  # TODO - make optional?
  xsd:string { minLength = "1" }
}

Formula = element Formula {
  block_label_or_name,
  opt_caption,
  xsd:string { minLength = "1" }
}

BigNumber = element BigNumber {
  block_label_or_name,
  attribute heading { xsd:string { minLength = "1" maxLength = "127" } },
  attribute value { xsd:string { minLength = "1" maxLength = "127" } },

  # optional attributes
  attribute change { xsd:string { minLength = "1" maxLength = "127" } }?,
  attribute prev_value { xsd:string { minLength = "1" maxLength = "127" } }?,
  attribute is_positive_intent { xsd:boolean }?,
  attribute is_upward_change { xsd:boolean }?
}

################################################################################
# AssetBlocks

# These are dervived from the attached asset file and not set by the user
staticAssetAttributes =
  attribute cas_ref { xsd:string { pattern = "[0-9a-f]{64}" } } ?,
  attribute type { xsd:string { pattern = '\w+/[\w.+\-]+' } },
  # attribute size { xsd:positiveInteger },
  # attribute hash { xsd:string { pattern = "[0-9a-f]{10}" } },
  attribute uploaded_filename { xsd:string { maxLength = "127" } } ?

commonAttributes =
  # Do we need ref also?
  block_label_or_name,
  opt_caption,
  attribute src { xsd:anyURI { pattern = "((attachment|http|https|file|data|ref|cas):|/).+"} }


Media = element Media {
  staticAssetAttributes?,
  commonAttributes
  }

# Additional atrtibutes (and Type tag) per Asset type, these can be set by the user
Attachment = element Attachment {
  staticAssetAttributes?,
  commonAttributes,
  attribute filename { xsd:string { minLength = "1" maxLength = "127" } }
  }

Plot = element Plot {
  staticAssetAttributes?,
  commonAttributes,

  [ a:defaultValue = "1.0" ]
  attribute scale { xsd:decimal { minExclusive = "0" } },

  [ a:defaultValue = "true" ]
  attribute responsive { xsd:boolean}
}

Table = element Table {
  staticAssetAttributes?,
  commonAttributes
}

DataTable = element DataTable {
  staticAssetAttributes?,
  commonAttributes,
  # these assets are applied during renderable
  attribute rows { xsd:positiveInteger }?,
  attribute columns { xsd:positiveInteger }?,
  attribute schema { xsd:string { minLength = "1" } }?
  # attribute cells { xsd:positiveInteger }
}
