<?xml version="1.0" encoding="UTF-8"?>
<!--
  This schema currently covers all view states - eventually to be split out to handle all substates
  (want to delay splitting out as long as possible for simplicities sake)
  NOTES:
  - we don't allow mixed-mode content right now, e.g. char data along with nested elements
    instead text nodes must be leaf nodes
  - using <xsl:strip-space/> simply removes all white-space only nodes, including space between node and nested node
    which would be mixed-mode and isn't allowed by schema anyway
  - whitespace otherwise is preserved inside nodes, e.g. Code blocks, without requireing CDATA - CDATA is purely for escaping
    see https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256144(v=vs.100)
  NOTE - the .rng file is autogenerated using the `trang` java tool
  run `java -jar /path/to/trang.jar full_schema.rnc full_schema.rng`
  default namespace = "https://datapane.com/view"
-->
<grammar xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <element name="View">
      <attribute name="fragment">
        <data type="boolean"/>
      </attribute>
      <attribute name="version">
        <data type="positiveInteger"/>
      </attribute>
      <oneOrMore>
        <!-- do we want Internal here just-in-case?? -->
        <ref name="Block"/>
      </oneOrMore>
    </element>
  </start>
  <!--
    Internal fields, used when modifying the internal report structure
    TODO - do we need this??
  -->
  <define name="Internal">
    <a:documentation/>
    <element name="Internal">
      <empty/>
      <!--
        id_count used to track free variables count
        attribute id_count { xsd:nonNegativeInteger }
      -->
    </element>
  </define>
  <!--
    Main Report Tree
    Pages = element Pages {
     attribute layout { string "top" | string "side" }?,
     Page+
    }
  -->
  <!-- name is optional generally, can be user-defined, used for referencing -->
  <define name="block_name">
    <a:documentation/>
    <attribute name="name">
      <data type="ID"/>
    </attribute>
  </define>
  <define name="block_label">
    <attribute name="label">
      <data type="string">
        <param name="minLength">1</param>
        <param name="maxLength">256</param>
      </data>
    </attribute>
  </define>
  <define name="block_label_or_name">
    <optional>
      <ref name="block_name"/>
    </optional>
    <optional>
      <ref name="block_label"/>
    </optional>
  </define>
  <!--
    Pages don't have id's or name's - as can't be extracted to be displayed elsewhere
    Pages have an implict single column
    Page = element Page {
     block_label_or_name, Block+
    }
  -->
  <define name="Block">
    <choice>
      <ref name="LayoutBlock"/>
      <ref name="DataBlock"/>
      <ref name="Compute"/>
      <ref name="Empty"/>
    </choice>
  </define>
  <!-- Used to describe a Placeholder element we can patch - like empty div in HTML -->
  <define name="Empty">
    <element name="Empty">
      <ref name="block_name"/>
    </element>
  </define>
  <!-- Compute block handling -->
  <define name="Compute">
    <a:documentation/>
    <element name="Compute">
      <ref name="block_label_or_name"/>
      <!-- htmx-like attributes -->
      <attribute name="function_id">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">32</param>
        </data>
      </attribute>
      <!-- attribute function_id { xsd:positiveInteger }, -->
      <attribute name="target">
        <data type="string">
          <param name="minLength">1</param>
        </data>
      </attribute>
      <!--
        submit has hard-coded "Go" button
        schedule is hard-coded to 30s for now
      -->
      <attribute name="trigger">
        <choice>
          <value type="string" datatypeLibrary="">submit</value>
          <value type="string" datatypeLibrary="">schedule</value>
          <value type="string" datatypeLibrary="">visible</value>
          <value type="string" datatypeLibrary="">load</value>
          <value type="string" datatypeLibrary="">mount</value>
        </choice>
      </attribute>
      <attribute name="swap">
        <choice>
          <value type="string" datatypeLibrary="">replace</value>
          <value type="string" datatypeLibrary="">prepend</value>
          <value type="string" datatypeLibrary="">append</value>
          <value type="string" datatypeLibrary="">inner</value>
        </choice>
      </attribute>
      <optional>
        <attribute name="submit_label">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">32</param>
          </data>
        </attribute>
      </optional>
      <optional>
        <attribute name="timer">
          <data type="positiveInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="immediate">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- internal controls -->
      <ref name="Controls"/>
    </element>
  </define>
  <define name="Controls">
    <element name="Controls">
      <optional>
        <attribute name="label">
          <data type="string">
            <param name="minLength">1</param>
          </data>
        </attribute>
      </optional>
      <zeroOrMore>
        <ref name="Param"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Param">
    <choice>
      <ref name="PTextBox"/>
      <ref name="PNumberBox"/>
      <ref name="PRange"/>
      <ref name="PSwitch"/>
      <ref name="PChoice"/>
      <ref name="PMultiChoice"/>
      <ref name="PTags"/>
      <ref name="PDate"/>
      <ref name="PTime"/>
      <ref name="PDateTime"/>
      <ref name="PFile"/>
    </choice>
  </define>
  <define name="paramAttributes">
    <attribute name="name">
      <data type="string">
        <param name="minLength">1</param>
      </data>
    </attribute>
    <optional>
      <attribute name="label">
        <data type="string">
          <param name="minLength">1</param>
        </data>
      </attribute>
    </optional>
    <attribute name="required">
      <data type="boolean"/>
    </attribute>
  </define>
  <define name="PTextBox">
    <element name="TextBox">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="string"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PNumberBox">
    <element name="NumberBox">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="double"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PRange">
    <element name="Range">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="double"/>
        </attribute>
      </optional>
      <attribute name="min">
        <data type="double"/>
      </attribute>
      <attribute name="max">
        <data type="double"/>
      </attribute>
      <optional>
        <attribute name="step">
          <data type="double"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PSwitch">
    <element name="Switch">
      <optional>
        <attribute name="initial">
          <data type="boolean"/>
        </attribute>
      </optional>
      <ref name="paramAttributes"/>
    </element>
  </define>
  <define name="PChoice">
    <element name="Choice">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="string"/>
        </attribute>
      </optional>
      <!-- json list of strings, non empty -->
      <attribute name="options">
        <data type="string">
          <param name="minLength">2</param>
          <param name="pattern">\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]</param>
        </data>
      </attribute>
    </element>
  </define>
  <define name="PMultiChoice">
    <element name="MultiChoice">
      <ref name="paramAttributes"/>
      <optional>
        <!-- json list of strings, non empty -->
        <attribute name="initial">
          <data type="string">
            <param name="minLength">2</param>
            <param name="pattern">\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]</param>
          </data>
        </attribute>
      </optional>
      <attribute name="options">
        <data type="string">
          <param name="minLength">2</param>
          <param name="pattern">\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]</param>
        </data>
      </attribute>
    </element>
  </define>
  <define name="PTags">
    <element name="Tags">
      <ref name="paramAttributes"/>
      <optional>
        <!-- json list of strings, non empty -->
        <attribute name="initial">
          <data type="string">
            <param name="minLength">2</param>
            <param name="pattern">\["([^"]|\\")+"(,\s*"([^"]|\\")+")*\]</param>
          </data>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PDate">
    <element name="Date">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="date"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PTime">
    <element name="Time">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="time"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PDateTime">
    <element name="DateTime">
      <ref name="paramAttributes"/>
      <optional>
        <attribute name="initial">
          <data type="dateTime"/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="PFile">
    <element name="File">
      <ref name="paramAttributes"/>
    </element>
  </define>
  <!-- NOTE - we could add Grid, Columns, etc. here -->
  <define name="LayoutBlock">
    <a:documentation/>
    <choice>
      <ref name="Group"/>
      <ref name="Select"/>
      <ref name="Toggle"/>
    </choice>
  </define>
  <define name="Select">
    <element name="Select">
      <ref name="block_label_or_name"/>
      <optional>
        <attribute name="type">
          <choice>
            <value type="string" datatypeLibrary="">dropdown</value>
            <value type="string" datatypeLibrary="">tabs</value>
          </choice>
        </attribute>
      </optional>
      <zeroOrMore>
        <!-- Selects used to require at least 2 elements (for Reports), with Apps this has been relaxed -->
        <ref name="Block"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Group">
    <element name="Group">
      <ref name="block_label_or_name"/>
      <attribute name="columns" a:defaultValue="1">
        <data type="nonNegativeInteger"/>
      </attribute>
      <optional>
        <!-- widths is a json list of ints -->
        <attribute name="widths">
          <data type="string">
            <param name="minLength">2</param>
            <param name="pattern">\[\d+(,\s*\d+)*\]</param>
          </data>
        </attribute>
      </optional>
      <attribute name="valign">
        <choice>
          <value type="string" datatypeLibrary="">top</value>
          <value type="string" datatypeLibrary="">center</value>
          <value type="string" datatypeLibrary="">bottom</value>
        </choice>
      </attribute>
      <zeroOrMore>
        <ref name="Block"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Toggle">
    <element name="Toggle">
      <ref name="block_label_or_name"/>
      <ref name="Block"/>
    </element>
  </define>
  <define name="DataBlock">
    <a:documentation/>
    <choice>
      <ref name="EmbeddedTextBlock"/>
      <ref name="AssetBlock"/>
      <ref name="BigNumber"/>
    </choice>
  </define>
  <define name="EmbeddedTextBlock">
    <choice>
      <ref name="Text"/>
      <ref name="HTML"/>
      <ref name="Code"/>
      <ref name="Embed"/>
      <ref name="Formula"/>
    </choice>
  </define>
  <define name="AssetBlock">
    <choice>
      <ref name="Attachment"/>
      <ref name="Media"/>
      <ref name="Plot"/>
      <ref name="Table"/>
      <ref name="DataTable"/>
    </choice>
  </define>
  <!-- misc -->
  <define name="opt_caption">
    <a:documentation/>
    <optional>
      <attribute name="caption">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">512</param>
        </data>
      </attribute>
    </optional>
  </define>
  <!--
    EmbeddedTextBlocks
    Markdown Text
  -->
  <define name="Text">
    <a:documentation/>
    <element name="Text">
      <ref name="block_label_or_name"/>
      <data type="string">
        <param name="minLength">1</param>
        <param name="pattern">(.|\s)*\S(.|\s)*</param>
      </data>
    </element>
  </define>
  <define name="HTML">
    <element name="HTML">
      <ref name="block_label_or_name"/>
      <data type="string">
        <param name="minLength">1</param>
      </data>
    </element>
  </define>
  <define name="Code">
    <element name="Code">
      <ref name="block_label_or_name"/>
      <attribute name="language">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">127</param>
        </data>
      </attribute>
      <ref name="opt_caption"/>
      <data type="string">
        <param name="minLength">1</param>
      </data>
    </element>
  </define>
  <define name="Embed">
    <element name="Embed">
      <ref name="block_label_or_name"/>
      <attribute name="url">
        <data type="anyURI"/>
      </attribute>
      <attribute name="title">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">255</param>
        </data>
      </attribute>
      <attribute name="provider_name">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">127</param>
        </data>
      </attribute>
      <!-- TODO - make optional? -->
      <data type="string">
        <param name="minLength">1</param>
      </data>
    </element>
  </define>
  <define name="Formula">
    <element name="Formula">
      <ref name="block_label_or_name"/>
      <ref name="opt_caption"/>
      <data type="string">
        <param name="minLength">1</param>
      </data>
    </element>
  </define>
  <define name="BigNumber">
    <element name="BigNumber">
      <ref name="block_label_or_name"/>
      <attribute name="heading">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">127</param>
        </data>
      </attribute>
      <attribute name="value">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">127</param>
        </data>
      </attribute>
      <optional>
        <!-- optional attributes -->
        <attribute name="change">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">127</param>
          </data>
        </attribute>
      </optional>
      <optional>
        <attribute name="prev_value">
          <data type="string">
            <param name="minLength">1</param>
            <param name="maxLength">127</param>
          </data>
        </attribute>
      </optional>
      <optional>
        <attribute name="is_positive_intent">
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="is_upward_change">
          <data type="boolean"/>
        </attribute>
      </optional>
    </element>
  </define>
  <!-- AssetBlocks -->
  <!-- These are dervived from the attached asset file and not set by the user -->
  <define name="staticAssetAttributes">
    <a:documentation/>
    <optional>
      <attribute name="cas_ref">
        <data type="string">
          <param name="pattern">[0-9a-f]{64}</param>
        </data>
      </attribute>
    </optional>
    <attribute name="type">
      <data type="string">
        <param name="pattern">\w+/[\w.+\-]+</param>
      </data>
    </attribute>
    <optional>
      <!--
        attribute size { xsd:positiveInteger },
        attribute hash { xsd:string { pattern = "[0-9a-f]{10}" } },
      -->
      <attribute name="uploaded_filename">
        <data type="string">
          <param name="maxLength">127</param>
        </data>
      </attribute>
    </optional>
  </define>
  <define name="commonAttributes">
    <!-- Do we need ref also? -->
    <ref name="block_label_or_name"/>
    <ref name="opt_caption"/>
    <attribute name="src">
      <data type="anyURI">
        <param name="pattern">((attachment|http|https|file|data|ref|cas):|/).+</param>
      </data>
    </attribute>
  </define>
  <define name="Media">
    <element name="Media">
      <optional>
        <ref name="staticAssetAttributes"/>
      </optional>
      <ref name="commonAttributes"/>
    </element>
  </define>
  <!-- Additional atrtibutes (and Type tag) per Asset type, these can be set by the user -->
  <define name="Attachment">
    <element name="Attachment">
      <optional>
        <ref name="staticAssetAttributes"/>
      </optional>
      <ref name="commonAttributes"/>
      <attribute name="filename">
        <data type="string">
          <param name="minLength">1</param>
          <param name="maxLength">127</param>
        </data>
      </attribute>
    </element>
  </define>
  <define name="Plot">
    <element name="Plot">
      <optional>
        <ref name="staticAssetAttributes"/>
      </optional>
      <ref name="commonAttributes"/>
      <attribute name="scale" a:defaultValue="1.0">
        <data type="decimal">
          <param name="minExclusive">0</param>
        </data>
      </attribute>
      <attribute name="responsive" a:defaultValue="true">
        <data type="boolean"/>
      </attribute>
    </element>
  </define>
  <define name="Table">
    <element name="Table">
      <optional>
        <ref name="staticAssetAttributes"/>
      </optional>
      <ref name="commonAttributes"/>
    </element>
  </define>
  <define name="DataTable">
    <element name="DataTable">
      <group>
        <optional>
          <ref name="staticAssetAttributes"/>
        </optional>
        <ref name="commonAttributes"/>
        <optional>
          <!-- these assets are applied during renderable -->
          <attribute name="rows">
            <data type="positiveInteger"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="columns">
            <data type="positiveInteger"/>
          </attribute>
        </optional>
        <optional>
          <attribute name="schema">
            <data type="string">
              <param name="minLength">1</param>
            </data>
          </attribute>
        </optional>
      </group>
      <!-- attribute cells { xsd:positiveInteger } -->
    </element>
  </define>
</grammar>
