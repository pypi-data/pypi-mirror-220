Metadata-Version: 2.1
Name: mh-logger
Version: 0.0.25
Summary: MoonHub.ai logging manager to push logs into GCP Cloud Logging
Home-page: https://github.com/MoonhubTeam/logger
Author: Luis Galeana
Author-email: luis.galeana@moonhub.ai
Project-URL: Bug Tracker, https://github.com/MoonhubTeam/logger/issues
Project-URL: repository, https://github.com/MoonhubTeam/logger
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: google-cloud-logging (==3.5.0)
Requires-Dist: requests (==2.28.1)

# Logger

## Purpose
This Logging Manager is to be used as a standardized system and structure to enable logging on different product offerings. We intend the logs to not only enable debugging platform exceptions, but to provide visibility, analytics and reporting on the health, engagement and usage of our products and systems.

## How to use this Package in your Code

### 1. Install pip Package

execute following command to install pip package
```
python -m pip install mh-logger
```

### 2. Import and Use

Following is the sample code to use this package in your code. simply import and start logging.

```
from mh_logger import LoggingManager

logger = LoggingManager(__name__)


def test_logging_function():
    logger.info("this is a sample log", json_params={"hello": "world"})


test_logging_function()

```

Sample Stream Log Output:
```
2023-03-16 20:22:36,561 [INFO] - TestLogger: this is a sample log - JSON Payload: {'hello': 'world'}
```

Set following environment variable if you want to push logs to GCP Cloud Logging service while testing locally.

```
GCP_SERVICE_KEY=google-service-key.json
```


## Steps to Create and Upload Package
### 1. Create Token (First Time Only)
- Goto `pypi.org` and create your login
- Go to api-tokens and create your API token to securely upload your packages.
- Copy and save your token in a safe place on your disk.

### 2. Install Dependencies (First Time Only)
Install following
```
python -m pip install --upgrade build
python -m pip install --upgrade twine
```

### 3. Build Package

execute following command
```
python -m build
```

Once the process above is completed, a new directory is generated called `dist/` with two files in it. The `.tag.tz` file is the source archive and the `.whl*` file is the built archive. These files represent the distribution archives of our Python package which will be uploaded to the Python Package Index and installed by pip in the following sections.

### 4. Check and Upload Package to PyPi Server
`twine` is a python package that goes through a checklist of items to see if your distribution/package is compatible for publishing.

Check if your distribution is all set to go .

execute following command to check distributions before upload
```
twine check dist/*
```

execute following command to upload latest distribution
```
twine upload --skip-existing --repository-url https://upload.pypi.org/legacy/ dist/*
```

MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
