# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class OddsMarketByIdResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            legacy_id = schemas.NumberSchema
            name = schemas.StrSchema
            developer_name = schemas.StrSchema
            has_winning_calculations = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "legacy_id": legacy_id,
                "name": name,
                "developer_name": developer_name,
                "has_winning_calculations": has_winning_calculations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacy_id"]) -> MetaOapg.properties.legacy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["developer_name"]) -> MetaOapg.properties.developer_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_winning_calculations"]) -> MetaOapg.properties.has_winning_calculations: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "legacy_id", "name", "developer_name", "has_winning_calculations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacy_id"]) -> typing.Union[MetaOapg.properties.legacy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["developer_name"]) -> typing.Union[MetaOapg.properties.developer_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_winning_calculations"]) -> typing.Union[MetaOapg.properties.has_winning_calculations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "legacy_id", "name", "developer_name", "has_winning_calculations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        legacy_id: typing.Union[MetaOapg.properties.legacy_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        developer_name: typing.Union[MetaOapg.properties.developer_name, str, schemas.Unset] = schemas.unset,
        has_winning_calculations: typing.Union[MetaOapg.properties.has_winning_calculations, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OddsMarketByIdResponseData':
        return super().__new__(
            cls,
            *args,
            id=id,
            legacy_id=legacy_id,
            name=name,
            developer_name=developer_name,
            has_winning_calculations=has_winning_calculations,
            _configuration=_configuration,
            **kwargs,
        )
