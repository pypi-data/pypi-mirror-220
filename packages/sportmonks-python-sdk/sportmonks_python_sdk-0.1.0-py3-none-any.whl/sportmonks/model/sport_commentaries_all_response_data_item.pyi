# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportCommentariesAllResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            fixture_id = schemas.NumberSchema
            
            
            class player_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'player_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class related_player_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'related_player_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            comment = schemas.StrSchema
            minute = schemas.NumberSchema
            
            
            class extra_minute(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extra_minute':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_goal = schemas.BoolSchema
            is_important = schemas.BoolSchema
            order = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "fixture_id": fixture_id,
                "player_id": player_id,
                "related_player_id": related_player_id,
                "comment": comment,
                "minute": minute,
                "extra_minute": extra_minute,
                "is_goal": is_goal,
                "is_important": is_important,
                "order": order,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixture_id"]) -> MetaOapg.properties.fixture_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["player_id"]) -> MetaOapg.properties.player_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related_player_id"]) -> MetaOapg.properties.related_player_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minute"]) -> MetaOapg.properties.minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_minute"]) -> MetaOapg.properties.extra_minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_goal"]) -> MetaOapg.properties.is_goal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_important"]) -> MetaOapg.properties.is_important: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "player_id", "related_player_id", "comment", "minute", "extra_minute", "is_goal", "is_important", "order", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixture_id"]) -> typing.Union[MetaOapg.properties.fixture_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["player_id"]) -> typing.Union[MetaOapg.properties.player_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related_player_id"]) -> typing.Union[MetaOapg.properties.related_player_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minute"]) -> typing.Union[MetaOapg.properties.minute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_minute"]) -> typing.Union[MetaOapg.properties.extra_minute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_goal"]) -> typing.Union[MetaOapg.properties.is_goal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_important"]) -> typing.Union[MetaOapg.properties.is_important, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "player_id", "related_player_id", "comment", "minute", "extra_minute", "is_goal", "is_important", "order", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fixture_id: typing.Union[MetaOapg.properties.fixture_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        player_id: typing.Union[MetaOapg.properties.player_id, None, str, schemas.Unset] = schemas.unset,
        related_player_id: typing.Union[MetaOapg.properties.related_player_id, None, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        minute: typing.Union[MetaOapg.properties.minute, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        extra_minute: typing.Union[MetaOapg.properties.extra_minute, None, str, schemas.Unset] = schemas.unset,
        is_goal: typing.Union[MetaOapg.properties.is_goal, bool, schemas.Unset] = schemas.unset,
        is_important: typing.Union[MetaOapg.properties.is_important, bool, schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportCommentariesAllResponseDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            fixture_id=fixture_id,
            player_id=player_id,
            related_player_id=related_player_id,
            comment=comment,
            minute=minute,
            extra_minute=extra_minute,
            is_goal=is_goal,
            is_important=is_important,
            order=order,
            _configuration=_configuration,
            **kwargs,
        )
