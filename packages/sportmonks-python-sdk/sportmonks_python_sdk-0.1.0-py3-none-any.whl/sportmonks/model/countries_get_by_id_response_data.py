# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class CountriesGetByIdResponseData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            continent_id = schemas.NumberSchema
            name = schemas.StrSchema
            official_name = schemas.StrSchema
            fifa_name = schemas.StrSchema
            iso2 = schemas.StrSchema
            iso3 = schemas.StrSchema
            latitude = schemas.StrSchema
            longitude = schemas.StrSchema
        
            @staticmethod
            def borders() -> typing.Type['CountriesGetByIdResponseDataBorders']:
                return CountriesGetByIdResponseDataBorders
            image_path = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "continent_id": continent_id,
                "name": name,
                "official_name": official_name,
                "fifa_name": fifa_name,
                "iso2": iso2,
                "iso3": iso3,
                "latitude": latitude,
                "longitude": longitude,
                "borders": borders,
                "image_path": image_path,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continent_id"]) -> MetaOapg.properties.continent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["official_name"]) -> MetaOapg.properties.official_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fifa_name"]) -> MetaOapg.properties.fifa_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso2"]) -> MetaOapg.properties.iso2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iso3"]) -> MetaOapg.properties.iso3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["borders"]) -> 'CountriesGetByIdResponseDataBorders': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_path"]) -> MetaOapg.properties.image_path: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "continent_id", "name", "official_name", "fifa_name", "iso2", "iso3", "latitude", "longitude", "borders", "image_path", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continent_id"]) -> typing.Union[MetaOapg.properties.continent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["official_name"]) -> typing.Union[MetaOapg.properties.official_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fifa_name"]) -> typing.Union[MetaOapg.properties.fifa_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso2"]) -> typing.Union[MetaOapg.properties.iso2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iso3"]) -> typing.Union[MetaOapg.properties.iso3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["borders"]) -> typing.Union['CountriesGetByIdResponseDataBorders', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_path"]) -> typing.Union[MetaOapg.properties.image_path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "continent_id", "name", "official_name", "fifa_name", "iso2", "iso3", "latitude", "longitude", "borders", "image_path", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        continent_id: typing.Union[MetaOapg.properties.continent_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        official_name: typing.Union[MetaOapg.properties.official_name, str, schemas.Unset] = schemas.unset,
        fifa_name: typing.Union[MetaOapg.properties.fifa_name, str, schemas.Unset] = schemas.unset,
        iso2: typing.Union[MetaOapg.properties.iso2, str, schemas.Unset] = schemas.unset,
        iso3: typing.Union[MetaOapg.properties.iso3, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, str, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, str, schemas.Unset] = schemas.unset,
        borders: typing.Union['CountriesGetByIdResponseDataBorders', schemas.Unset] = schemas.unset,
        image_path: typing.Union[MetaOapg.properties.image_path, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CountriesGetByIdResponseData':
        return super().__new__(
            cls,
            *args,
            id=id,
            continent_id=continent_id,
            name=name,
            official_name=official_name,
            fifa_name=fifa_name,
            iso2=iso2,
            iso3=iso3,
            latitude=latitude,
            longitude=longitude,
            borders=borders,
            image_path=image_path,
            _configuration=_configuration,
            **kwargs,
        )

from sportmonks.model.countries_get_by_id_response_data_borders import CountriesGetByIdResponseDataBorders
