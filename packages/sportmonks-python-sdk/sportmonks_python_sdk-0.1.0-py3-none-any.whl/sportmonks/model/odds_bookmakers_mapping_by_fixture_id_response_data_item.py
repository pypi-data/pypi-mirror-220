# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class OddsBookmakersMappingByFixtureIdResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            fixture_id = schemas.NumberSchema
            bookmaker_id = schemas.NumberSchema
            bookmaker_name = schemas.StrSchema
            bookmaker_event_id = schemas.StrSchema
            
            
            class bookmaker_event_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bookmaker_event_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "fixture_id": fixture_id,
                "bookmaker_id": bookmaker_id,
                "bookmaker_name": bookmaker_name,
                "bookmaker_event_id": bookmaker_event_id,
                "bookmaker_event_url": bookmaker_event_url,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixture_id"]) -> MetaOapg.properties.fixture_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookmaker_id"]) -> MetaOapg.properties.bookmaker_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookmaker_name"]) -> MetaOapg.properties.bookmaker_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookmaker_event_id"]) -> MetaOapg.properties.bookmaker_event_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookmaker_event_url"]) -> MetaOapg.properties.bookmaker_event_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fixture_id", "bookmaker_id", "bookmaker_name", "bookmaker_event_id", "bookmaker_event_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixture_id"]) -> typing.Union[MetaOapg.properties.fixture_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookmaker_id"]) -> typing.Union[MetaOapg.properties.bookmaker_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookmaker_name"]) -> typing.Union[MetaOapg.properties.bookmaker_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookmaker_event_id"]) -> typing.Union[MetaOapg.properties.bookmaker_event_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookmaker_event_url"]) -> typing.Union[MetaOapg.properties.bookmaker_event_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fixture_id", "bookmaker_id", "bookmaker_name", "bookmaker_event_id", "bookmaker_event_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fixture_id: typing.Union[MetaOapg.properties.fixture_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bookmaker_id: typing.Union[MetaOapg.properties.bookmaker_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bookmaker_name: typing.Union[MetaOapg.properties.bookmaker_name, str, schemas.Unset] = schemas.unset,
        bookmaker_event_id: typing.Union[MetaOapg.properties.bookmaker_event_id, str, schemas.Unset] = schemas.unset,
        bookmaker_event_url: typing.Union[MetaOapg.properties.bookmaker_event_url, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OddsBookmakersMappingByFixtureIdResponseDataItem':
        return super().__new__(
            cls,
            *args,
            fixture_id=fixture_id,
            bookmaker_id=bookmaker_id,
            bookmaker_name=bookmaker_name,
            bookmaker_event_id=bookmaker_event_id,
            bookmaker_event_url=bookmaker_event_url,
            _configuration=_configuration,
            **kwargs,
        )
