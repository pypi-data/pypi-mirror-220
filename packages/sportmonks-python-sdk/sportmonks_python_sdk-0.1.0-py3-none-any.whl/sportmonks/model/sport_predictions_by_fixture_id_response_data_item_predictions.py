# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportPredictionsByFixtureIdResponseDataItemPredictions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            _true = schemas.NumberSchema
            _false = schemas.NumberSchema
        
            @staticmethod
            def scores() -> typing.Type['SportPredictionsByFixtureIdResponseDataItemPredictionsScores']:
                return SportPredictionsByFixtureIdResponseDataItemPredictionsScores
            home = schemas.NumberSchema
            draw = schemas.NumberSchema
            away = schemas.NumberSchema
            __annotations__ = {
                "true": _true,
                "false": _false,
                "scores": scores,
                "home": home,
                "draw": draw,
                "away": away,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["true"]) -> MetaOapg.properties._true: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["false"]) -> MetaOapg.properties._false: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scores"]) -> 'SportPredictionsByFixtureIdResponseDataItemPredictionsScores': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home"]) -> MetaOapg.properties.home: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draw"]) -> MetaOapg.properties.draw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["away"]) -> MetaOapg.properties.away: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["true", "false", "scores", "home", "draw", "away", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["true"]) -> typing.Union[MetaOapg.properties._true, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["false"]) -> typing.Union[MetaOapg.properties._false, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scores"]) -> typing.Union['SportPredictionsByFixtureIdResponseDataItemPredictionsScores', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home"]) -> typing.Union[MetaOapg.properties.home, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draw"]) -> typing.Union[MetaOapg.properties.draw, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["away"]) -> typing.Union[MetaOapg.properties.away, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["true", "false", "scores", "home", "draw", "away", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scores: typing.Union['SportPredictionsByFixtureIdResponseDataItemPredictionsScores', schemas.Unset] = schemas.unset,
        home: typing.Union[MetaOapg.properties.home, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        draw: typing.Union[MetaOapg.properties.draw, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        away: typing.Union[MetaOapg.properties.away, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportPredictionsByFixtureIdResponseDataItemPredictions':
        return super().__new__(
            cls,
            *args,
            scores=scores,
            home=home,
            draw=draw,
            away=away,
            _configuration=_configuration,
            **kwargs,
        )

from sportmonks.model.sport_predictions_by_fixture_id_response_data_item_predictions_scores import SportPredictionsByFixtureIdResponseDataItemPredictionsScores
