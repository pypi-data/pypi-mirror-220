# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportPredictionsAllValueBetsResponseDataItemPredictions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            bet = schemas.StrSchema
            fair_odd = schemas.NumberSchema
            odd = schemas.NumberSchema
            stake = schemas.NumberSchema
            is_value = schemas.BoolSchema
            __annotations__ = {
                "bet": bet,
                "fair_odd": fair_odd,
                "odd": odd,
                "stake": stake,
                "is_value": is_value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bet"]) -> MetaOapg.properties.bet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fair_odd"]) -> MetaOapg.properties.fair_odd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["odd"]) -> MetaOapg.properties.odd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stake"]) -> MetaOapg.properties.stake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_value"]) -> MetaOapg.properties.is_value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bet", "fair_odd", "odd", "stake", "is_value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bet"]) -> typing.Union[MetaOapg.properties.bet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fair_odd"]) -> typing.Union[MetaOapg.properties.fair_odd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["odd"]) -> typing.Union[MetaOapg.properties.odd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stake"]) -> typing.Union[MetaOapg.properties.stake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_value"]) -> typing.Union[MetaOapg.properties.is_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bet", "fair_odd", "odd", "stake", "is_value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bet: typing.Union[MetaOapg.properties.bet, str, schemas.Unset] = schemas.unset,
        fair_odd: typing.Union[MetaOapg.properties.fair_odd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        odd: typing.Union[MetaOapg.properties.odd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        stake: typing.Union[MetaOapg.properties.stake, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        is_value: typing.Union[MetaOapg.properties.is_value, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportPredictionsAllValueBetsResponseDataItemPredictions':
        return super().__new__(
            cls,
            *args,
            bet=bet,
            fair_odd=fair_odd,
            odd=odd,
            stake=stake,
            is_value=is_value,
            _configuration=_configuration,
            **kwargs,
        )
