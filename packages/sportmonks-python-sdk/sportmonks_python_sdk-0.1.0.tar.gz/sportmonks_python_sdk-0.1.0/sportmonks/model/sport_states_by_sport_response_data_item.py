# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportStatesBySportResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            state = schemas.StrSchema
            name = schemas.StrSchema
            short_name = schemas.StrSchema
            developer_name = schemas.StrSchema
            is_live = schemas.BoolSchema
            is_pending = schemas.BoolSchema
            is_period_end = schemas.BoolSchema
            is_final_state = schemas.BoolSchema
            is_cancelled = schemas.BoolSchema
            is_final_standing_state = schemas.BoolSchema
            is_completed = schemas.BoolSchema
            
            
            class type_id(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            is_deleted = schemas.BoolSchema
            is_notstarted = schemas.BoolSchema
            sections_active = schemas.BoolSchema
            schedule_overrule = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "state": state,
                "name": name,
                "short_name": short_name,
                "developer_name": developer_name,
                "is_live": is_live,
                "is_pending": is_pending,
                "is_period_end": is_period_end,
                "is_final_state": is_final_state,
                "is_cancelled": is_cancelled,
                "is_final_standing_state": is_final_standing_state,
                "is_completed": is_completed,
                "type_id": type_id,
                "is_deleted": is_deleted,
                "is_notstarted": is_notstarted,
                "sections_active": sections_active,
                "schedule_overrule": schedule_overrule,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_name"]) -> MetaOapg.properties.short_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["developer_name"]) -> MetaOapg.properties.developer_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_live"]) -> MetaOapg.properties.is_live: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_pending"]) -> MetaOapg.properties.is_pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_period_end"]) -> MetaOapg.properties.is_period_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_final_state"]) -> MetaOapg.properties.is_final_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_cancelled"]) -> MetaOapg.properties.is_cancelled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_final_standing_state"]) -> MetaOapg.properties.is_final_standing_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_completed"]) -> MetaOapg.properties.is_completed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type_id"]) -> MetaOapg.properties.type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_deleted"]) -> MetaOapg.properties.is_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_notstarted"]) -> MetaOapg.properties.is_notstarted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sections_active"]) -> MetaOapg.properties.sections_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule_overrule"]) -> MetaOapg.properties.schedule_overrule: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "state", "name", "short_name", "developer_name", "is_live", "is_pending", "is_period_end", "is_final_state", "is_cancelled", "is_final_standing_state", "is_completed", "type_id", "is_deleted", "is_notstarted", "sections_active", "schedule_overrule", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_name"]) -> typing.Union[MetaOapg.properties.short_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["developer_name"]) -> typing.Union[MetaOapg.properties.developer_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_live"]) -> typing.Union[MetaOapg.properties.is_live, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_pending"]) -> typing.Union[MetaOapg.properties.is_pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_period_end"]) -> typing.Union[MetaOapg.properties.is_period_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_final_state"]) -> typing.Union[MetaOapg.properties.is_final_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_cancelled"]) -> typing.Union[MetaOapg.properties.is_cancelled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_final_standing_state"]) -> typing.Union[MetaOapg.properties.is_final_standing_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_completed"]) -> typing.Union[MetaOapg.properties.is_completed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type_id"]) -> typing.Union[MetaOapg.properties.type_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_deleted"]) -> typing.Union[MetaOapg.properties.is_deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_notstarted"]) -> typing.Union[MetaOapg.properties.is_notstarted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sections_active"]) -> typing.Union[MetaOapg.properties.sections_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule_overrule"]) -> typing.Union[MetaOapg.properties.schedule_overrule, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "state", "name", "short_name", "developer_name", "is_live", "is_pending", "is_period_end", "is_final_state", "is_cancelled", "is_final_standing_state", "is_completed", "type_id", "is_deleted", "is_notstarted", "sections_active", "schedule_overrule", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        short_name: typing.Union[MetaOapg.properties.short_name, str, schemas.Unset] = schemas.unset,
        developer_name: typing.Union[MetaOapg.properties.developer_name, str, schemas.Unset] = schemas.unset,
        is_live: typing.Union[MetaOapg.properties.is_live, bool, schemas.Unset] = schemas.unset,
        is_pending: typing.Union[MetaOapg.properties.is_pending, bool, schemas.Unset] = schemas.unset,
        is_period_end: typing.Union[MetaOapg.properties.is_period_end, bool, schemas.Unset] = schemas.unset,
        is_final_state: typing.Union[MetaOapg.properties.is_final_state, bool, schemas.Unset] = schemas.unset,
        is_cancelled: typing.Union[MetaOapg.properties.is_cancelled, bool, schemas.Unset] = schemas.unset,
        is_final_standing_state: typing.Union[MetaOapg.properties.is_final_standing_state, bool, schemas.Unset] = schemas.unset,
        is_completed: typing.Union[MetaOapg.properties.is_completed, bool, schemas.Unset] = schemas.unset,
        type_id: typing.Union[MetaOapg.properties.type_id, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        is_deleted: typing.Union[MetaOapg.properties.is_deleted, bool, schemas.Unset] = schemas.unset,
        is_notstarted: typing.Union[MetaOapg.properties.is_notstarted, bool, schemas.Unset] = schemas.unset,
        sections_active: typing.Union[MetaOapg.properties.sections_active, bool, schemas.Unset] = schemas.unset,
        schedule_overrule: typing.Union[MetaOapg.properties.schedule_overrule, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportStatesBySportResponseDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            state=state,
            name=name,
            short_name=short_name,
            developer_name=developer_name,
            is_live=is_live,
            is_pending=is_pending,
            is_period_end=is_period_end,
            is_final_state=is_final_state,
            is_cancelled=is_cancelled,
            is_final_standing_state=is_final_standing_state,
            is_completed=is_completed,
            type_id=type_id,
            is_deleted=is_deleted,
            is_notstarted=is_notstarted,
            sections_active=sections_active,
            schedule_overrule=schedule_overrule,
            _configuration=_configuration,
            **kwargs,
        )
