# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportStandingsAllResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            participant_id = schemas.NumberSchema
            sport_id = schemas.NumberSchema
            league_id = schemas.NumberSchema
            season_id = schemas.NumberSchema
            stage_id = schemas.NumberSchema
            
            
            class group_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'group_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            round_id = schemas.NumberSchema
            
            
            class standing_rule_id(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'standing_rule_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            position = schemas.NumberSchema
            result = schemas.StrSchema
            points = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "participant_id": participant_id,
                "sport_id": sport_id,
                "league_id": league_id,
                "season_id": season_id,
                "stage_id": stage_id,
                "group_id": group_id,
                "round_id": round_id,
                "standing_rule_id": standing_rule_id,
                "position": position,
                "result": result,
                "points": points,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participant_id"]) -> MetaOapg.properties.participant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sport_id"]) -> MetaOapg.properties.sport_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["league_id"]) -> MetaOapg.properties.league_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["season_id"]) -> MetaOapg.properties.season_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage_id"]) -> MetaOapg.properties.stage_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["round_id"]) -> MetaOapg.properties.round_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standing_rule_id"]) -> MetaOapg.properties.standing_rule_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["points"]) -> MetaOapg.properties.points: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "participant_id", "sport_id", "league_id", "season_id", "stage_id", "group_id", "round_id", "standing_rule_id", "position", "result", "points", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participant_id"]) -> typing.Union[MetaOapg.properties.participant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sport_id"]) -> typing.Union[MetaOapg.properties.sport_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["league_id"]) -> typing.Union[MetaOapg.properties.league_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["season_id"]) -> typing.Union[MetaOapg.properties.season_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage_id"]) -> typing.Union[MetaOapg.properties.stage_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["round_id"]) -> typing.Union[MetaOapg.properties.round_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standing_rule_id"]) -> typing.Union[MetaOapg.properties.standing_rule_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union[MetaOapg.properties.result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["points"]) -> typing.Union[MetaOapg.properties.points, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "participant_id", "sport_id", "league_id", "season_id", "stage_id", "group_id", "round_id", "standing_rule_id", "position", "result", "points", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        participant_id: typing.Union[MetaOapg.properties.participant_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sport_id: typing.Union[MetaOapg.properties.sport_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        league_id: typing.Union[MetaOapg.properties.league_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        season_id: typing.Union[MetaOapg.properties.season_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        stage_id: typing.Union[MetaOapg.properties.stage_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, None, str, schemas.Unset] = schemas.unset,
        round_id: typing.Union[MetaOapg.properties.round_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        standing_rule_id: typing.Union[MetaOapg.properties.standing_rule_id, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        result: typing.Union[MetaOapg.properties.result, str, schemas.Unset] = schemas.unset,
        points: typing.Union[MetaOapg.properties.points, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportStandingsAllResponseDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            participant_id=participant_id,
            sport_id=sport_id,
            league_id=league_id,
            season_id=season_id,
            stage_id=stage_id,
            group_id=group_id,
            round_id=round_id,
            standing_rule_id=standing_rule_id,
            position=position,
            result=result,
            points=points,
            _configuration=_configuration,
            **kwargs,
        )
