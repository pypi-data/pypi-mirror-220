# coding: utf-8

"""
    SportMonks

    Surpass the competition with superior sports data

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sportmonks import schemas  # noqa: F401


class SportPredictionsByFixtureIdResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            id = schemas.NumberSchema
            fixture_id = schemas.NumberSchema
        
            @staticmethod
            def predictions() -> typing.Type['SportPredictionsByFixtureIdResponseDataItemPredictions']:
                return SportPredictionsByFixtureIdResponseDataItemPredictions
            type_id = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "fixture_id": fixture_id,
                "predictions": predictions,
                "type_id": type_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixture_id"]) -> MetaOapg.properties.fixture_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predictions"]) -> 'SportPredictionsByFixtureIdResponseDataItemPredictions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type_id"]) -> MetaOapg.properties.type_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "predictions", "type_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixture_id"]) -> typing.Union[MetaOapg.properties.fixture_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predictions"]) -> typing.Union['SportPredictionsByFixtureIdResponseDataItemPredictions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type_id"]) -> typing.Union[MetaOapg.properties.type_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "fixture_id", "predictions", "type_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fixture_id: typing.Union[MetaOapg.properties.fixture_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        predictions: typing.Union['SportPredictionsByFixtureIdResponseDataItemPredictions', schemas.Unset] = schemas.unset,
        type_id: typing.Union[MetaOapg.properties.type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SportPredictionsByFixtureIdResponseDataItem':
        return super().__new__(
            cls,
            *args,
            id=id,
            fixture_id=fixture_id,
            predictions=predictions,
            type_id=type_id,
            _configuration=_configuration,
            **kwargs,
        )

from sportmonks.model.sport_predictions_by_fixture_id_response_data_item_predictions import SportPredictionsByFixtureIdResponseDataItemPredictions
