# coding: utf-8

"""
    Empire - Platform API

    OpenAPI specification for the Platform REST API of Empire  **System Time:** Europe/Amsterdam  **General data formats:**   * _capacity values_ => kW (integers)   * _dates and local times_ => System Time   * _currencies_ => EUR   # noqa: E501

    The version of the OpenAPI document: 0.175.1
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date

from pydantic import StrictStr, conlist

from typing import Optional, Union

from empire_platform_api_public_client.models.aggregated_nomination_type import AggregatedNominationType
from empire_platform_api_public_client.models.auction_product_type import AuctionProductType
from empire_platform_api_public_client.models.auction_status import AuctionStatus
from empire_platform_api_public_client.models.auction_timescale import AuctionTimescale
from empire_platform_api_public_client.models.audit_log_domain import AuditLogDomain
from empire_platform_api_public_client.models.border_direction_with_both import BorderDirectionWithBoth
from empire_platform_api_public_client.models.buy_now_offer_status import BuyNowOfferStatus
from empire_platform_api_public_client.models.mtu_size import MtuSize
from empire_platform_api_public_client.models.user_role import UserRole
from empire_platform_api_public_client.models.user_status import UserStatus

from empire_platform_api_public_client.api_client import ApiClient
from empire_platform_api_public_client.api_response import ApiResponse
from empire_platform_api_public_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ReportingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_auctions_schedule_report(self, product_types : conlist(AuctionProductType), border_direction : BorderDirectionWithBoth, statuses : conlist(AuctionStatus), bidding_period_start : date, bidding_period_end : date, delivery_period_start : date, delivery_period_end : date, **kwargs) -> bytearray:  # noqa: E501
        """get_auctions_schedule_report  # noqa: E501

        Fetch Auction Schedule Report  ---  __Requires Permission:__ (at least one)   * `VIEW_PUBLISHED_AUCTIONS`   * `VIEW_ANY_AUCTIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auctions_schedule_report(product_types, border_direction, statuses, bidding_period_start, bidding_period_end, delivery_period_start, delivery_period_end, async_req=True)
        >>> result = thread.get()

        :param product_types: (required)
        :type product_types: List[AuctionProductType]
        :param border_direction: (required)
        :type border_direction: BorderDirectionWithBoth
        :param statuses: (required)
        :type statuses: List[AuctionStatus]
        :param bidding_period_start: (required)
        :type bidding_period_start: date
        :param bidding_period_end: (required)
        :type bidding_period_end: date
        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_auctions_schedule_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_auctions_schedule_report_with_http_info(product_types, border_direction, statuses, bidding_period_start, bidding_period_end, delivery_period_start, delivery_period_end, **kwargs)  # noqa: E501

    @validate_arguments
    def get_auctions_schedule_report_with_http_info(self, product_types : conlist(AuctionProductType), border_direction : BorderDirectionWithBoth, statuses : conlist(AuctionStatus), bidding_period_start : date, bidding_period_end : date, delivery_period_start : date, delivery_period_end : date, **kwargs) -> ApiResponse:  # noqa: E501
        """get_auctions_schedule_report  # noqa: E501

        Fetch Auction Schedule Report  ---  __Requires Permission:__ (at least one)   * `VIEW_PUBLISHED_AUCTIONS`   * `VIEW_ANY_AUCTIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auctions_schedule_report_with_http_info(product_types, border_direction, statuses, bidding_period_start, bidding_period_end, delivery_period_start, delivery_period_end, async_req=True)
        >>> result = thread.get()

        :param product_types: (required)
        :type product_types: List[AuctionProductType]
        :param border_direction: (required)
        :type border_direction: BorderDirectionWithBoth
        :param statuses: (required)
        :type statuses: List[AuctionStatus]
        :param bidding_period_start: (required)
        :type bidding_period_start: date
        :param bidding_period_end: (required)
        :type bidding_period_end: date
        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'product_types',
            'border_direction',
            'statuses',
            'bidding_period_start',
            'bidding_period_end',
            'delivery_period_start',
            'delivery_period_end'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auctions_schedule_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('product_types') is not None:  # noqa: E501
            _query_params.append(('productTypes', _params['product_types']))
            _collection_formats['productTypes'] = 'multi'

        if _params.get('border_direction') is not None:  # noqa: E501
            _query_params.append(('borderDirection', _params['border_direction'].value))

        if _params.get('statuses') is not None:  # noqa: E501
            _query_params.append(('statuses', _params['statuses']))
            _collection_formats['statuses'] = 'multi'

        if _params.get('bidding_period_start') is not None:  # noqa: E501
            if isinstance(_params['bidding_period_start'], datetime):
                _query_params.append(('biddingPeriodStart', _params['bidding_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('biddingPeriodStart', _params['bidding_period_start']))

        if _params.get('bidding_period_end') is not None:  # noqa: E501
            if isinstance(_params['bidding_period_end'], datetime):
                _query_params.append(('biddingPeriodEnd', _params['bidding_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('biddingPeriodEnd', _params['bidding_period_end']))

        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], datetime):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], datetime):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/auctions/schedule', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_organisations_audit_logs_report(self, organisation_id : StrictStr, period_start : date, period_end : date, domains : Optional[conlist(AuditLogDomain)] = None, **kwargs) -> bytearray:  # noqa: E501
        """get_organisations_audit_logs_report  # noqa: E501

        Fetch Audit Logs Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_AUDIT_LOGS`   * `VIEW_ANY_AUDIT_LOGS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_audit_logs_report(organisation_id, period_start, period_end, domains, async_req=True)
        >>> result = thread.get()

        :param organisation_id: (required)
        :type organisation_id: str
        :param period_start: (required)
        :type period_start: date
        :param period_end: (required)
        :type period_end: date
        :param domains:
        :type domains: List[AuditLogDomain]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_organisations_audit_logs_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_organisations_audit_logs_report_with_http_info(organisation_id, period_start, period_end, domains, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organisations_audit_logs_report_with_http_info(self, organisation_id : StrictStr, period_start : date, period_end : date, domains : Optional[conlist(AuditLogDomain)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_organisations_audit_logs_report  # noqa: E501

        Fetch Audit Logs Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_AUDIT_LOGS`   * `VIEW_ANY_AUDIT_LOGS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_audit_logs_report_with_http_info(organisation_id, period_start, period_end, domains, async_req=True)
        >>> result = thread.get()

        :param organisation_id: (required)
        :type organisation_id: str
        :param period_start: (required)
        :type period_start: date
        :param period_end: (required)
        :type period_end: date
        :param domains:
        :type domains: List[AuditLogDomain]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_id',
            'period_start',
            'period_end',
            'domains'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisations_audit_logs_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('organisation_id') is not None:  # noqa: E501
            _query_params.append(('organisationId', _params['organisation_id']))

        if _params.get('period_start') is not None:  # noqa: E501
            if isinstance(_params['period_start'], datetime):
                _query_params.append(('periodStart', _params['period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('periodStart', _params['period_start']))

        if _params.get('period_end') is not None:  # noqa: E501
            if isinstance(_params['period_end'], datetime):
                _query_params.append(('periodEnd', _params['period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('periodEnd', _params['period_end']))

        if _params.get('domains') is not None:  # noqa: E501
            _query_params.append(('domains', _params['domains']))
            _collection_formats['domains'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/organisations/audit-logs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_organisations_users_report(self, organisation_ids : conlist(StrictStr), statuses : Optional[conlist(UserStatus)] = None, roles : Optional[conlist(UserRole)] = None, **kwargs) -> bytearray:  # noqa: E501
        """get_organisations_users_report  # noqa: E501

        Fetch Users Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_USERS`   * `VIEW_ANY_USERS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_users_report(organisation_ids, statuses, roles, async_req=True)
        >>> result = thread.get()

        :param organisation_ids: (required)
        :type organisation_ids: List[str]
        :param statuses:
        :type statuses: List[UserStatus]
        :param roles:
        :type roles: List[UserRole]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_organisations_users_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_organisations_users_report_with_http_info(organisation_ids, statuses, roles, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organisations_users_report_with_http_info(self, organisation_ids : conlist(StrictStr), statuses : Optional[conlist(UserStatus)] = None, roles : Optional[conlist(UserRole)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_organisations_users_report  # noqa: E501

        Fetch Users Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_USERS`   * `VIEW_ANY_USERS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations_users_report_with_http_info(organisation_ids, statuses, roles, async_req=True)
        >>> result = thread.get()

        :param organisation_ids: (required)
        :type organisation_ids: List[str]
        :param statuses:
        :type statuses: List[UserStatus]
        :param roles:
        :type roles: List[UserRole]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organisation_ids',
            'statuses',
            'roles'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisations_users_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('organisation_ids') is not None:  # noqa: E501
            _query_params.append(('organisationIds', _params['organisation_ids']))
            _collection_formats['organisationIds'] = 'multi'

        if _params.get('statuses') is not None:  # noqa: E501
            _query_params.append(('statuses', _params['statuses']))
            _collection_formats['statuses'] = 'multi'

        if _params.get('roles') is not None:  # noqa: E501
            _query_params.append(('roles', _params['roles']))
            _collection_formats['roles'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/organisations/users', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_outages_curtailment_report(self, delivery_period_start : date, delivery_period_end : date, participant_ids : conlist(StrictStr), **kwargs) -> bytearray:  # noqa: E501
        """get_outages_curtailment_report  # noqa: E501

        Fetch Curtailment Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TRANSMISSION_RIGHTS`   * `VIEW_ANY_TRANSMISSION_RIGHTS`   * `VIEW_OWN_TIMESCALE_NOMINATIONS`   * `VIEW_ANY_TIMESCALE_NOMINATIONS`   * `VIEW_CRISIS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_outages_curtailment_report(delivery_period_start, delivery_period_end, participant_ids, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param participant_ids: (required)
        :type participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_outages_curtailment_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_outages_curtailment_report_with_http_info(delivery_period_start, delivery_period_end, participant_ids, **kwargs)  # noqa: E501

    @validate_arguments
    def get_outages_curtailment_report_with_http_info(self, delivery_period_start : date, delivery_period_end : date, participant_ids : conlist(StrictStr), **kwargs) -> ApiResponse:  # noqa: E501
        """get_outages_curtailment_report  # noqa: E501

        Fetch Curtailment Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TRANSMISSION_RIGHTS`   * `VIEW_ANY_TRANSMISSION_RIGHTS`   * `VIEW_OWN_TIMESCALE_NOMINATIONS`   * `VIEW_ANY_TIMESCALE_NOMINATIONS`   * `VIEW_CRISIS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_outages_curtailment_report_with_http_info(delivery_period_start, delivery_period_end, participant_ids, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param participant_ids: (required)
        :type participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'delivery_period_start',
            'delivery_period_end',
            'participant_ids'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outages_curtailment_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], datetime):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], datetime):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        if _params.get('participant_ids') is not None:  # noqa: E501
            _query_params.append(('participantIds', _params['participant_ids']))
            _collection_formats['participantIds'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/outages/curtailment', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_trs_and_nominations_buy_now_report(self, border_direction : BorderDirectionWithBoth, timescales : conlist(AuctionTimescale), statuses : conlist(BuyNowOfferStatus), delivery_period_start : date, delivery_period_end : date, validity_period_start : date, validity_period_end : date, **kwargs) -> bytearray:  # noqa: E501
        """get_trs_and_nominations_buy_now_report  # noqa: E501

        Fetch Buy-Now Offers Report  ---  __Requires Permission:__ (at least one)   * `VIEW_ANY_BUY_NOW_OFFERS`   * `VIEW_OWN_BUY_NOW_OFFERS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_buy_now_report(border_direction, timescales, statuses, delivery_period_start, delivery_period_end, validity_period_start, validity_period_end, async_req=True)
        >>> result = thread.get()

        :param border_direction: (required)
        :type border_direction: BorderDirectionWithBoth
        :param timescales: (required)
        :type timescales: List[AuctionTimescale]
        :param statuses: (required)
        :type statuses: List[BuyNowOfferStatus]
        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param validity_period_start: (required)
        :type validity_period_start: date
        :param validity_period_end: (required)
        :type validity_period_end: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_trs_and_nominations_buy_now_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_trs_and_nominations_buy_now_report_with_http_info(border_direction, timescales, statuses, delivery_period_start, delivery_period_end, validity_period_start, validity_period_end, **kwargs)  # noqa: E501

    @validate_arguments
    def get_trs_and_nominations_buy_now_report_with_http_info(self, border_direction : BorderDirectionWithBoth, timescales : conlist(AuctionTimescale), statuses : conlist(BuyNowOfferStatus), delivery_period_start : date, delivery_period_end : date, validity_period_start : date, validity_period_end : date, **kwargs) -> ApiResponse:  # noqa: E501
        """get_trs_and_nominations_buy_now_report  # noqa: E501

        Fetch Buy-Now Offers Report  ---  __Requires Permission:__ (at least one)   * `VIEW_ANY_BUY_NOW_OFFERS`   * `VIEW_OWN_BUY_NOW_OFFERS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_buy_now_report_with_http_info(border_direction, timescales, statuses, delivery_period_start, delivery_period_end, validity_period_start, validity_period_end, async_req=True)
        >>> result = thread.get()

        :param border_direction: (required)
        :type border_direction: BorderDirectionWithBoth
        :param timescales: (required)
        :type timescales: List[AuctionTimescale]
        :param statuses: (required)
        :type statuses: List[BuyNowOfferStatus]
        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param validity_period_start: (required)
        :type validity_period_start: date
        :param validity_period_end: (required)
        :type validity_period_end: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'border_direction',
            'timescales',
            'statuses',
            'delivery_period_start',
            'delivery_period_end',
            'validity_period_start',
            'validity_period_end'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trs_and_nominations_buy_now_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('border_direction') is not None:  # noqa: E501
            _query_params.append(('borderDirection', _params['border_direction'].value))

        if _params.get('timescales') is not None:  # noqa: E501
            _query_params.append(('timescales', _params['timescales']))
            _collection_formats['timescales'] = 'multi'

        if _params.get('statuses') is not None:  # noqa: E501
            _query_params.append(('statuses', _params['statuses']))
            _collection_formats['statuses'] = 'multi'

        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], datetime):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], datetime):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        if _params.get('validity_period_start') is not None:  # noqa: E501
            if isinstance(_params['validity_period_start'], datetime):
                _query_params.append(('validityPeriodStart', _params['validity_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('validityPeriodStart', _params['validity_period_start']))

        if _params.get('validity_period_end') is not None:  # noqa: E501
            if isinstance(_params['validity_period_end'], datetime):
                _query_params.append(('validityPeriodEnd', _params['validity_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('validityPeriodEnd', _params['validity_period_end']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/trs-and-nominations/buy-now', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_trs_and_nominations_overview_report(self, mtu_size : MtuSize, type : AggregatedNominationType, border_direction : BorderDirectionWithBoth, delivery_period_start : date, delivery_period_end : date, participant_ids : Optional[conlist(StrictStr)] = None, **kwargs) -> bytearray:  # noqa: E501
        """get_trs_and_nominations_overview_report  # noqa: E501

        Fetch Transmission Rights & Nominations Overview Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TRANSMISSION_RIGHTS`   * `VIEW_ANY_TRANSMISSION_RIGHTS`   * `VIEW_OWN_TIMESCALE_OR_BPP_AGGREGATED_NOMINATIONS`   * `VIEW_ANY_TIMESCALE_OR_BPP_AGGREGATED_NOMINATIONS`   * `VIEW_SOSO_AGGREGATED_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_overview_report(mtu_size, type, border_direction, delivery_period_start, delivery_period_end, participant_ids, async_req=True)
        >>> result = thread.get()

        :param mtu_size: (required)
        :type mtu_size: MtuSize
        :param type: (required)
        :type type: AggregatedNominationType
        :param border_direction: (required)
        :type border_direction: BorderDirectionWithBoth
        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param participant_ids:
        :type participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_trs_and_nominations_overview_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_trs_and_nominations_overview_report_with_http_info(mtu_size, type, border_direction, delivery_period_start, delivery_period_end, participant_ids, **kwargs)  # noqa: E501

    @validate_arguments
    def get_trs_and_nominations_overview_report_with_http_info(self, mtu_size : MtuSize, type : AggregatedNominationType, border_direction : BorderDirectionWithBoth, delivery_period_start : date, delivery_period_end : date, participant_ids : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_trs_and_nominations_overview_report  # noqa: E501

        Fetch Transmission Rights & Nominations Overview Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TRANSMISSION_RIGHTS`   * `VIEW_ANY_TRANSMISSION_RIGHTS`   * `VIEW_OWN_TIMESCALE_OR_BPP_AGGREGATED_NOMINATIONS`   * `VIEW_ANY_TIMESCALE_OR_BPP_AGGREGATED_NOMINATIONS`   * `VIEW_SOSO_AGGREGATED_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_overview_report_with_http_info(mtu_size, type, border_direction, delivery_period_start, delivery_period_end, participant_ids, async_req=True)
        >>> result = thread.get()

        :param mtu_size: (required)
        :type mtu_size: MtuSize
        :param type: (required)
        :type type: AggregatedNominationType
        :param border_direction: (required)
        :type border_direction: BorderDirectionWithBoth
        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param participant_ids:
        :type participant_ids: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'mtu_size',
            'type',
            'border_direction',
            'delivery_period_start',
            'delivery_period_end',
            'participant_ids'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trs_and_nominations_overview_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('mtu_size') is not None:  # noqa: E501
            _query_params.append(('mtuSize', _params['mtu_size'].value))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type'].value))

        if _params.get('border_direction') is not None:  # noqa: E501
            _query_params.append(('borderDirection', _params['border_direction'].value))

        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], datetime):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], datetime):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        if _params.get('participant_ids') is not None:  # noqa: E501
            _query_params.append(('participantIds', _params['participant_ids']))
            _collection_formats['participantIds'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/trs-and-nominations/overview', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_trs_and_nominations_proof_report(self, delivery_period_start : date, delivery_period_end : date, participant_id : StrictStr, **kwargs) -> bytearray:  # noqa: E501
        """get_trs_and_nominations_proof_report  # noqa: E501

        Fetch Transmission Rights & Nominations Proof Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TIMESCALE_NOMINATIONS`   * `VIEW_ANY_TIMESCALE_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_proof_report(delivery_period_start, delivery_period_end, participant_id, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param participant_id: (required)
        :type participant_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_trs_and_nominations_proof_report_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_trs_and_nominations_proof_report_with_http_info(delivery_period_start, delivery_period_end, participant_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_trs_and_nominations_proof_report_with_http_info(self, delivery_period_start : date, delivery_period_end : date, participant_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """get_trs_and_nominations_proof_report  # noqa: E501

        Fetch Transmission Rights & Nominations Proof Report  ---  __Requires Permission:__ (at least one)   * `VIEW_OWN_TIMESCALE_NOMINATIONS`   * `VIEW_ANY_TIMESCALE_NOMINATIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_trs_and_nominations_proof_report_with_http_info(delivery_period_start, delivery_period_end, participant_id, async_req=True)
        >>> result = thread.get()

        :param delivery_period_start: (required)
        :type delivery_period_start: date
        :param delivery_period_end: (required)
        :type delivery_period_end: date
        :param participant_id: (required)
        :type participant_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'delivery_period_start',
            'delivery_period_end',
            'participant_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trs_and_nominations_proof_report" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('delivery_period_start') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_start'], datetime):
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodStart', _params['delivery_period_start']))

        if _params.get('delivery_period_end') is not None:  # noqa: E501
            if isinstance(_params['delivery_period_end'], datetime):
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end'].strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(('deliveryPeriodEnd', _params['delivery_period_end']))

        if _params.get('participant_id') is not None:  # noqa: E501
            _query_params.append(('participantId', _params['participant_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKey', 'AuthToken']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '422': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v1/reporting/trs-and-nominations/proof', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
