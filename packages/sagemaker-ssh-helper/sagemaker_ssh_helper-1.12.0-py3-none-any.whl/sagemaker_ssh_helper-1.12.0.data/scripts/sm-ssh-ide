#!/bin/bash -l
# Very important to start with 'bash -l' - to escape SageMaker Studio notebook environment

if [ ! -f /opt/.sagemakerinternal/conda/bin/python ]; then
  echo "sm-ssh-ide: ERROR: Must be running inside SageMaker Studio"
  exit 2
fi

set -e

dir=$(dirname "$0")
source "$dir"/sm-helper-functions

if [[ "$1" == "get-metadata" ]]; then

  echo "App name: $(_print_sm_app_name)"
  echo "User profile name: $(_print_sm_user_profile_name)"
  echo "Domain: $(_print_sm_domain_id)"
  echo ""
  echo "Connect from local machine: sm-local-ssh-ide connect $(_print_sm_app_name)"
  echo "Connect from local machine (SSH only): sm-local-ssh-ide connect $(_print_sm_app_name) --ssh-only"

elif [[ "$1" == "configure" ]]; then
    OPTIONS=$2
    echo "$OPTIONS" > ~/.sm-ssh-ide-options

    _install_helper_scripts

    cat /etc/os-release
    cat /etc/issue
    
    # TODO: Add support for Amazon Linux  
    grep 'Debian GNU/Linux\|Ubuntu' /etc/issue >/dev/null \
      || (echo "sm-ssh-ide: Unsupported OS type / version. Only Debian/Ubuntu systems are supported now." && exit 1)

    cat >/etc/profile.d/sm-ssh-ide.sh <<EOF
export XAUTHORITY="/tmp/.Xauthority"
export ICEAUTHORITY="/tmp/.ICEauthority"
touch "/tmp/.Xauthority"
touch "/tmp/.ICEauthority"
chmod 600 "/tmp/.Xauthority"
chmod 600 "/tmp/.ICEauthority"
EOF

    source /etc/profile.d/sm-ssh-ide.sh

    echo "sm-ssh-ide: Saving env variables for remote SSH interpreter"
    sm-save-env
    
    # TODO: example docker to skip installation of system packages completely - move to customer BYOC studio image
        export DEBIAN_FRONTEND=noninteractive

    apt-get -qq update || echo 'sm-ssh-ide: WARNING - issues with retrieving new lists of packages'
    apt-get -qq -y install apt-utils
    
    [ -d /usr/share/man/man1 ] || mkdir /usr/share/man/man1

    if [[ "$OPTIONS" != "--ssh-only" ]]; then

      apt-get -qq -y install dbus-x11 xfce4 xfce4-goodies epiphany-browser

      if grep -q 'Ubuntu 16' /etc/issue; then
          apt-get -qq -y install tightvncserver
      else
          apt-get -qq -y install tigervnc-standalone-server
      fi

    else
      echo "sm-ssh-ide: Skipping VNC and GUI apps install"
    fi

    apt-get -qq -y install ssh curl net-tools procps less jq curl vim rsync
    
    _install_sudo
    _install_aws_cli
    _install_ssm_agent_ubuntu
    _install_session_manager_plugin_ubuntu

    echo "startxfce4" > ~/.xsession
    chmod +x ~/.xsession

    sed -i -e 's~^ClientAliveInterval~#ClientAliveInterval~' /etc/ssh/sshd_config
    echo "ClientAliveInterval 15" >> /etc/ssh/sshd_config

    sed -i -e 's~^AuthorizedKeysFile~#AuthorizedKeysFile~' /etc/ssh/sshd_config
    echo "AuthorizedKeysFile /etc/ssh/authorized_keys" >> /etc/ssh/sshd_config

elif [[ "$1" == "set-jb-license-server" ]]; then

    JB_LICENSE_SERVER_HOST="$2"

    if [ -f ~/.sm-jb-license-server ]; then
        echo "sm-ssh-ide: PyCharm license server host is already configured in ~/.sm-jb-license-server, skipping override"
    else
        echo "sm-ssh-ide: Saving PyCharm License server host into ~/.sm-jb-license-server"
        echo "$JB_LICENSE_SERVER_HOST" > ~/.sm-jb-license-server
    fi

    JB_LICENSE_SERVER_HOST="$(cat ~/.sm-jb-license-server)"
    # TODO: check that it's not started with 'http'

    if grep -q "$JB_LICENSE_SERVER_HOST" /etc/hosts; then
        echo "sm-ssh-ide: Skipping the update of /etc/hosts with PyCharm license server (already there)"
    else
        echo "sm-ssh-ide: Updating /etc/hosts with PyCharm license server from ~/.sm-jb-license-server"
        echo "127.0.0.1  $JB_LICENSE_SERVER_HOST" >> /etc/hosts
    fi

elif [[ "$1" == "set-vnc-password" ]]; then

    VNC_PASSWORD="$2"

    if [ -f ~/.vnc/passwd ]; then
        echo "sm-ssh-ide: VNC password is already set in ~/.vnc/passwd, skipping override"
    else
        echo "sm-ssh-ide: Encrypting and saving VNC password to ~/.vnc/passwd"
        mkdir -p ~/.vnc
        echo "$VNC_PASSWORD" | vncpasswd -f > ~/.vnc/passwd
        chmod 600 ~/.vnc/passwd
    fi

elif [[ "$1" == "set-local-user-id" ]]; then

    LOCAL_USER_ID="$2"

    if [ -f ~/.sm-ssh-owner ]; then
        echo "sm-ssh-ide: Local user ID is already set in ~/.sm-ssh-owner, skipping override"
        LOCAL_USER_ID="$(cat ~/.sm-ssh-owner)"
    else
        echo "sm-ssh-ide: Saving local user ID into ~/.sm-ssh-owner"
        echo "$LOCAL_USER_ID" > ~/.sm-ssh-owner
    fi

elif [[ "$1" == "init-ssm" ]]; then
    _install_helper_scripts

    LOCAL_USER_ID="$(cat ~/.sm-ssh-owner)"
    echo "sm-ssh-ide: Will use local user ID: $LOCAL_USER_ID"

    user_profile_json=$(aws sagemaker describe-user-profile \
      --domain "$(_print_sm_domain_id)" \
      --user-profile-name "$(_print_sm_user_profile_name)" \
      --output json \
      | tr -d "\n")
    execution_role=$(echo "$user_profile_json" | grep "ExecutionRole" \
      | sed -e 's/^.*"ExecutionRole": \"\([^"]*\)\".*$/\1/')

    SSH_SSM_ROLE=$(echo $execution_role | sed -e 's/^.*:role\/\(.*\)/\1/')
    echo "sm-ssh-ide: Will use SSM role: $SSH_SSM_ROLE"

    export SSH_SSM_ROLE
    export SSH_OWNER_TAG=$LOCAL_USER_ID

    # Init SSM and pipe the output to CloudWatch (stdout of the pid 1).
    sm-init-ssm | tee /proc/1/fd/1

elif [[ "$1" == "start" ]]; then
    OPTIONS=$(cat ~/.sm-ssh-ide-options || echo "")

    set -e

    if [[ -f /tmp/.ssh-ide-local-lock ]]; then
        echo "sm-ssh-ide: Already running on this instance? Call stop first." && exit 1
    fi

    touch /tmp/.ssh-ide-local-lock

    echo "sm-ssh-ide: Starting SSH service"
    service ssh start

    if [[ "$OPTIONS" != "--ssh-only" ]]; then

      echo "sm-ssh-ide: Starting VNC server"

      export USER=root
      vncserver :1

      SM_STUDIO_PYTHON=$(_print_sm_studio_python)
      SM_STUDIO_PYTHON_PREFIX=$(_print_sm_studio_python_prefix)

      echo "sm-ssh-ide: Using SageMaker Studio Python: $SM_STUDIO_PYTHON"

      echo "sm-ssh-ide: Installing Jupyter notebook"

      "$SM_STUDIO_PYTHON_PREFIX"/bin/pip install -q notebook

      # TODO: remove the below temp fix for "cannot import name 'Callable' from 'traitlets" when starting notebook
      "$SM_STUDIO_PYTHON_PREFIX"/bin/pip install --force-reinstall traitlets

      echo "sm-ssh-ide: Starting Jupyter notebook server"

      "$SM_STUDIO_PYTHON" -m jupyter notebook --no-browser --port=8889 --ip=127.0.0.1 --allow-root \
        >/tmp/jupyter-notebook.log 2>&1 &

      sleep 2

      "$SM_STUDIO_PYTHON" -m jupyter notebook list

    else
      echo "sm-ssh-ide: Skipping VNC and Jupyter start"
    fi

    echo "sm-ssh-ide: Started all services"

elif [[ "$1" == "ssm-agent" ]]; then

    echo "sm-ssh-ide: Starting SSM agent"
    /usr/bin/amazon-ssm-agent

elif [[ "$1" == "status" ]]; then

    netstat -nptl | grep '5901\|8889'

elif [[ "$1" == "get-studio-python-path" ]]; then

    SM_STUDIO_PYTHON=$(_print_sm_studio_python)
    echo $SM_STUDIO_PYTHON

elif [[ "$1" == "get-studio-python-version" ]]; then

    SM_STUDIO_PYTHON=$(_print_sm_studio_python)
    $SM_STUDIO_PYTHON --version

elif [[ "$1" == "env-diagnostics" ]]; then

    echo "System Python location: $(which python || echo 'Not found')"
    echo "System Python version: $(python --version || echo 'Not found')"

    echo "Conda location: $(which conda || echo 'Not found')"
    echo "Conda environments: $(conda env list || echo 'Not found')"

    echo "SageMaker Studio Python location: $($0 get-studio-python-path || echo 'Not found')"
    echo "SageMaker Studio Python version: $($0 get-studio-python-version || echo 'Not found')"

    # Should be the same as `jupyter kernelspec list` executed from SageMaker Studio Python
    echo "Jupyter Kernels: $(find $JUPYTER_PATH -name 'kernel.json')"
    find "$JUPYTER_PATH" -name 'kernel.json' -print0 | xargs -0 cat

elif [[ "$1" == "stop" ]]; then
    OPTIONS=$(cat ~/.sm-ssh-ide-options || echo "")

    echo "sm-ssh-ide: Stopping SSM agent"
    pkill -ef amazon-ssm-agent || echo "sm-ssh-ide: SSM agent already stopped?"

    echo "sm-ssh-ide: Stopping SSH service"
    service ssh stop

    if [[ "$OPTIONS" != "--ssh-only" ]]; then

      echo "sm-ssh-ide: Stopping VNC server"
      vncserver -kill :1 || echo "sm-ssh-ide: VNC server already stopped?"

      # Wait dbus to shop
      sleep 5

      pkill -e Xtigervnc || :
      pkill -e Xtightvnc || :

      echo "sm-ssh-ide: Stopping SSH and GPG agents"
      pkill -e ssh-agent || :
      pkill -e gpg-agent || :

      echo "sm-ssh-ide: Stopping Jupyter notebook server"
      pkill -fe jupyter-notebook || echo "sm-ssh-ide: Jupyter notebook already stopped?"

    else
      echo "sm-ssh-ide: Skipping VNC and Jupyter stop"
    fi

    # Wait all other services to stop
    sleep 5
    
    if [[ -f /tmp/.ssh-ide-local-lock ]]; then
        rm /tmp/.ssh-ide-local-lock
    else
        echo "sm-ssh-ide: Local lock is missing, was not not running on this instance?"
    fi

    echo "sm-ssh-ide: Stopped all services"

else

    echo "sm-ssh-ide: Unknown command: $1"

fi
