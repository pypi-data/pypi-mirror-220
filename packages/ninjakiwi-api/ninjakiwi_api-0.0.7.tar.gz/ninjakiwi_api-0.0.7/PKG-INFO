Metadata-Version: 2.1
Name: ninjakiwi-api
Version: 0.0.7
Summary: NinjaKiwi API (OpenDATA) for Python! (My first library)
Home-page: https://github.com/GustavoSchip/ninjakiwi_api
License: MIT
Keywords: NinjaKiwi,API
Author: Gustavo Schip
Author-email: gustavoschip@proton.me
Maintainer: Gustavo Schip
Maintainer-email: gustavoschip@proton.me
Requires-Python: >=3.11,<4.0.0
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Provides-Extra: dev
Provides-Extra: test
Requires-Dist: aiohttp (>=3.8.1,<4.0.0)
Requires-Dist: asyncio (>=3.4.3,<4.0.0)
Requires-Dist: black (>=22.3.0,<23.0.0) ; extra == "test"
Requires-Dist: flake8 (==4.0.1) ; extra == "test"
Requires-Dist: flake8-docstrings (>=1.6.0,<2.0.0) ; extra == "test"
Requires-Dist: isort (==5.10.1) ; extra == "test"
Requires-Dist: livereload (>=2.6.3,<3.0.0)
Requires-Dist: pip (>=22.0.3,<23.0.0) ; extra == "dev"
Requires-Dist: pre-commit (>=2.17.0,<3.0.0) ; extra == "dev"
Requires-Dist: pyreadline (>=2.1,<3.0)
Requires-Dist: pytest (>=7.0.1,<8.0.0) ; extra == "test"
Requires-Dist: pytest-asyncio (>=0.21.1,<0.22.0) ; extra == "test"
Requires-Dist: pytest-cov (>=3.0.0,<4.0.0) ; extra == "test"
Requires-Dist: toml (>=0.10.2,<0.11.0) ; extra == "dev"
Requires-Dist: tornado (>=6.2,<7.0)
Requires-Dist: tox (>=3.24.5,<4.0.0) ; extra == "dev"
Requires-Dist: twine (>=3.8.0,<4.0.0) ; extra == "dev"
Requires-Dist: virtualenv (>=20.13.1,<21.0.0) ; extra == "dev"
Description-Content-Type: text/markdown

<div align="center">
  <h1>NinjaKiwi API</h1>
</div>

---

<p align="center">
<a href="https://pypi.python.org/pypi/ninjakiwi_api">
    <img src="https://img.shields.io/pypi/v/ninjakiwi-api.svg"
        alt = "Release Status">
</a>
</p>

<br>

# Usage

...

# Example

```python
import asyncio
from ninjakiwi_api import fetch


async def start():
    data = await fetch("BTD6", "races")
    if data is not None:
        raw = await data.get_raw_data()
        example = await data.get_data("id")
        print(f"Successfully fetched race data: {raw}")
        if example is not None:
            print(f"Successfully fetched race data: {example}")
    else:
        print("Failed to fetch race data.")


def main():
    asyncio.run(start())


if __name__ == "__main__":
    main()
```

# Coming soon...

Stay tuned guys

---

