# Copyright 2023 Zurich Instruments AG
# SPDX-License-Identifier: Apache-2.0


from laboneq.core.types.enums.carrier_type import CarrierType as CarrierTypeDSL
from laboneq.core.types.enums.modulation_type import ModulationType as ModulationTypeDSL
from laboneq.data.calibration import BounceCompensation as BounceCompensationDATA
from laboneq.data.calibration import Calibration as CalibrationDATA
from laboneq.data.calibration import CarrierType as CarrierTypeDATA
from laboneq.data.calibration import (
    ExponentialCompensation as ExponentialCompensationDATA,
)
from laboneq.data.calibration import FIRCompensation as FIRCompensationDATA
from laboneq.data.calibration import HighPassCompensation as HighPassCompensationDATA
from laboneq.data.calibration import MixerCalibration as MixerCalibrationDATA
from laboneq.data.calibration import ModulationType as ModulationTypeDATA
from laboneq.data.calibration import Oscillator as OscillatorDATA
from laboneq.data.calibration import Precompensation as PrecompensationDATA
from laboneq.data.calibration import Signal as SignalDATA
from laboneq.dsl.calibration.calibration import Calibration as CalibrationDSL
from laboneq.dsl.calibration.mixer_calibration import (
    MixerCalibration as MixerCalibrationDSL,
)
from laboneq.dsl.calibration.observable import Signal as SignalDSL
from laboneq.dsl.calibration.oscillator import Oscillator as OscillatorDSL
from laboneq.dsl.calibration.precompensation import (
    BounceCompensation as BounceCompensationDSL,
)
from laboneq.dsl.calibration.precompensation import (
    ExponentialCompensation as ExponentialCompensationDSL,
)
from laboneq.dsl.calibration.precompensation import (
    FIRCompensation as FIRCompensationDSL,
)
from laboneq.dsl.calibration.precompensation import (
    HighPassCompensation as HighPassCompensationDSL,
)
from laboneq.dsl.calibration.precompensation import (
    Precompensation as PrecompensationDSL,
)
from laboneq.implementation.legacy_adapters.dynamic_converter import convert_dynamic

# converter functions for data type package 'calibration'
#  AUTOGENERATED, DO NOT EDIT


def post_process(source, target):
    return target


def get_converter_function_calibration(orig):
    converter_function_directory = {
        BounceCompensationDSL: convert_BounceCompensation,
        CalibrationDSL: convert_Calibration,
        ExponentialCompensationDSL: convert_ExponentialCompensation,
        FIRCompensationDSL: convert_FIRCompensation,
        HighPassCompensationDSL: convert_HighPassCompensation,
        MixerCalibrationDSL: convert_MixerCalibration,
        OscillatorDSL: convert_Oscillator,
        PrecompensationDSL: convert_Precompensation,
        SignalDSL: convert_Signal,
    }
    return converter_function_directory.get(orig)


def convert_CarrierType(orig: CarrierTypeDSL):
    return (
        next(e for e in CarrierTypeDATA if e.name == orig.name)
        if orig is not None
        else None
    )


def convert_ModulationType(orig: ModulationTypeDSL):
    return (
        next(e for e in ModulationTypeDATA if e.name == orig.name)
        if orig is not None
        else None
    )


def convert_BounceCompensation(orig: BounceCompensationDSL):
    if orig is None:
        return None
    retval = BounceCompensationDATA()
    retval.amplitude = orig.amplitude
    retval.delay = orig.delay
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_Calibration(orig: CalibrationDSL):
    if orig is None:
        return None
    retval = CalibrationDATA()
    retval.calibration_items = convert_dynamic(
        orig.calibration_items,
        source_type_string="Dict",
        target_type_string="Dict",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_calibration,
    )
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_ExponentialCompensation(orig: ExponentialCompensationDSL):
    if orig is None:
        return None
    retval = ExponentialCompensationDATA()
    retval.amplitude = orig.amplitude
    retval.timeconstant = orig.timeconstant
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_FIRCompensation(orig: FIRCompensationDSL):
    if orig is None:
        return None
    retval = FIRCompensationDATA()
    retval.coefficients = convert_dynamic(
        orig.coefficients,
        source_type_string="ArrayLike",
        target_type_string="ArrayLike",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_calibration,
    )
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_HighPassCompensation(orig: HighPassCompensationDSL):
    if orig is None:
        return None
    retval = HighPassCompensationDATA()
    retval.timeconstant = orig.timeconstant
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_MixerCalibration(orig: MixerCalibrationDSL):
    if orig is None:
        return None
    retval = MixerCalibrationDATA()
    retval.correction_matrix = convert_dynamic(
        orig.correction_matrix,
        source_type_string="List[List[float]]",
        target_type_string="List[List[float]]",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_calibration,
    )
    retval.uid = orig.uid
    retval.voltage_offsets = convert_dynamic(
        orig.voltage_offsets,
        source_type_string="List[float]",
        target_type_string="List[float]",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_calibration,
    )
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_Oscillator(orig: OscillatorDSL):
    if orig is None:
        return None
    retval = OscillatorDATA()
    retval.carrier_type = convert_CarrierType(orig.carrier_type)
    retval.frequency = convert_dynamic(
        orig.frequency,
        source_type_string="float | Parameter | None",
        target_type_string="Any",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_calibration,
    )
    retval.modulation_type = convert_ModulationType(orig.modulation_type)
    retval.uid = orig.uid
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_Precompensation(orig: PrecompensationDSL):
    if orig is None:
        return None
    retval = PrecompensationDATA()
    retval.FIR = convert_FIRCompensation(orig.FIR)
    retval.bounce = convert_BounceCompensation(orig.bounce)
    retval.exponential = convert_dynamic(
        orig.exponential,
        source_type_string="List[ExponentialCompensation]",
        target_type_string="List[ExponentialCompensation]",
        orig_is_collection=True,
        conversion_function_lookup=get_converter_function_calibration,
    )
    retval.high_pass = convert_HighPassCompensation(orig.high_pass)
    retval.uid = orig.uid
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )


def convert_Signal(orig: SignalDSL):
    if orig is None:
        return None
    retval = SignalDATA()
    return post_process(
        orig, retval, conversion_function_lookup=get_converter_function_calibration
    )
