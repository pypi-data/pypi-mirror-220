# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.remove_none_from_dict import remove_none_from_dict
from .....environment import MergeEnvironment
from ...types.paginated_payroll_run_list import PaginatedPayrollRunList
from ...types.payroll_run import PayrollRun
from ...types.payroll_runs_list_request_remote_fields import PayrollRunsListRequestRemoteFields
from ...types.payroll_runs_list_request_run_type import PayrollRunsListRequestRunType
from ...types.payroll_runs_list_request_show_enum_origins import PayrollRunsListRequestShowEnumOrigins
from ...types.payroll_runs_retrieve_request_remote_fields import PayrollRunsRetrieveRequestRemoteFields
from ...types.payroll_runs_retrieve_request_show_enum_origins import PayrollRunsRetrieveRequestShowEnumOrigins


class PayrollRunsClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        ended_after: typing.Optional[str] = None,
        ended_before: typing.Optional[str] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        modified_after: typing.Optional[str] = None,
        modified_before: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        remote_fields: typing.Optional[PayrollRunsListRequestRemoteFields] = None,
        remote_id: typing.Optional[str] = None,
        run_type: typing.Optional[PayrollRunsListRequestRunType] = None,
        show_enum_origins: typing.Optional[PayrollRunsListRequestShowEnumOrigins] = None,
        started_after: typing.Optional[str] = None,
        started_before: typing.Optional[str] = None,
    ) -> PaginatedPayrollRunList:
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/hris/v1/payroll-runs"),
            params=remove_none_from_dict(
                {
                    "created_after": created_after,
                    "created_before": created_before,
                    "cursor": cursor,
                    "ended_after": ended_after,
                    "ended_before": ended_before,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "modified_after": modified_after,
                    "modified_before": modified_before,
                    "page_size": page_size,
                    "remote_fields": remote_fields,
                    "remote_id": remote_id,
                    "run_type": run_type,
                    "show_enum_origins": show_enum_origins,
                    "started_after": started_after,
                    "started_before": started_before,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedPayrollRunList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        id: str,
        *,
        include_remote_data: typing.Optional[bool] = None,
        remote_fields: typing.Optional[PayrollRunsRetrieveRequestRemoteFields] = None,
        show_enum_origins: typing.Optional[PayrollRunsRetrieveRequestShowEnumOrigins] = None,
    ) -> PayrollRun:
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/hris/v1/payroll-runs/{id}"),
            params=remove_none_from_dict(
                {
                    "include_remote_data": include_remote_data,
                    "remote_fields": remote_fields,
                    "show_enum_origins": show_enum_origins,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PayrollRun, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPayrollRunsClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        ended_after: typing.Optional[str] = None,
        ended_before: typing.Optional[str] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        modified_after: typing.Optional[str] = None,
        modified_before: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        remote_fields: typing.Optional[PayrollRunsListRequestRemoteFields] = None,
        remote_id: typing.Optional[str] = None,
        run_type: typing.Optional[PayrollRunsListRequestRunType] = None,
        show_enum_origins: typing.Optional[PayrollRunsListRequestShowEnumOrigins] = None,
        started_after: typing.Optional[str] = None,
        started_before: typing.Optional[str] = None,
    ) -> PaginatedPayrollRunList:
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/hris/v1/payroll-runs"),
            params=remove_none_from_dict(
                {
                    "created_after": created_after,
                    "created_before": created_before,
                    "cursor": cursor,
                    "ended_after": ended_after,
                    "ended_before": ended_before,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "modified_after": modified_after,
                    "modified_before": modified_before,
                    "page_size": page_size,
                    "remote_fields": remote_fields,
                    "remote_id": remote_id,
                    "run_type": run_type,
                    "show_enum_origins": show_enum_origins,
                    "started_after": started_after,
                    "started_before": started_before,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedPayrollRunList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        id: str,
        *,
        include_remote_data: typing.Optional[bool] = None,
        remote_fields: typing.Optional[PayrollRunsRetrieveRequestRemoteFields] = None,
        show_enum_origins: typing.Optional[PayrollRunsRetrieveRequestShowEnumOrigins] = None,
    ) -> PayrollRun:
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/hris/v1/payroll-runs/{id}"),
            params=remove_none_from_dict(
                {
                    "include_remote_data": include_remote_data,
                    "remote_fields": remote_fields,
                    "show_enum_origins": show_enum_origins,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PayrollRun, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
