# coding: utf-8

"""
    Readarr

    Readarr API docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel
from readarr.models.author_resource import AuthorResource
from readarr.models.book_resource import BookResource
from readarr.models.parsed_book_info import ParsedBookInfo

class ParseResource(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[int]
    title: Optional[str]
    parsed_book_info: Optional[ParsedBookInfo]
    author: Optional[AuthorResource]
    books: Optional[List]
    __properties = ["id", "title", "parsedBookInfo", "author", "books"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParseResource:
        """Create an instance of ParseResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of parsed_book_info
        if self.parsed_book_info:
            _dict['parsedBookInfo'] = self.parsed_book_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in books (list)
        _items = []
        if self.books:
            for _item in self.books:
                if _item:
                    _items.append(_item.to_dict())
            _dict['books'] = _items
        # set to None if title (nullable) is None
        if self.title is None:
            _dict['title'] = None

        # set to None if books (nullable) is None
        if self.books is None:
            _dict['books'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParseResource:
        """Create an instance of ParseResource from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ParseResource.parse_obj(obj)

        _obj = ParseResource.parse_obj({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "parsed_book_info": ParsedBookInfo.from_dict(obj.get("parsedBookInfo")) if obj.get("parsedBookInfo") is not None else None,
            "author": AuthorResource.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "books": [BookResource.from_dict(_item) for _item in obj.get("books")] if obj.get("books") is not None else None
        })
        return _obj

