
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftBREAKleftINDENTleftASSIGNleftPIPEBASHleftMATHleftINFIX_OPERATORleftEQUALSleftORleftANDleftNOTAND ASSIGN ASSIGN_RIGHT BASH BREAK DEFINE_FUNCTION DOUBLE_QUOTED_STRING ELSE EQUALS IF INDENT INFIX_OPERATOR LONG_SYMBOL LPAREN MAP MATH METHOD NOT NUMBER NUMBER_WITH_DOT OR PIPE RETURN RPAREN SHELL SINGLE_QUOTED_STRING SPECIAL SYMBOL THEN VARIABLE WILDCARD WILDCARD_RANGE WORD WORD_WITH_DOTlines : BREAK\n                 | INDENT BREAK\n        lines : line\n                 | line BREAK\n        lines : line BREAK lineslines : BREAK linesline : INDENT statementline : statementline : INDENTstatement : assignment\n                     | conditional\n                     | conjunction\n                     | definition\n                     | return_statement\n        return_statement : RETURN conjunctionfinal_statement : conjunction\n                           | return_statement\n        assignment : terms ASSIGN conjunctionassignment : conjunction ASSIGN_RIGHT termsdefinition : METHOD LPAREN terms RPAREN DEFINE_FUNCTION conjunctiondefinition : METHOD LPAREN RPAREN DEFINE_FUNCTION conjunctiondefinition : METHOD LPAREN terms RPAREN DEFINE_FUNCTIONdefinition : METHOD LPAREN RPAREN DEFINE_FUNCTIONscope : LPAREN conjunction RPARENconditional : IF conjunctionfull_conditional : IF conjunction THEN conjunction ELSE conjunctionconditional : IF conjunction THEN conjunction ELSEfull_conditional : IF conjunction THEN conjunctionconditional : IF conjunction THENconditional : IF conjunction THEN return_statementconditional : THEN final_statement\n                       | THEN\n        conditional : ELSE IF conjunction THEN final_statement\n                      | ELSE IF conjunction THEN\n        conditional : ELSE IF conjunctionconditional : ELSE final_statement\n                       | ELSE\n        conjunction : expression PIPE conjunctionconjunction : expressionexpression : expression BASH expressionexpression : expression MAP expressionexpression : full_conditionalexpression : basic_expressionexpression : SHELL expressionexpression : SHELLexpression : MATH expressionbasic_expression : join\n                            | logic_expression\n                            | terms\n        join : logic_expression AND join\n                | logic_expression AND logic_expression\n                | logic_expression OR join\n                | logic_expression OR logic_expression\n        logic_expression : terms INFIX_OPERATOR logic_expressionlogic_expression : logic_expression EQUALS logic_expressionlogic_expression : NOT termslogic_expression : termsterms : term termterms : term termsterms : termterm : SPECIAL\n                | WORD\n                | WORD_WITH_DOT\n        term : value\n                | method\n                | scope\n        value : WILDCARDvalue : WILDCARD_RANGEvalue : NUMBERvalue : NUMBER_WITH_DOTmethod : METHODvalue : VARIABLEvalue : SYMBOL\n                 | LONG_SYMBOL\n        value : SINGLE_QUOTED_STRINGvalue : DOUBLE_QUOTED_STRINGconditional : IF THEN\n                       | IF INDENT THEN\n                       | IF ELSE\n                       | IF INDENT ELSE\n                       | ELSE THEN\n                       | ELSE INDENT THEN\n        '
    
_lr_action_items = {'BREAK':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,44,45,50,51,52,54,55,56,57,58,60,61,68,69,70,71,72,76,78,79,80,81,83,84,85,86,87,88,89,90,93,94,95,96,97,98,100,101,102,104,105,106,107,108,109,110,112,113,],[2,2,-9,45,-8,-10,-11,-12,-13,-14,-49,-32,-37,-39,-71,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-7,2,-25,-77,-79,-49,-71,-31,-16,-17,-81,-36,-15,-58,-59,-44,-46,-56,-19,-18,-57,-54,-29,-78,-80,-35,-82,-38,-40,-41,-24,-51,-50,-53,-52,-55,-28,-30,-34,-23,-28,-27,-16,-33,-22,-21,-26,-20,]),'INDENT':([0,2,12,14,45,],[3,3,53,62,3,]),'IF':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,83,99,102,104,106,109,111,],[12,12,12,49,49,59,49,49,49,49,12,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'THEN':([0,2,3,12,14,15,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,50,53,54,55,62,69,70,71,72,76,80,81,82,86,88,89,90,93,94,95,96,97,98,105,112,],[13,13,13,51,60,-39,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,13,83,84,-49,-71,87,-58,-59,-44,-46,-56,-57,-54,99,102,-38,-40,-41,-24,-51,-50,-53,-52,-55,-28,-26,]),'ELSE':([0,2,3,12,15,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,53,54,55,69,70,71,72,76,80,81,88,89,90,93,94,95,96,97,98,100,105,107,112,],[14,14,14,52,-39,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,14,85,-49,-71,-58,-59,-44,-46,-56,-57,-54,-38,-40,-41,-24,-51,-50,-53,-52,-55,106,111,111,-26,]),'METHOD':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[16,16,16,55,55,55,-71,55,55,55,55,55,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,55,16,55,55,55,55,-71,55,55,55,55,55,55,55,55,55,55,-24,55,55,55,55,55,55,]),'RETURN':([0,2,3,13,14,45,83,102,],[18,18,18,18,18,18,18,18,]),'SHELL':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,83,99,102,104,106,109,111,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MATH':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,83,99,102,104,106,109,111,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'SPECIAL':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[24,24,24,24,24,24,-71,24,24,24,24,24,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,24,24,24,24,24,24,-71,24,24,24,24,24,24,24,24,24,24,-24,24,24,24,24,24,24,]),'WORD':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[25,25,25,25,25,25,-71,25,25,25,25,25,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,25,25,25,25,25,25,-71,25,25,25,25,25,25,25,25,25,25,-24,25,25,25,25,25,25,]),'WORD_WITH_DOT':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[26,26,26,26,26,26,-71,26,26,26,26,26,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,26,26,26,26,26,26,-71,26,26,26,26,26,26,26,26,26,26,-24,26,26,26,26,26,26,]),'WILDCARD':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[32,32,32,32,32,32,-71,32,32,32,32,32,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,32,32,32,32,32,32,-71,32,32,32,32,32,32,32,32,32,32,-24,32,32,32,32,32,32,]),'WILDCARD_RANGE':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[33,33,33,33,33,33,-71,33,33,33,33,33,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,33,33,33,33,33,33,-71,33,33,33,33,33,33,33,33,33,33,-24,33,33,33,33,33,33,]),'NUMBER':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[34,34,34,34,34,34,-71,34,34,34,34,34,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,34,34,34,34,34,34,-71,34,34,34,34,34,34,34,34,34,34,-24,34,34,34,34,34,34,]),'NUMBER_WITH_DOT':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[35,35,35,35,35,35,-71,35,35,35,35,35,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,35,35,35,35,35,35,-71,35,35,35,35,35,35,35,35,35,35,-24,35,35,35,35,35,35,]),'VARIABLE':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[36,36,36,36,36,36,-71,36,36,36,36,36,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,36,36,36,36,36,36,-71,36,36,36,36,36,36,36,36,36,36,-24,36,36,36,36,36,36,]),'SYMBOL':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[37,37,37,37,37,37,-71,37,37,37,37,37,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,37,37,37,37,37,37,-71,37,37,37,37,37,37,37,37,37,37,-24,37,37,37,37,37,37,]),'LONG_SYMBOL':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[38,38,38,38,38,38,-71,38,38,38,38,38,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,38,38,38,38,38,38,-71,38,38,38,38,38,38,38,38,38,38,-24,38,38,38,38,38,38,]),'SINGLE_QUOTED_STRING':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[39,39,39,39,39,39,-71,39,39,39,39,39,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,39,39,39,39,39,39,-71,39,39,39,39,39,39,39,39,39,39,-24,39,39,39,39,39,39,]),'DOUBLE_QUOTED_STRING':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[40,40,40,40,40,40,-71,40,40,40,40,40,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,40,40,40,40,40,40,-71,40,40,40,40,40,40,40,40,40,40,-24,40,40,40,40,40,40,]),'LPAREN':([0,2,3,12,13,14,16,17,18,19,22,23,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,55,59,63,64,65,66,69,73,74,75,83,93,99,102,104,106,109,111,],[17,17,17,17,17,17,66,17,17,17,17,17,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,17,17,17,17,17,17,-71,17,17,17,17,17,17,17,17,17,17,-24,17,17,17,17,17,17,]),'NOT':([0,2,3,12,13,14,17,18,22,23,45,47,48,49,59,63,64,65,73,74,75,83,99,102,104,106,109,111,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,50,51,52,54,55,56,57,58,60,61,68,69,70,71,72,76,77,78,79,80,81,83,84,85,86,87,88,89,90,93,94,95,96,97,98,100,101,102,104,105,106,107,108,109,110,112,113,],[0,-1,-9,-3,-8,-10,-11,-12,-13,-14,-49,-32,-37,-39,-71,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-6,-2,-7,-4,-25,-77,-79,-49,-71,-31,-16,-17,-81,-36,-15,-58,-59,-44,-46,-56,-5,-19,-18,-57,-54,-29,-78,-80,-35,-82,-38,-40,-41,-24,-51,-50,-53,-52,-55,-28,-30,-34,-23,-28,-27,-16,-33,-22,-21,-26,-20,]),'ASSIGN_RIGHT':([8,11,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,69,70,71,72,76,80,81,88,89,90,93,94,95,96,97,98,100,105,112,],[46,-49,-39,-71,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-49,-71,-58,-59,-44,-46,-56,-57,-54,-38,-40,-41,-24,-51,-50,-53,-52,-55,-28,-28,-26,]),'ASSIGN':([11,16,19,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,55,69,70,93,],[47,-71,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,-71,-58,-59,-24,]),'PIPE':([11,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,69,70,71,72,76,80,81,88,89,90,93,94,95,96,97,98,100,105,107,112,],[-49,63,-71,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-49,-71,-58,-59,-44,-46,-56,-57,-54,-38,-40,-41,-24,-51,-50,-53,-52,-55,-28,-28,-28,-26,]),'BASH':([11,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,69,70,71,72,76,80,81,88,89,90,93,94,95,96,97,98,100,105,107,112,],[-49,64,-71,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-49,-71,-58,-59,64,-46,-56,-57,-54,-38,-40,64,-24,-51,-50,-53,-52,-55,-28,-28,-28,-26,]),'MAP':([11,15,16,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,69,70,71,72,76,80,81,88,89,90,93,94,95,96,97,98,100,105,107,112,],[-49,65,-71,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-49,-71,-58,-59,65,-46,-56,-57,-54,-38,-40,65,-24,-51,-50,-53,-52,-55,-28,-28,-28,-26,]),'INFIX_OPERATOR':([11,16,19,24,25,26,27,28,29,32,33,34,35,36,37,38,39,40,54,55,69,70,80,93,],[48,-71,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-72,-73,-74,-75,-76,48,-71,-58,-59,48,-24,]),'AND':([11,16,19,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,54,55,69,70,76,80,81,93,94,96,98,],[-57,-71,-60,-61,-62,-63,-64,-65,-66,73,-67,-68,-69,-70,-72,-73,-74,-75,-76,-57,-71,-58,-59,-56,-57,-54,-24,73,73,-55,]),'OR':([11,16,19,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,54,55,69,70,76,80,81,93,94,96,98,],[-57,-71,-60,-61,-62,-63,-64,-65,-66,74,-67,-68,-69,-70,-72,-73,-74,-75,-76,-57,-71,-58,-59,-56,-57,-54,-24,74,74,-55,]),'EQUALS':([11,16,19,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,54,55,69,70,76,80,81,93,94,96,98,],[-57,-71,-60,-61,-62,-63,-64,-65,-66,75,-67,-68,-69,-70,-72,-73,-74,-75,-76,-57,-71,-58,-59,-56,-57,75,-24,75,75,-55,]),'RPAREN':([15,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,54,55,66,67,69,70,71,72,76,80,81,88,89,90,91,93,94,95,96,97,98,105,112,],[-39,-60,-42,-43,-45,-61,-62,-63,-64,-65,-66,-47,-48,-67,-68,-69,-70,-72,-73,-74,-75,-76,-49,-71,92,93,-58,-59,-44,-46,-56,-57,-54,-38,-40,-41,103,-24,-51,-50,-53,-52,-55,-28,-26,]),'DEFINE_FUNCTION':([92,103,],[104,109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'lines':([0,2,45,],[1,42,77,]),'line':([0,2,45,],[4,4,4,]),'statement':([0,2,3,45,],[5,5,44,5,]),'assignment':([0,2,3,45,],[6,6,6,6,]),'conditional':([0,2,3,45,],[7,7,7,7,]),'conjunction':([0,2,3,12,13,14,17,18,45,47,49,59,63,83,99,102,104,106,109,111,],[8,8,8,50,57,57,67,68,8,79,82,86,88,100,105,107,110,112,113,112,]),'definition':([0,2,3,45,],[9,9,9,9,]),'return_statement':([0,2,3,13,14,45,83,102,],[10,10,10,58,58,10,101,58,]),'terms':([0,2,3,12,13,14,17,18,19,22,23,41,45,46,47,48,49,59,63,64,65,66,69,73,74,75,83,99,102,104,106,109,111,],[11,11,11,54,54,54,54,54,70,54,54,76,11,78,54,80,54,54,54,54,54,91,70,80,80,80,54,54,54,54,54,54,54,]),'expression':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,83,99,102,104,106,109,111,],[15,15,15,15,15,15,15,15,71,72,15,15,15,15,15,89,90,15,15,15,15,15,15,15,]),'term':([0,2,3,12,13,14,17,18,19,22,23,41,45,46,47,48,49,59,63,64,65,66,69,73,74,75,83,99,102,104,106,109,111,],[19,19,19,19,19,19,19,19,69,19,19,19,19,19,19,19,19,19,19,19,19,19,69,19,19,19,19,19,19,19,19,19,19,]),'full_conditional':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,83,99,102,104,106,109,111,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'basic_expression':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,83,99,102,104,106,109,111,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'value':([0,2,3,12,13,14,17,18,19,22,23,41,45,46,47,48,49,59,63,64,65,66,69,73,74,75,83,99,102,104,106,109,111,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'method':([0,2,3,12,13,14,17,18,19,22,23,41,45,46,47,48,49,59,63,64,65,66,69,73,74,75,83,99,102,104,106,109,111,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'scope':([0,2,3,12,13,14,17,18,19,22,23,41,45,46,47,48,49,59,63,64,65,66,69,73,74,75,83,99,102,104,106,109,111,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'join':([0,2,3,12,13,14,17,18,22,23,45,47,49,59,63,64,65,73,74,83,99,102,104,106,109,111,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,95,97,30,30,30,30,30,30,30,]),'logic_expression':([0,2,3,12,13,14,17,18,22,23,45,47,48,49,59,63,64,65,73,74,75,83,99,102,104,106,109,111,],[31,31,31,31,31,31,31,31,31,31,31,31,81,31,31,31,31,31,94,96,98,31,31,31,31,31,31,31,]),'final_statement':([13,14,102,],[56,61,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> lines","S'",1,None,None,None),
  ('lines -> BREAK','lines',1,'p_lines_empty','parser.py',49),
  ('lines -> INDENT BREAK','lines',2,'p_lines_empty','parser.py',50),
  ('lines -> line','lines',1,'p_lines_suffix','parser.py',57),
  ('lines -> line BREAK','lines',2,'p_lines_suffix','parser.py',58),
  ('lines -> line BREAK lines','lines',3,'p_lines_infix','parser.py',63),
  ('lines -> BREAK lines','lines',2,'p_lines_prefix','parser.py',67),
  ('line -> INDENT statement','line',2,'p_line_indented','parser.py',71),
  ('line -> statement','line',1,'p_line','parser.py',76),
  ('line -> INDENT','line',1,'p_line_indent_empty','parser.py',80),
  ('statement -> assignment','statement',1,'p_statement','parser.py',85),
  ('statement -> conditional','statement',1,'p_statement','parser.py',86),
  ('statement -> conjunction','statement',1,'p_statement','parser.py',87),
  ('statement -> definition','statement',1,'p_statement','parser.py',88),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',89),
  ('return_statement -> RETURN conjunction','return_statement',2,'p_statement_return','parser.py',94),
  ('final_statement -> conjunction','final_statement',1,'p_final_statement','parser.py',98),
  ('final_statement -> return_statement','final_statement',1,'p_final_statement','parser.py',99),
  ('assignment -> terms ASSIGN conjunction','assignment',3,'p_assign','parser.py',104),
  ('assignment -> conjunction ASSIGN_RIGHT terms','assignment',3,'p_assign_right','parser.py',108),
  ('definition -> METHOD LPAREN terms RPAREN DEFINE_FUNCTION conjunction','definition',6,'p_def_inline_function','parser.py',112),
  ('definition -> METHOD LPAREN RPAREN DEFINE_FUNCTION conjunction','definition',5,'p_def_inline_function_constant','parser.py',116),
  ('definition -> METHOD LPAREN terms RPAREN DEFINE_FUNCTION','definition',5,'p_def_function','parser.py',120),
  ('definition -> METHOD LPAREN RPAREN DEFINE_FUNCTION','definition',4,'p_def_function_constant','parser.py',124),
  ('scope -> LPAREN conjunction RPAREN','scope',3,'p_scope','parser.py',128),
  ('conditional -> IF conjunction','conditional',2,'p_if','parser.py',133),
  ('full_conditional -> IF conjunction THEN conjunction ELSE conjunction','full_conditional',6,'p_full_conditional','parser.py',137),
  ('conditional -> IF conjunction THEN conjunction ELSE','conditional',5,'p_if_then_else','parser.py',142),
  ('full_conditional -> IF conjunction THEN conjunction','full_conditional',4,'p_if_then_inline','parser.py',147),
  ('conditional -> IF conjunction THEN','conditional',3,'p_if_then','parser.py',152),
  ('conditional -> IF conjunction THEN return_statement','conditional',4,'p_if_then_inline_final','parser.py',156),
  ('conditional -> THEN final_statement','conditional',2,'p_then','parser.py',161),
  ('conditional -> THEN','conditional',1,'p_then','parser.py',162),
  ('conditional -> ELSE IF conjunction THEN final_statement','conditional',5,'p_else_if_then','parser.py',170),
  ('conditional -> ELSE IF conjunction THEN','conditional',4,'p_else_if_then','parser.py',171),
  ('conditional -> ELSE IF conjunction','conditional',3,'p_else_if','parser.py',179),
  ('conditional -> ELSE final_statement','conditional',2,'p_else','parser.py',183),
  ('conditional -> ELSE','conditional',1,'p_else','parser.py',184),
  ('conjunction -> expression PIPE conjunction','conjunction',3,'p_conjunction_of_expressions','parser.py',192),
  ('conjunction -> expression','conjunction',1,'p_conjunction','parser.py',196),
  ('expression -> expression BASH expression','expression',3,'p_pipe_bash','parser.py',200),
  ('expression -> expression MAP expression','expression',3,'p_pipe_map','parser.py',204),
  ('expression -> full_conditional','expression',1,'p_expression_full_conditional','parser.py',208),
  ('expression -> basic_expression','expression',1,'p_expression','parser.py',212),
  ('expression -> SHELL expression','expression',2,'p_shell','parser.py',216),
  ('expression -> SHELL','expression',1,'p_shell_empty','parser.py',220),
  ('expression -> MATH expression','expression',2,'p_math','parser.py',224),
  ('basic_expression -> join','basic_expression',1,'p_basic_expression','parser.py',228),
  ('basic_expression -> logic_expression','basic_expression',1,'p_basic_expression','parser.py',229),
  ('basic_expression -> terms','basic_expression',1,'p_basic_expression','parser.py',230),
  ('join -> logic_expression AND join','join',3,'p_logic_binary','parser.py',235),
  ('join -> logic_expression AND logic_expression','join',3,'p_logic_binary','parser.py',236),
  ('join -> logic_expression OR join','join',3,'p_logic_binary','parser.py',237),
  ('join -> logic_expression OR logic_expression','join',3,'p_logic_binary','parser.py',238),
  ('logic_expression -> terms INFIX_OPERATOR logic_expression','logic_expression',3,'p_logic_expression_infix','parser.py',244),
  ('logic_expression -> logic_expression EQUALS logic_expression','logic_expression',3,'p_logic_expression_infix_equals','parser.py',248),
  ('logic_expression -> NOT terms','logic_expression',2,'p_logic_negation','parser.py',252),
  ('logic_expression -> terms','logic_expression',1,'p_logic','parser.py',257),
  ('terms -> term term','terms',2,'p_terms_pair','parser.py',261),
  ('terms -> term terms','terms',2,'p_terms_head_tail','parser.py',265),
  ('terms -> term','terms',1,'p_terms_singleton','parser.py',269),
  ('term -> SPECIAL','term',1,'p_term','parser.py',273),
  ('term -> WORD','term',1,'p_term','parser.py',274),
  ('term -> WORD_WITH_DOT','term',1,'p_term','parser.py',275),
  ('term -> value','term',1,'p_term_value','parser.py',280),
  ('term -> method','term',1,'p_term_value','parser.py',281),
  ('term -> scope','term',1,'p_term_value','parser.py',282),
  ('value -> WILDCARD','value',1,'p_value_wildcard','parser.py',287),
  ('value -> WILDCARD_RANGE','value',1,'p_value_wildcard_range','parser.py',291),
  ('value -> NUMBER','value',1,'p_value_number_int','parser.py',295),
  ('value -> NUMBER_WITH_DOT','value',1,'p_value_number_float','parser.py',299),
  ('method -> METHOD','method',1,'p_value_method','parser.py',303),
  ('value -> VARIABLE','value',1,'p_value_variable','parser.py',307),
  ('value -> SYMBOL','value',1,'p_value_symbol','parser.py',311),
  ('value -> LONG_SYMBOL','value',1,'p_value_symbol','parser.py',312),
  ('value -> SINGLE_QUOTED_STRING','value',1,'p_value_literal_string','parser.py',317),
  ('value -> DOUBLE_QUOTED_STRING','value',1,'p_value_string','parser.py',321),
  ('conditional -> IF THEN','conditional',2,'p_illegal_if_then','parser.py',325),
  ('conditional -> IF INDENT THEN','conditional',3,'p_illegal_if_then','parser.py',326),
  ('conditional -> IF ELSE','conditional',2,'p_illegal_if_then','parser.py',327),
  ('conditional -> IF INDENT ELSE','conditional',3,'p_illegal_if_then','parser.py',328),
  ('conditional -> ELSE THEN','conditional',2,'p_illegal_if_then','parser.py',329),
  ('conditional -> ELSE INDENT THEN','conditional',3,'p_illegal_if_then','parser.py',330),
]
