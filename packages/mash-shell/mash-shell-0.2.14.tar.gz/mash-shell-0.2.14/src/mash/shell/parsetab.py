
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftBREAKleftINDENTleftASSIGNleftPIPEBASHleftMATHleftINFIX_OPERATORleftEQUALSleftORleftANDleftNOTAND ASSIGN ASSIGN_RIGHT BASH BREAK DEFINE_FUNCTION DOUBLE_QUOTED_STRING ELSE EQUALS IF INDENT INFIX_OPERATOR LONG_SYMBOL LPAREN MAP MATH METHOD NOT NUMBER NUMBER_WITH_DOT OR PIPE RETURN RPAREN SHELL SINGLE_QUOTED_STRING SPACE SPECIAL SYMBOL THEN VARIABLE WILDCARD WILDCARD_RANGE WORD WORD_WITH_DOTlines : BREAK\n                 | INDENT BREAK\n        lines : line\n                 | line BREAK\n        lines : line BREAK lineslines : BREAK linesline : INDENT statementline : statementline : INDENTstatement : assignment\n                     | conditional\n                     | definition\n                     | inner_statement\n                     | return_statement\n        return_statement : RETURN inner_statementinner_statement : conjunction\n                           | full_conditional\n        final_statement : conjunction\n                           | return_statement\n        assignment : terms ASSIGN inner_statementassignment : inner_statement ASSIGN_RIGHT termsdefinition : METHOD LPAREN terms RPAREN DEFINE_FUNCTION inner_statementdefinition : METHOD LPAREN RPAREN DEFINE_FUNCTION inner_statementdefinition : METHOD LPAREN terms RPAREN DEFINE_FUNCTIONdefinition : METHOD LPAREN RPAREN DEFINE_FUNCTIONscope : LPAREN inner_statement RPARENconditional : IF conjunctionfull_conditional : IF conjunction THEN conjunction ELSE conjunctionfull_conditional : IF conjunction THEN conjunctionconditional : IF conjunction THEN conjunction ELSEconditional : IF conjunction THENconditional : IF conjunction THEN return_statementconditional : THEN final_statement\n                       | THEN\n        conditional : ELSE IF conjunction THEN final_statement\n                      | ELSE IF conjunction THEN\n        conditional : ELSE IF conjunctionconditional : ELSE final_statement\n                       | ELSE\n        conditional : conjunction\n                       | full_conditional\n        conjunction : expression PIPE conjunctionconjunction : expressionexpression : expression BASH expressionexpression : expression MAP expressionexpression : full_conditionalexpression : basic_expressionexpression : SHELL expressionexpression : SHELLexpression : MATH expressionbasic_expression : join\n                            | logic_expression\n                            | terms\n        join : logic_expression AND join\n                | logic_expression AND logic_expression\n                | logic_expression OR join\n                | logic_expression OR logic_expression\n        logic_expression : terms INFIX_OPERATOR logic_expressionlogic_expression : logic_expression EQUALS logic_expressionlogic_expression : NOT termslogic_expression : termsterms : term termterms : term termsterms : termterm : SPECIAL\n                | WORD\n                | WORD_WITH_DOT\n        term : value\n                | method\n                | scope\n        value : WILDCARDvalue : WILDCARD_RANGEvalue : NUMBERvalue : NUMBER_WITH_DOTmethod : METHODvalue : VARIABLEvalue : SYMBOL\n                 | LONG_SYMBOL\n        value : SINGLE_QUOTED_STRINGvalue : DOUBLE_QUOTED_STRINGconditional : IF THEN\n                       | IF INDENT THEN\n                       | IF ELSE\n                       | IF INDENT ELSE\n                       | ELSE THEN\n                       | ELSE INDENT THEN\n        '
    
_lr_action_items = {'BREAK':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,45,46,51,52,53,55,56,57,58,59,60,62,63,67,68,69,70,71,75,76,80,82,83,84,85,87,88,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,108,109,110,111,112,113,114,116,117,],[2,2,-9,46,-8,-10,-11,-12,-13,-14,-53,-16,-34,-39,-17,-75,-64,-43,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-7,2,-27,-81,-83,-46,-53,-75,-33,-18,-19,-85,-38,-16,-17,-15,-62,-63,-48,-50,-60,-21,-20,-61,-58,-31,-82,-84,-37,-86,-26,-42,-44,-45,-55,-54,-57,-56,-59,-29,-32,-36,-25,-29,-30,-18,-35,-24,-23,-28,-22,]),'INDENT':([0,2,12,15,46,],[3,3,54,64,3,]),'IF':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,87,103,106,108,110,113,115,],[12,12,12,50,50,61,50,50,50,50,12,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'THEN':([0,2,3,12,15,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,46,51,54,55,56,57,64,70,71,75,76,80,84,85,86,90,94,95,96,97,98,99,100,101,102,109,116,],[14,14,14,52,62,-64,-43,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,14,87,88,-46,-53,-75,91,-62,-63,-48,-50,-60,-61,-58,103,106,-26,-42,-44,-45,-55,-54,-57,-56,-59,-29,-28,]),'ELSE':([0,2,3,12,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,46,54,55,56,57,70,71,75,76,80,84,85,94,95,96,97,98,99,100,101,102,104,109,111,116,],[15,15,15,53,-64,-43,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,15,89,-46,-53,-75,-62,-63,-48,-50,-60,-61,-58,-26,-42,-44,-45,-55,-54,-57,-56,-59,110,115,115,-28,]),'METHOD':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[17,17,17,57,57,57,-75,57,57,57,-65,-66,-67,-68,-69,-70,57,57,-71,-72,-73,-74,-76,-77,-78,-79,-80,57,17,57,57,57,57,-75,57,57,57,57,57,57,57,57,57,57,-26,57,57,57,57,57,57,]),'RETURN':([0,2,3,14,15,46,87,106,],[19,19,19,19,19,19,19,19,]),'SPECIAL':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[22,22,22,22,22,22,-75,22,22,22,-65,-66,-67,-68,-69,-70,22,22,-71,-72,-73,-74,-76,-77,-78,-79,-80,22,22,22,22,22,22,-75,22,22,22,22,22,22,22,22,22,22,-26,22,22,22,22,22,22,]),'WORD':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[23,23,23,23,23,23,-75,23,23,23,-65,-66,-67,-68,-69,-70,23,23,-71,-72,-73,-74,-76,-77,-78,-79,-80,23,23,23,23,23,23,-75,23,23,23,23,23,23,23,23,23,23,-26,23,23,23,23,23,23,]),'WORD_WITH_DOT':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[24,24,24,24,24,24,-75,24,24,24,-65,-66,-67,-68,-69,-70,24,24,-71,-72,-73,-74,-76,-77,-78,-79,-80,24,24,24,24,24,24,-75,24,24,24,24,24,24,24,24,24,24,-26,24,24,24,24,24,24,]),'SHELL':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,87,103,106,108,110,113,115,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'MATH':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,87,103,106,108,110,113,115,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'WILDCARD':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[31,31,31,31,31,31,-75,31,31,31,-65,-66,-67,-68,-69,-70,31,31,-71,-72,-73,-74,-76,-77,-78,-79,-80,31,31,31,31,31,31,-75,31,31,31,31,31,31,31,31,31,31,-26,31,31,31,31,31,31,]),'WILDCARD_RANGE':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[32,32,32,32,32,32,-75,32,32,32,-65,-66,-67,-68,-69,-70,32,32,-71,-72,-73,-74,-76,-77,-78,-79,-80,32,32,32,32,32,32,-75,32,32,32,32,32,32,32,32,32,32,-26,32,32,32,32,32,32,]),'NUMBER':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[33,33,33,33,33,33,-75,33,33,33,-65,-66,-67,-68,-69,-70,33,33,-71,-72,-73,-74,-76,-77,-78,-79,-80,33,33,33,33,33,33,-75,33,33,33,33,33,33,33,33,33,33,-26,33,33,33,33,33,33,]),'NUMBER_WITH_DOT':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[34,34,34,34,34,34,-75,34,34,34,-65,-66,-67,-68,-69,-70,34,34,-71,-72,-73,-74,-76,-77,-78,-79,-80,34,34,34,34,34,34,-75,34,34,34,34,34,34,34,34,34,34,-26,34,34,34,34,34,34,]),'VARIABLE':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[35,35,35,35,35,35,-75,35,35,35,-65,-66,-67,-68,-69,-70,35,35,-71,-72,-73,-74,-76,-77,-78,-79,-80,35,35,35,35,35,35,-75,35,35,35,35,35,35,35,35,35,35,-26,35,35,35,35,35,35,]),'SYMBOL':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[36,36,36,36,36,36,-75,36,36,36,-65,-66,-67,-68,-69,-70,36,36,-71,-72,-73,-74,-76,-77,-78,-79,-80,36,36,36,36,36,36,-75,36,36,36,36,36,36,36,36,36,36,-26,36,36,36,36,36,36,]),'LONG_SYMBOL':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[37,37,37,37,37,37,-75,37,37,37,-65,-66,-67,-68,-69,-70,37,37,-71,-72,-73,-74,-76,-77,-78,-79,-80,37,37,37,37,37,37,-75,37,37,37,37,37,37,37,37,37,37,-26,37,37,37,37,37,37,]),'SINGLE_QUOTED_STRING':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[38,38,38,38,38,38,-75,38,38,38,-65,-66,-67,-68,-69,-70,38,38,-71,-72,-73,-74,-76,-77,-78,-79,-80,38,38,38,38,38,38,-75,38,38,38,38,38,38,38,38,38,38,-26,38,38,38,38,38,38,]),'DOUBLE_QUOTED_STRING':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[39,39,39,39,39,39,-75,39,39,39,-65,-66,-67,-68,-69,-70,39,39,-71,-72,-73,-74,-76,-77,-78,-79,-80,39,39,39,39,39,39,-75,39,39,39,39,39,39,39,39,39,39,-26,39,39,39,39,39,39,]),'LPAREN':([0,2,3,12,14,15,17,18,19,20,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,42,46,47,48,49,50,57,61,65,70,72,73,74,77,78,79,87,94,103,106,108,110,113,115,],[18,18,18,18,18,18,65,18,18,18,-65,-66,-67,-68,-69,-70,18,18,-71,-72,-73,-74,-76,-77,-78,-79,-80,18,18,18,18,18,18,-75,18,18,18,18,18,18,18,18,18,18,-26,18,18,18,18,18,18,]),'NOT':([0,2,3,12,14,15,18,19,29,30,46,48,49,50,61,72,73,74,77,78,79,87,103,106,108,110,113,115,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,51,52,53,55,56,57,58,59,60,62,63,67,68,69,70,71,75,76,80,81,82,83,84,85,87,88,89,90,91,94,95,96,97,98,99,100,101,102,104,105,106,108,109,110,111,112,113,114,116,117,],[0,-1,-9,-3,-8,-10,-11,-12,-13,-14,-53,-16,-34,-39,-17,-75,-64,-43,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-6,-2,-7,-4,-27,-81,-83,-46,-53,-75,-33,-18,-19,-85,-38,-16,-17,-15,-62,-63,-48,-50,-60,-5,-21,-20,-61,-58,-31,-82,-84,-37,-86,-26,-42,-44,-45,-55,-54,-57,-56,-59,-29,-32,-36,-25,-29,-30,-18,-35,-24,-23,-28,-22,]),'ASSIGN_RIGHT':([9,11,13,16,17,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,55,56,57,70,71,75,76,80,84,85,94,95,96,97,98,99,100,101,102,104,109,116,],[47,-53,-16,-17,-75,-64,-43,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-46,-53,-75,-62,-63,-48,-50,-60,-61,-58,-26,-42,-44,-45,-55,-54,-57,-56,-59,-29,-29,-28,]),'ASSIGN':([11,17,20,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,57,70,71,94,],[48,-75,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,-75,-62,-63,-26,]),'PIPE':([11,16,17,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,55,56,57,68,70,71,75,76,80,84,85,94,95,96,97,98,99,100,101,102,104,109,111,116,],[-53,-46,-75,-64,72,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-46,-53,-75,-46,-62,-63,-48,-50,-60,-61,-58,-26,-42,-44,-45,-55,-54,-57,-56,-59,-29,-29,-29,-28,]),'BASH':([11,16,17,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,55,56,57,68,70,71,75,76,80,84,85,94,95,96,97,98,99,100,101,102,104,109,111,116,],[-53,-46,-75,-64,73,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-46,-53,-75,-46,-62,-63,73,-50,-60,-61,-58,-26,-42,-44,73,-55,-54,-57,-56,-59,-29,-29,-29,-28,]),'MAP':([11,16,17,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,55,56,57,68,70,71,75,76,80,84,85,94,95,96,97,98,99,100,101,102,104,109,111,116,],[-53,-46,-75,-64,74,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-46,-53,-75,-46,-62,-63,74,-50,-60,-61,-58,-26,-42,-44,74,-55,-54,-57,-56,-59,-29,-29,-29,-28,]),'INFIX_OPERATOR':([11,17,20,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,56,57,70,71,84,94,],[49,-75,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,49,-75,-62,-63,49,-26,]),'AND':([11,17,20,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,41,56,57,70,71,80,84,85,94,98,100,102,],[-61,-75,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,77,-61,-75,-62,-63,-60,-61,-58,-26,77,77,-59,]),'OR':([11,17,20,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,41,56,57,70,71,80,84,85,94,98,100,102,],[-61,-75,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,78,-61,-75,-62,-63,-60,-61,-58,-26,78,78,-59,]),'EQUALS':([11,17,20,22,23,24,25,26,27,31,32,33,34,35,36,37,38,39,41,56,57,70,71,80,84,85,94,98,100,102,],[-61,-75,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-76,-77,-78,-79,-80,79,-61,-75,-62,-63,-60,-61,79,-26,79,79,-59,]),'RPAREN':([20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,55,56,57,65,66,67,68,70,71,75,76,80,84,85,92,94,95,96,97,98,99,100,101,102,109,116,],[-64,-43,-65,-66,-67,-68,-69,-70,-47,-49,-71,-72,-73,-74,-76,-77,-78,-79,-80,-51,-52,-46,-53,-75,93,94,-16,-17,-62,-63,-48,-50,-60,-61,-58,107,-26,-42,-44,-45,-55,-54,-57,-56,-59,-29,-28,]),'DEFINE_FUNCTION':([93,107,],[108,113,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'lines':([0,2,46,],[1,43,81,]),'line':([0,2,46,],[4,4,4,]),'statement':([0,2,3,46,],[5,5,45,5,]),'assignment':([0,2,3,46,],[6,6,6,6,]),'conditional':([0,2,3,46,],[7,7,7,7,]),'definition':([0,2,3,46,],[8,8,8,8,]),'inner_statement':([0,2,3,18,19,46,48,108,113,],[9,9,9,66,69,9,83,114,117,]),'return_statement':([0,2,3,14,15,46,87,106,],[10,10,10,60,60,10,105,60,]),'terms':([0,2,3,12,14,15,18,19,20,29,30,42,46,47,48,49,50,61,65,70,72,73,74,77,78,79,87,103,106,108,110,113,115,],[11,11,11,56,56,56,56,56,71,56,56,80,11,82,56,84,56,56,92,71,56,56,56,84,84,84,56,56,56,56,56,56,56,]),'conjunction':([0,2,3,12,14,15,18,19,46,48,50,61,72,87,103,106,108,110,113,115,],[13,13,13,51,59,59,67,67,13,67,86,90,95,104,109,111,67,116,67,116,]),'full_conditional':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,87,103,106,108,110,113,115,],[16,16,16,55,55,55,68,68,55,55,16,68,55,55,55,55,55,55,55,55,68,55,68,55,]),'term':([0,2,3,12,14,15,18,19,20,29,30,42,46,47,48,49,50,61,65,70,72,73,74,77,78,79,87,103,106,108,110,113,115,],[20,20,20,20,20,20,20,20,70,20,20,20,20,20,20,20,20,20,20,70,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'expression':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,87,103,106,108,110,113,115,],[21,21,21,21,21,21,21,21,75,76,21,21,21,21,21,96,97,21,21,21,21,21,21,21,]),'value':([0,2,3,12,14,15,18,19,20,29,30,42,46,47,48,49,50,61,65,70,72,73,74,77,78,79,87,103,106,108,110,113,115,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'method':([0,2,3,12,14,15,18,19,20,29,30,42,46,47,48,49,50,61,65,70,72,73,74,77,78,79,87,103,106,108,110,113,115,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'scope':([0,2,3,12,14,15,18,19,20,29,30,42,46,47,48,49,50,61,65,70,72,73,74,77,78,79,87,103,106,108,110,113,115,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'basic_expression':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,87,103,106,108,110,113,115,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'join':([0,2,3,12,14,15,18,19,29,30,46,48,50,61,72,73,74,77,78,87,103,106,108,110,113,115,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,99,101,40,40,40,40,40,40,40,]),'logic_expression':([0,2,3,12,14,15,18,19,29,30,46,48,49,50,61,72,73,74,77,78,79,87,103,106,108,110,113,115,],[41,41,41,41,41,41,41,41,41,41,41,41,85,41,41,41,41,41,98,100,102,41,41,41,41,41,41,41,]),'final_statement':([14,15,106,],[58,63,112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> lines","S'",1,None,None,None),
  ('lines -> BREAK','lines',1,'p_lines_empty','lex_parser.py',237),
  ('lines -> INDENT BREAK','lines',2,'p_lines_empty','lex_parser.py',238),
  ('lines -> line','lines',1,'p_lines_suffix','lex_parser.py',245),
  ('lines -> line BREAK','lines',2,'p_lines_suffix','lex_parser.py',246),
  ('lines -> line BREAK lines','lines',3,'p_lines_infix','lex_parser.py',251),
  ('lines -> BREAK lines','lines',2,'p_lines_prefix','lex_parser.py',255),
  ('line -> INDENT statement','line',2,'p_line_indented','lex_parser.py',259),
  ('line -> statement','line',1,'p_line','lex_parser.py',264),
  ('line -> INDENT','line',1,'p_line_indent_empty','lex_parser.py',268),
  ('statement -> assignment','statement',1,'p_statement','lex_parser.py',273),
  ('statement -> conditional','statement',1,'p_statement','lex_parser.py',274),
  ('statement -> definition','statement',1,'p_statement','lex_parser.py',275),
  ('statement -> inner_statement','statement',1,'p_statement','lex_parser.py',276),
  ('statement -> return_statement','statement',1,'p_statement','lex_parser.py',277),
  ('return_statement -> RETURN inner_statement','return_statement',2,'p_statement_return','lex_parser.py',282),
  ('inner_statement -> conjunction','inner_statement',1,'p_inner_statement','lex_parser.py',286),
  ('inner_statement -> full_conditional','inner_statement',1,'p_inner_statement','lex_parser.py',287),
  ('final_statement -> conjunction','final_statement',1,'p_final_statement','lex_parser.py',292),
  ('final_statement -> return_statement','final_statement',1,'p_final_statement','lex_parser.py',293),
  ('assignment -> terms ASSIGN inner_statement','assignment',3,'p_assign','lex_parser.py',298),
  ('assignment -> inner_statement ASSIGN_RIGHT terms','assignment',3,'p_assign_right','lex_parser.py',302),
  ('definition -> METHOD LPAREN terms RPAREN DEFINE_FUNCTION inner_statement','definition',6,'p_def_inline_function','lex_parser.py',306),
  ('definition -> METHOD LPAREN RPAREN DEFINE_FUNCTION inner_statement','definition',5,'p_def_inline_function_constant','lex_parser.py',310),
  ('definition -> METHOD LPAREN terms RPAREN DEFINE_FUNCTION','definition',5,'p_def_function','lex_parser.py',314),
  ('definition -> METHOD LPAREN RPAREN DEFINE_FUNCTION','definition',4,'p_def_function_constant','lex_parser.py',318),
  ('scope -> LPAREN inner_statement RPAREN','scope',3,'p_scope','lex_parser.py',322),
  ('conditional -> IF conjunction','conditional',2,'p_if','lex_parser.py',327),
  ('full_conditional -> IF conjunction THEN conjunction ELSE conjunction','full_conditional',6,'p_full_conditional','lex_parser.py',331),
  ('full_conditional -> IF conjunction THEN conjunction','full_conditional',4,'p_if_then_inline','lex_parser.py',336),
  ('conditional -> IF conjunction THEN conjunction ELSE','conditional',5,'p_if_then_else','lex_parser.py',341),
  ('conditional -> IF conjunction THEN','conditional',3,'p_if_then','lex_parser.py',346),
  ('conditional -> IF conjunction THEN return_statement','conditional',4,'p_if_then_inline_final','lex_parser.py',350),
  ('conditional -> THEN final_statement','conditional',2,'p_then','lex_parser.py',355),
  ('conditional -> THEN','conditional',1,'p_then','lex_parser.py',356),
  ('conditional -> ELSE IF conjunction THEN final_statement','conditional',5,'p_else_if_then','lex_parser.py',364),
  ('conditional -> ELSE IF conjunction THEN','conditional',4,'p_else_if_then','lex_parser.py',365),
  ('conditional -> ELSE IF conjunction','conditional',3,'p_else_if','lex_parser.py',373),
  ('conditional -> ELSE final_statement','conditional',2,'p_else','lex_parser.py',377),
  ('conditional -> ELSE','conditional',1,'p_else','lex_parser.py',378),
  ('conditional -> conjunction','conditional',1,'p_conditional','lex_parser.py',386),
  ('conditional -> full_conditional','conditional',1,'p_conditional','lex_parser.py',387),
  ('conjunction -> expression PIPE conjunction','conjunction',3,'p_pipe_py','lex_parser.py',392),
  ('conjunction -> expression','conjunction',1,'p_conjunction','lex_parser.py',396),
  ('expression -> expression BASH expression','expression',3,'p_pipe_bash','lex_parser.py',400),
  ('expression -> expression MAP expression','expression',3,'p_pipe_map','lex_parser.py',404),
  ('expression -> full_conditional','expression',1,'p_expression_full_conditional','lex_parser.py',408),
  ('expression -> basic_expression','expression',1,'p_expression','lex_parser.py',412),
  ('expression -> SHELL expression','expression',2,'p_shell','lex_parser.py',416),
  ('expression -> SHELL','expression',1,'p_shell_empty','lex_parser.py',420),
  ('expression -> MATH expression','expression',2,'p_math','lex_parser.py',424),
  ('basic_expression -> join','basic_expression',1,'p_basic_expression','lex_parser.py',428),
  ('basic_expression -> logic_expression','basic_expression',1,'p_basic_expression','lex_parser.py',429),
  ('basic_expression -> terms','basic_expression',1,'p_basic_expression','lex_parser.py',430),
  ('join -> logic_expression AND join','join',3,'p_logic_binary','lex_parser.py',435),
  ('join -> logic_expression AND logic_expression','join',3,'p_logic_binary','lex_parser.py',436),
  ('join -> logic_expression OR join','join',3,'p_logic_binary','lex_parser.py',437),
  ('join -> logic_expression OR logic_expression','join',3,'p_logic_binary','lex_parser.py',438),
  ('logic_expression -> terms INFIX_OPERATOR logic_expression','logic_expression',3,'p_logic_expression_infix','lex_parser.py',444),
  ('logic_expression -> logic_expression EQUALS logic_expression','logic_expression',3,'p_logic_expression_infix_equals','lex_parser.py',448),
  ('logic_expression -> NOT terms','logic_expression',2,'p_logic_negation','lex_parser.py',452),
  ('logic_expression -> terms','logic_expression',1,'p_logic','lex_parser.py',457),
  ('terms -> term term','terms',2,'p_terms_pair','lex_parser.py',461),
  ('terms -> term terms','terms',2,'p_terms_head_tail','lex_parser.py',465),
  ('terms -> term','terms',1,'p_terms_singleton','lex_parser.py',469),
  ('term -> SPECIAL','term',1,'p_term','lex_parser.py',473),
  ('term -> WORD','term',1,'p_term','lex_parser.py',474),
  ('term -> WORD_WITH_DOT','term',1,'p_term','lex_parser.py',475),
  ('term -> value','term',1,'p_term_value','lex_parser.py',480),
  ('term -> method','term',1,'p_term_value','lex_parser.py',481),
  ('term -> scope','term',1,'p_term_value','lex_parser.py',482),
  ('value -> WILDCARD','value',1,'p_value_wildcard','lex_parser.py',487),
  ('value -> WILDCARD_RANGE','value',1,'p_value_wildcard_range','lex_parser.py',491),
  ('value -> NUMBER','value',1,'p_value_number_int','lex_parser.py',495),
  ('value -> NUMBER_WITH_DOT','value',1,'p_value_number_float','lex_parser.py',499),
  ('method -> METHOD','method',1,'p_value_method','lex_parser.py',503),
  ('value -> VARIABLE','value',1,'p_value_variable','lex_parser.py',507),
  ('value -> SYMBOL','value',1,'p_value_symbol','lex_parser.py',511),
  ('value -> LONG_SYMBOL','value',1,'p_value_symbol','lex_parser.py',512),
  ('value -> SINGLE_QUOTED_STRING','value',1,'p_value_literal_string','lex_parser.py',517),
  ('value -> DOUBLE_QUOTED_STRING','value',1,'p_value_string','lex_parser.py',521),
  ('conditional -> IF THEN','conditional',2,'p_illegal_if_then','lex_parser.py',525),
  ('conditional -> IF INDENT THEN','conditional',3,'p_illegal_if_then','lex_parser.py',526),
  ('conditional -> IF ELSE','conditional',2,'p_illegal_if_then','lex_parser.py',527),
  ('conditional -> IF INDENT ELSE','conditional',3,'p_illegal_if_then','lex_parser.py',528),
  ('conditional -> ELSE THEN','conditional',2,'p_illegal_if_then','lex_parser.py',529),
  ('conditional -> ELSE INDENT THEN','conditional',3,'p_illegal_if_then','lex_parser.py',530),
]
