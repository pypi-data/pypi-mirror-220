"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ...auth.v1.user_service_pb2
import grpc

class UserServiceStub:
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "User Service"
        version: "1.0"
        contact: {
          name: "User Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/auth/v1/user"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/auth/v1/user"
      }
    };

    The service that handles the CRUD of User.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateUser: grpc.UnaryUnaryMultiCallable[
        auth.v1.user_service_pb2.CreateUserRequest,
        auth.v1.user_service_pb2.CreateUserResponse]
    """Creates a User."""

    GetUser: grpc.UnaryUnaryMultiCallable[
        auth.v1.user_service_pb2.GetUserRequest,
        auth.v1.user_service_pb2.GetUserResponse]
    """Gets a User."""

    UpdateUser: grpc.UnaryUnaryMultiCallable[
        auth.v1.user_service_pb2.UpdateUserRequest,
        auth.v1.user_service_pb2.UpdateUserResponse]
    """Updates a User."""

    ListUsers: grpc.UnaryUnaryMultiCallable[
        auth.v1.user_service_pb2.ListUsersRequest,
        auth.v1.user_service_pb2.ListUsersResponse]
    """Lists Users in a Location."""

    DeleteUser: grpc.UnaryUnaryMultiCallable[
        auth.v1.user_service_pb2.DeleteUserRequest,
        auth.v1.user_service_pb2.DeleteUserResponse]
    """Deletes a User."""

    DeleteUsers: grpc.UnaryUnaryMultiCallable[
        auth.v1.user_service_pb2.DeleteUsersRequest,
        auth.v1.user_service_pb2.DeleteUsersResponse]
    """Batch delete User by filter."""


class UserServiceServicer(metaclass=abc.ABCMeta):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "User Service"
        version: "1.0"
        contact: {
          name: "User Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/auth/v1/user"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/auth/v1/user"
      }
    };

    The service that handles the CRUD of User.
    """
    @abc.abstractmethod
    def CreateUser(self,
        request: auth.v1.user_service_pb2.CreateUserRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.user_service_pb2.CreateUserResponse:
        """Creates a User."""
        pass

    @abc.abstractmethod
    def GetUser(self,
        request: auth.v1.user_service_pb2.GetUserRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.user_service_pb2.GetUserResponse:
        """Gets a User."""
        pass

    @abc.abstractmethod
    def UpdateUser(self,
        request: auth.v1.user_service_pb2.UpdateUserRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.user_service_pb2.UpdateUserResponse:
        """Updates a User."""
        pass

    @abc.abstractmethod
    def ListUsers(self,
        request: auth.v1.user_service_pb2.ListUsersRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.user_service_pb2.ListUsersResponse:
        """Lists Users in a Location."""
        pass

    @abc.abstractmethod
    def DeleteUser(self,
        request: auth.v1.user_service_pb2.DeleteUserRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.user_service_pb2.DeleteUserResponse:
        """Deletes a User."""
        pass

    @abc.abstractmethod
    def DeleteUsers(self,
        request: auth.v1.user_service_pb2.DeleteUsersRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.user_service_pb2.DeleteUsersResponse:
        """Batch delete User by filter."""
        pass


def add_UserServiceServicer_to_server(servicer: UserServiceServicer, server: grpc.Server) -> None: ...
