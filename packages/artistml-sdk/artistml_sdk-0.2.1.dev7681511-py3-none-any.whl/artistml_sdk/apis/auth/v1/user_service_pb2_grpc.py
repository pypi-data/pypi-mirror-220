# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...auth.v1 import user_service_pb2 as auth_dot_v1_dot_user__service__pb2


class UserServiceStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "User Service"
    version: "1.0"
    contact: {
    name: "User Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/auth/v1/user"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/auth/v1/user"
    }
    };

    The service that handles the CRUD of User.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/auth.v1.UserService/CreateUser',
                request_serializer=auth_dot_v1_dot_user__service__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_user__service__pb2.CreateUserResponse.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/auth.v1.UserService/GetUser',
                request_serializer=auth_dot_v1_dot_user__service__pb2.GetUserRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_user__service__pb2.GetUserResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/auth.v1.UserService/UpdateUser',
                request_serializer=auth_dot_v1_dot_user__service__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_user__service__pb2.UpdateUserResponse.FromString,
                )
        self.ListUsers = channel.unary_unary(
                '/auth.v1.UserService/ListUsers',
                request_serializer=auth_dot_v1_dot_user__service__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_user__service__pb2.ListUsersResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/auth.v1.UserService/DeleteUser',
                request_serializer=auth_dot_v1_dot_user__service__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_user__service__pb2.DeleteUserResponse.FromString,
                )
        self.DeleteUsers = channel.unary_unary(
                '/auth.v1.UserService/DeleteUsers',
                request_serializer=auth_dot_v1_dot_user__service__pb2.DeleteUsersRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_user__service__pb2.DeleteUsersResponse.FromString,
                )


class UserServiceServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "User Service"
    version: "1.0"
    contact: {
    name: "User Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/auth/v1/user"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/auth/v1/user"
    }
    };

    The service that handles the CRUD of User.
    """

    def CreateUser(self, request, context):
        """Creates a User.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Gets a User.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Updates a User.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Lists Users in a Location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Deletes a User.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUsers(self, request, context):
        """Batch delete User by filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=auth_dot_v1_dot_user__service__pb2.CreateUserRequest.FromString,
                    response_serializer=auth_dot_v1_dot_user__service__pb2.CreateUserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=auth_dot_v1_dot_user__service__pb2.GetUserRequest.FromString,
                    response_serializer=auth_dot_v1_dot_user__service__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=auth_dot_v1_dot_user__service__pb2.UpdateUserRequest.FromString,
                    response_serializer=auth_dot_v1_dot_user__service__pb2.UpdateUserResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=auth_dot_v1_dot_user__service__pb2.ListUsersRequest.FromString,
                    response_serializer=auth_dot_v1_dot_user__service__pb2.ListUsersResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=auth_dot_v1_dot_user__service__pb2.DeleteUserRequest.FromString,
                    response_serializer=auth_dot_v1_dot_user__service__pb2.DeleteUserResponse.SerializeToString,
            ),
            'DeleteUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUsers,
                    request_deserializer=auth_dot_v1_dot_user__service__pb2.DeleteUsersRequest.FromString,
                    response_serializer=auth_dot_v1_dot_user__service__pb2.DeleteUsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.v1.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "User Service"
    version: "1.0"
    contact: {
    name: "User Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/auth/v1/user"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/auth/v1/user"
    }
    };

    The service that handles the CRUD of User.
    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.UserService/CreateUser',
            auth_dot_v1_dot_user__service__pb2.CreateUserRequest.SerializeToString,
            auth_dot_v1_dot_user__service__pb2.CreateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.UserService/GetUser',
            auth_dot_v1_dot_user__service__pb2.GetUserRequest.SerializeToString,
            auth_dot_v1_dot_user__service__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.UserService/UpdateUser',
            auth_dot_v1_dot_user__service__pb2.UpdateUserRequest.SerializeToString,
            auth_dot_v1_dot_user__service__pb2.UpdateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.UserService/ListUsers',
            auth_dot_v1_dot_user__service__pb2.ListUsersRequest.SerializeToString,
            auth_dot_v1_dot_user__service__pb2.ListUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.UserService/DeleteUser',
            auth_dot_v1_dot_user__service__pb2.DeleteUserRequest.SerializeToString,
            auth_dot_v1_dot_user__service__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.UserService/DeleteUsers',
            auth_dot_v1_dot_user__service__pb2.DeleteUsersRequest.SerializeToString,
            auth_dot_v1_dot_user__service__pb2.DeleteUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
