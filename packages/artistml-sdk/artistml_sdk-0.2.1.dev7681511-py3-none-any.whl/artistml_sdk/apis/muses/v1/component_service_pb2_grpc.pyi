"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import ...muses.v1.component_service_pb2

class ComponentServiceStub:
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Component Service"
        version: "1.0"
        contact: {
          name: "Component Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/muses/v1/component"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/muses/v1/component"
      }
    };

    The service that handles the CRUD of Component.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateComponent: grpc.UnaryUnaryMultiCallable[
        muses.v1.component_service_pb2.CreateComponentRequest,
        muses.v1.component_service_pb2.CreateComponentResponse]
    """Creates a Component."""

    GetComponent: grpc.UnaryUnaryMultiCallable[
        muses.v1.component_service_pb2.GetComponentRequest,
        muses.v1.component_service_pb2.GetComponentResponse]
    """Gets a Component."""

    UpdateComponent: grpc.UnaryUnaryMultiCallable[
        muses.v1.component_service_pb2.UpdateComponentRequest,
        muses.v1.component_service_pb2.UpdateComponentResponse]
    """Updates a Component."""

    ListComponents: grpc.UnaryUnaryMultiCallable[
        muses.v1.component_service_pb2.ListComponentsRequest,
        muses.v1.component_service_pb2.ListComponentsResponse]
    """Lists Components in a Location."""

    DeleteComponent: grpc.UnaryUnaryMultiCallable[
        muses.v1.component_service_pb2.DeleteComponentRequest,
        muses.v1.component_service_pb2.DeleteComponentResponse]
    """Deletes a Component."""

    DeleteComponents: grpc.UnaryUnaryMultiCallable[
        muses.v1.component_service_pb2.DeleteComponentsRequest,
        muses.v1.component_service_pb2.DeleteComponentsResponse]
    """Batch delete Component by filter."""


class ComponentServiceServicer(metaclass=abc.ABCMeta):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Component Service"
        version: "1.0"
        contact: {
          name: "Component Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/muses/v1/component"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/muses/v1/component"
      }
    };

    The service that handles the CRUD of Component.
    """
    @abc.abstractmethod
    def CreateComponent(self,
        request: muses.v1.component_service_pb2.CreateComponentRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.component_service_pb2.CreateComponentResponse:
        """Creates a Component."""
        pass

    @abc.abstractmethod
    def GetComponent(self,
        request: muses.v1.component_service_pb2.GetComponentRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.component_service_pb2.GetComponentResponse:
        """Gets a Component."""
        pass

    @abc.abstractmethod
    def UpdateComponent(self,
        request: muses.v1.component_service_pb2.UpdateComponentRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.component_service_pb2.UpdateComponentResponse:
        """Updates a Component."""
        pass

    @abc.abstractmethod
    def ListComponents(self,
        request: muses.v1.component_service_pb2.ListComponentsRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.component_service_pb2.ListComponentsResponse:
        """Lists Components in a Location."""
        pass

    @abc.abstractmethod
    def DeleteComponent(self,
        request: muses.v1.component_service_pb2.DeleteComponentRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.component_service_pb2.DeleteComponentResponse:
        """Deletes a Component."""
        pass

    @abc.abstractmethod
    def DeleteComponents(self,
        request: muses.v1.component_service_pb2.DeleteComponentsRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.component_service_pb2.DeleteComponentsResponse:
        """Batch delete Component by filter."""
        pass


def add_ComponentServiceServicer_to_server(servicer: ComponentServiceServicer, server: grpc.Server) -> None: ...
