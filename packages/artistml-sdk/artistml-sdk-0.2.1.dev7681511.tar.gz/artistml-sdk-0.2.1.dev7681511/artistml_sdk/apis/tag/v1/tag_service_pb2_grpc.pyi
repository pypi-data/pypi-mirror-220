"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import ...tag.v1.tag_service_pb2

class TagServiceStub:
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Tag Service"
        version: "1.0"
        contact: {
          name: "Tag Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/tag/v1/tag"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/tag/v1/tag"
      }
    };

    The service that handles the CRUD of Tag.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateTag: grpc.UnaryUnaryMultiCallable[
        tag.v1.tag_service_pb2.CreateTagRequest,
        tag.v1.tag_service_pb2.CreateTagResponse]
    """Creates a Tag."""

    GetTag: grpc.UnaryUnaryMultiCallable[
        tag.v1.tag_service_pb2.GetTagRequest,
        tag.v1.tag_service_pb2.GetTagResponse]
    """Gets a Tag."""

    UpdateTag: grpc.UnaryUnaryMultiCallable[
        tag.v1.tag_service_pb2.UpdateTagRequest,
        tag.v1.tag_service_pb2.UpdateTagResponse]
    """Updates a Tag."""

    ListTags: grpc.UnaryUnaryMultiCallable[
        tag.v1.tag_service_pb2.ListTagsRequest,
        tag.v1.tag_service_pb2.ListTagsResponse]
    """Lists Tags in a Location."""

    DeleteTag: grpc.UnaryUnaryMultiCallable[
        tag.v1.tag_service_pb2.DeleteTagRequest,
        tag.v1.tag_service_pb2.DeleteTagResponse]
    """Deletes a Tag."""

    DeleteTags: grpc.UnaryUnaryMultiCallable[
        tag.v1.tag_service_pb2.DeleteTagsRequest,
        tag.v1.tag_service_pb2.DeleteTagsResponse]
    """Batch delete Tag by filter."""


class TagServiceServicer(metaclass=abc.ABCMeta):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Tag Service"
        version: "1.0"
        contact: {
          name: "Tag Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/tag/v1/tag"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/tag/v1/tag"
      }
    };

    The service that handles the CRUD of Tag.
    """
    @abc.abstractmethod
    def CreateTag(self,
        request: tag.v1.tag_service_pb2.CreateTagRequest,
        context: grpc.ServicerContext,
    ) -> tag.v1.tag_service_pb2.CreateTagResponse:
        """Creates a Tag."""
        pass

    @abc.abstractmethod
    def GetTag(self,
        request: tag.v1.tag_service_pb2.GetTagRequest,
        context: grpc.ServicerContext,
    ) -> tag.v1.tag_service_pb2.GetTagResponse:
        """Gets a Tag."""
        pass

    @abc.abstractmethod
    def UpdateTag(self,
        request: tag.v1.tag_service_pb2.UpdateTagRequest,
        context: grpc.ServicerContext,
    ) -> tag.v1.tag_service_pb2.UpdateTagResponse:
        """Updates a Tag."""
        pass

    @abc.abstractmethod
    def ListTags(self,
        request: tag.v1.tag_service_pb2.ListTagsRequest,
        context: grpc.ServicerContext,
    ) -> tag.v1.tag_service_pb2.ListTagsResponse:
        """Lists Tags in a Location."""
        pass

    @abc.abstractmethod
    def DeleteTag(self,
        request: tag.v1.tag_service_pb2.DeleteTagRequest,
        context: grpc.ServicerContext,
    ) -> tag.v1.tag_service_pb2.DeleteTagResponse:
        """Deletes a Tag."""
        pass

    @abc.abstractmethod
    def DeleteTags(self,
        request: tag.v1.tag_service_pb2.DeleteTagsRequest,
        context: grpc.ServicerContext,
    ) -> tag.v1.tag_service_pb2.DeleteTagsResponse:
        """Batch delete Tag by filter."""
        pass


def add_TagServiceServicer_to_server(servicer: TagServiceServicer, server: grpc.Server) -> None: ...
