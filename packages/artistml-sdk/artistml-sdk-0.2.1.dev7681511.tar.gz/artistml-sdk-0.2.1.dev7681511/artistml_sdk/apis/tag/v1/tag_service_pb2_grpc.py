# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...tag.v1 import tag_service_pb2 as tag_dot_v1_dot_tag__service__pb2


class TagServiceStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Tag Service"
    version: "1.0"
    contact: {
    name: "Tag Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/tag/v1/tag"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/tag/v1/tag"
    }
    };

    The service that handles the CRUD of Tag.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTag = channel.unary_unary(
                '/tag.v1.TagService/CreateTag',
                request_serializer=tag_dot_v1_dot_tag__service__pb2.CreateTagRequest.SerializeToString,
                response_deserializer=tag_dot_v1_dot_tag__service__pb2.CreateTagResponse.FromString,
                )
        self.GetTag = channel.unary_unary(
                '/tag.v1.TagService/GetTag',
                request_serializer=tag_dot_v1_dot_tag__service__pb2.GetTagRequest.SerializeToString,
                response_deserializer=tag_dot_v1_dot_tag__service__pb2.GetTagResponse.FromString,
                )
        self.UpdateTag = channel.unary_unary(
                '/tag.v1.TagService/UpdateTag',
                request_serializer=tag_dot_v1_dot_tag__service__pb2.UpdateTagRequest.SerializeToString,
                response_deserializer=tag_dot_v1_dot_tag__service__pb2.UpdateTagResponse.FromString,
                )
        self.ListTags = channel.unary_unary(
                '/tag.v1.TagService/ListTags',
                request_serializer=tag_dot_v1_dot_tag__service__pb2.ListTagsRequest.SerializeToString,
                response_deserializer=tag_dot_v1_dot_tag__service__pb2.ListTagsResponse.FromString,
                )
        self.DeleteTag = channel.unary_unary(
                '/tag.v1.TagService/DeleteTag',
                request_serializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagRequest.SerializeToString,
                response_deserializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagResponse.FromString,
                )
        self.DeleteTags = channel.unary_unary(
                '/tag.v1.TagService/DeleteTags',
                request_serializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagsRequest.SerializeToString,
                response_deserializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagsResponse.FromString,
                )


class TagServiceServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Tag Service"
    version: "1.0"
    contact: {
    name: "Tag Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/tag/v1/tag"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/tag/v1/tag"
    }
    };

    The service that handles the CRUD of Tag.
    """

    def CreateTag(self, request, context):
        """Creates a Tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTag(self, request, context):
        """Gets a Tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTag(self, request, context):
        """Updates a Tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTags(self, request, context):
        """Lists Tags in a Location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTag(self, request, context):
        """Deletes a Tag.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTags(self, request, context):
        """Batch delete Tag by filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TagServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTag,
                    request_deserializer=tag_dot_v1_dot_tag__service__pb2.CreateTagRequest.FromString,
                    response_serializer=tag_dot_v1_dot_tag__service__pb2.CreateTagResponse.SerializeToString,
            ),
            'GetTag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTag,
                    request_deserializer=tag_dot_v1_dot_tag__service__pb2.GetTagRequest.FromString,
                    response_serializer=tag_dot_v1_dot_tag__service__pb2.GetTagResponse.SerializeToString,
            ),
            'UpdateTag': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTag,
                    request_deserializer=tag_dot_v1_dot_tag__service__pb2.UpdateTagRequest.FromString,
                    response_serializer=tag_dot_v1_dot_tag__service__pb2.UpdateTagResponse.SerializeToString,
            ),
            'ListTags': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTags,
                    request_deserializer=tag_dot_v1_dot_tag__service__pb2.ListTagsRequest.FromString,
                    response_serializer=tag_dot_v1_dot_tag__service__pb2.ListTagsResponse.SerializeToString,
            ),
            'DeleteTag': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTag,
                    request_deserializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagRequest.FromString,
                    response_serializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagResponse.SerializeToString,
            ),
            'DeleteTags': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTags,
                    request_deserializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagsRequest.FromString,
                    response_serializer=tag_dot_v1_dot_tag__service__pb2.DeleteTagsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tag.v1.TagService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TagService(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Tag Service"
    version: "1.0"
    contact: {
    name: "Tag Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/tag/v1/tag"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/tag/v1/tag"
    }
    };

    The service that handles the CRUD of Tag.
    """

    @staticmethod
    def CreateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tag.v1.TagService/CreateTag',
            tag_dot_v1_dot_tag__service__pb2.CreateTagRequest.SerializeToString,
            tag_dot_v1_dot_tag__service__pb2.CreateTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tag.v1.TagService/GetTag',
            tag_dot_v1_dot_tag__service__pb2.GetTagRequest.SerializeToString,
            tag_dot_v1_dot_tag__service__pb2.GetTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tag.v1.TagService/UpdateTag',
            tag_dot_v1_dot_tag__service__pb2.UpdateTagRequest.SerializeToString,
            tag_dot_v1_dot_tag__service__pb2.UpdateTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tag.v1.TagService/ListTags',
            tag_dot_v1_dot_tag__service__pb2.ListTagsRequest.SerializeToString,
            tag_dot_v1_dot_tag__service__pb2.ListTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tag.v1.TagService/DeleteTag',
            tag_dot_v1_dot_tag__service__pb2.DeleteTagRequest.SerializeToString,
            tag_dot_v1_dot_tag__service__pb2.DeleteTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tag.v1.TagService/DeleteTags',
            tag_dot_v1_dot_tag__service__pb2.DeleteTagsRequest.SerializeToString,
            tag_dot_v1_dot_tag__service__pb2.DeleteTagsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
