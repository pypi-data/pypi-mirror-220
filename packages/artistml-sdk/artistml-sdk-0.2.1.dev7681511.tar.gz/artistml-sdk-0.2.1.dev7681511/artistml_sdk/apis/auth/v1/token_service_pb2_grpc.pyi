"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ...auth.v1.token_service_pb2
import grpc

class TokenServiceStub:
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Token Service"
        version: "1.0"
        contact: {
          name: "Token Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/auth/v1/token"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/auth/v1/token"
      }
    };

    The service that handles the CRUD of Token.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateToken: grpc.UnaryUnaryMultiCallable[
        auth.v1.token_service_pb2.CreateTokenRequest,
        auth.v1.token_service_pb2.CreateTokenResponse]
    """Creates a Token."""

    GetToken: grpc.UnaryUnaryMultiCallable[
        auth.v1.token_service_pb2.GetTokenRequest,
        auth.v1.token_service_pb2.GetTokenResponse]
    """Gets a Token."""

    ListTokens: grpc.UnaryUnaryMultiCallable[
        auth.v1.token_service_pb2.ListTokensRequest,
        auth.v1.token_service_pb2.ListTokensResponse]
    """Lists Tokens in a Location."""

    DeleteToken: grpc.UnaryUnaryMultiCallable[
        auth.v1.token_service_pb2.DeleteTokenRequest,
        auth.v1.token_service_pb2.DeleteTokenResponse]
    """Deletes a Token."""

    DeleteTokens: grpc.UnaryUnaryMultiCallable[
        auth.v1.token_service_pb2.DeleteTokensRequest,
        auth.v1.token_service_pb2.DeleteTokensResponse]
    """Batch delete Token by filter."""


class TokenServiceServicer(metaclass=abc.ABCMeta):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Token Service"
        version: "1.0"
        contact: {
          name: "Token Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/auth/v1/token"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/auth/v1/token"
      }
    };

    The service that handles the CRUD of Token.
    """
    @abc.abstractmethod
    def CreateToken(self,
        request: auth.v1.token_service_pb2.CreateTokenRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.token_service_pb2.CreateTokenResponse:
        """Creates a Token."""
        pass

    @abc.abstractmethod
    def GetToken(self,
        request: auth.v1.token_service_pb2.GetTokenRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.token_service_pb2.GetTokenResponse:
        """Gets a Token."""
        pass

    @abc.abstractmethod
    def ListTokens(self,
        request: auth.v1.token_service_pb2.ListTokensRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.token_service_pb2.ListTokensResponse:
        """Lists Tokens in a Location."""
        pass

    @abc.abstractmethod
    def DeleteToken(self,
        request: auth.v1.token_service_pb2.DeleteTokenRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.token_service_pb2.DeleteTokenResponse:
        """Deletes a Token."""
        pass

    @abc.abstractmethod
    def DeleteTokens(self,
        request: auth.v1.token_service_pb2.DeleteTokensRequest,
        context: grpc.ServicerContext,
    ) -> auth.v1.token_service_pb2.DeleteTokensResponse:
        """Batch delete Token by filter."""
        pass


def add_TokenServiceServicer_to_server(servicer: TokenServiceServicer, server: grpc.Server) -> None: ...
