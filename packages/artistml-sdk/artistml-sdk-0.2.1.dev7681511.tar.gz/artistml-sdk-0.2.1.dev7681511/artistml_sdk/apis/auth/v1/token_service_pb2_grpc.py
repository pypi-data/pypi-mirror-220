# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...auth.v1 import token_service_pb2 as auth_dot_v1_dot_token__service__pb2


class TokenServiceStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Token Service"
    version: "1.0"
    contact: {
    name: "Token Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/auth/v1/token"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/auth/v1/token"
    }
    };

    The service that handles the CRUD of Token.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateToken = channel.unary_unary(
                '/auth.v1.TokenService/CreateToken',
                request_serializer=auth_dot_v1_dot_token__service__pb2.CreateTokenRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_token__service__pb2.CreateTokenResponse.FromString,
                )
        self.GetToken = channel.unary_unary(
                '/auth.v1.TokenService/GetToken',
                request_serializer=auth_dot_v1_dot_token__service__pb2.GetTokenRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_token__service__pb2.GetTokenResponse.FromString,
                )
        self.ListTokens = channel.unary_unary(
                '/auth.v1.TokenService/ListTokens',
                request_serializer=auth_dot_v1_dot_token__service__pb2.ListTokensRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_token__service__pb2.ListTokensResponse.FromString,
                )
        self.DeleteToken = channel.unary_unary(
                '/auth.v1.TokenService/DeleteToken',
                request_serializer=auth_dot_v1_dot_token__service__pb2.DeleteTokenRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_token__service__pb2.DeleteTokenResponse.FromString,
                )
        self.DeleteTokens = channel.unary_unary(
                '/auth.v1.TokenService/DeleteTokens',
                request_serializer=auth_dot_v1_dot_token__service__pb2.DeleteTokensRequest.SerializeToString,
                response_deserializer=auth_dot_v1_dot_token__service__pb2.DeleteTokensResponse.FromString,
                )


class TokenServiceServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Token Service"
    version: "1.0"
    contact: {
    name: "Token Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/auth/v1/token"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/auth/v1/token"
    }
    };

    The service that handles the CRUD of Token.
    """

    def CreateToken(self, request, context):
        """Creates a Token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetToken(self, request, context):
        """Gets a Token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTokens(self, request, context):
        """Lists Tokens in a Location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteToken(self, request, context):
        """Deletes a Token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTokens(self, request, context):
        """Batch delete Token by filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateToken,
                    request_deserializer=auth_dot_v1_dot_token__service__pb2.CreateTokenRequest.FromString,
                    response_serializer=auth_dot_v1_dot_token__service__pb2.CreateTokenResponse.SerializeToString,
            ),
            'GetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToken,
                    request_deserializer=auth_dot_v1_dot_token__service__pb2.GetTokenRequest.FromString,
                    response_serializer=auth_dot_v1_dot_token__service__pb2.GetTokenResponse.SerializeToString,
            ),
            'ListTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTokens,
                    request_deserializer=auth_dot_v1_dot_token__service__pb2.ListTokensRequest.FromString,
                    response_serializer=auth_dot_v1_dot_token__service__pb2.ListTokensResponse.SerializeToString,
            ),
            'DeleteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteToken,
                    request_deserializer=auth_dot_v1_dot_token__service__pb2.DeleteTokenRequest.FromString,
                    response_serializer=auth_dot_v1_dot_token__service__pb2.DeleteTokenResponse.SerializeToString,
            ),
            'DeleteTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTokens,
                    request_deserializer=auth_dot_v1_dot_token__service__pb2.DeleteTokensRequest.FromString,
                    response_serializer=auth_dot_v1_dot_token__service__pb2.DeleteTokensResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.v1.TokenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TokenService(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Token Service"
    version: "1.0"
    contact: {
    name: "Token Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/auth/v1/token"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/auth/v1/token"
    }
    };

    The service that handles the CRUD of Token.
    """

    @staticmethod
    def CreateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.TokenService/CreateToken',
            auth_dot_v1_dot_token__service__pb2.CreateTokenRequest.SerializeToString,
            auth_dot_v1_dot_token__service__pb2.CreateTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.TokenService/GetToken',
            auth_dot_v1_dot_token__service__pb2.GetTokenRequest.SerializeToString,
            auth_dot_v1_dot_token__service__pb2.GetTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.TokenService/ListTokens',
            auth_dot_v1_dot_token__service__pb2.ListTokensRequest.SerializeToString,
            auth_dot_v1_dot_token__service__pb2.ListTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.TokenService/DeleteToken',
            auth_dot_v1_dot_token__service__pb2.DeleteTokenRequest.SerializeToString,
            auth_dot_v1_dot_token__service__pb2.DeleteTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.v1.TokenService/DeleteTokens',
            auth_dot_v1_dot_token__service__pb2.DeleteTokensRequest.SerializeToString,
            auth_dot_v1_dot_token__service__pb2.DeleteTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
