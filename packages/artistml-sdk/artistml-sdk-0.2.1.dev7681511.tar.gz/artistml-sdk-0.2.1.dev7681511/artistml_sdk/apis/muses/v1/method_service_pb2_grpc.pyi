"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import ...muses.v1.method_service_pb2

class MethodServiceStub:
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Method Service"
        version: "1.0"
        contact: {
          name: "Method Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/muses/v1/method"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/muses/v1/method"
      }
    };

    The service that handles the CRUD of Method.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateMethod: grpc.UnaryUnaryMultiCallable[
        muses.v1.method_service_pb2.CreateMethodRequest,
        muses.v1.method_service_pb2.CreateMethodResponse]
    """Creates a Method."""

    GetMethod: grpc.UnaryUnaryMultiCallable[
        muses.v1.method_service_pb2.GetMethodRequest,
        muses.v1.method_service_pb2.GetMethodResponse]
    """Gets a Method."""

    UpdateMethod: grpc.UnaryUnaryMultiCallable[
        muses.v1.method_service_pb2.UpdateMethodRequest,
        muses.v1.method_service_pb2.UpdateMethodResponse]
    """Updates a Method."""

    ListMethods: grpc.UnaryUnaryMultiCallable[
        muses.v1.method_service_pb2.ListMethodsRequest,
        muses.v1.method_service_pb2.ListMethodsResponse]
    """Lists Methods in a Location."""

    DeleteMethod: grpc.UnaryUnaryMultiCallable[
        muses.v1.method_service_pb2.DeleteMethodRequest,
        muses.v1.method_service_pb2.DeleteMethodResponse]
    """Deletes a Method."""

    DeleteMethods: grpc.UnaryUnaryMultiCallable[
        muses.v1.method_service_pb2.DeleteMethodsRequest,
        muses.v1.method_service_pb2.DeleteMethodsResponse]
    """Batch delete Method by filter."""


class MethodServiceServicer(metaclass=abc.ABCMeta):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Method Service"
        version: "1.0"
        contact: {
          name: "Method Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/muses/v1/method"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/muses/v1/method"
      }
    };

    The service that handles the CRUD of Method.
    """
    @abc.abstractmethod
    def CreateMethod(self,
        request: muses.v1.method_service_pb2.CreateMethodRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.method_service_pb2.CreateMethodResponse:
        """Creates a Method."""
        pass

    @abc.abstractmethod
    def GetMethod(self,
        request: muses.v1.method_service_pb2.GetMethodRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.method_service_pb2.GetMethodResponse:
        """Gets a Method."""
        pass

    @abc.abstractmethod
    def UpdateMethod(self,
        request: muses.v1.method_service_pb2.UpdateMethodRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.method_service_pb2.UpdateMethodResponse:
        """Updates a Method."""
        pass

    @abc.abstractmethod
    def ListMethods(self,
        request: muses.v1.method_service_pb2.ListMethodsRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.method_service_pb2.ListMethodsResponse:
        """Lists Methods in a Location."""
        pass

    @abc.abstractmethod
    def DeleteMethod(self,
        request: muses.v1.method_service_pb2.DeleteMethodRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.method_service_pb2.DeleteMethodResponse:
        """Deletes a Method."""
        pass

    @abc.abstractmethod
    def DeleteMethods(self,
        request: muses.v1.method_service_pb2.DeleteMethodsRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.method_service_pb2.DeleteMethodsResponse:
        """Batch delete Method by filter."""
        pass


def add_MethodServiceServicer_to_server(servicer: MethodServiceServicer, server: grpc.Server) -> None: ...
