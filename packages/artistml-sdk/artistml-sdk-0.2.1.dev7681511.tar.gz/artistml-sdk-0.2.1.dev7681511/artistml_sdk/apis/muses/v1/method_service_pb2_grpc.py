# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...muses.v1 import method_service_pb2 as muses_dot_v1_dot_method__service__pb2


class MethodServiceStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Method Service"
    version: "1.0"
    contact: {
    name: "Method Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/muses/v1/method"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/muses/v1/method"
    }
    };

    The service that handles the CRUD of Method.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMethod = channel.unary_unary(
                '/muses.v1.MethodService/CreateMethod',
                request_serializer=muses_dot_v1_dot_method__service__pb2.CreateMethodRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_method__service__pb2.CreateMethodResponse.FromString,
                )
        self.GetMethod = channel.unary_unary(
                '/muses.v1.MethodService/GetMethod',
                request_serializer=muses_dot_v1_dot_method__service__pb2.GetMethodRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_method__service__pb2.GetMethodResponse.FromString,
                )
        self.UpdateMethod = channel.unary_unary(
                '/muses.v1.MethodService/UpdateMethod',
                request_serializer=muses_dot_v1_dot_method__service__pb2.UpdateMethodRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_method__service__pb2.UpdateMethodResponse.FromString,
                )
        self.ListMethods = channel.unary_unary(
                '/muses.v1.MethodService/ListMethods',
                request_serializer=muses_dot_v1_dot_method__service__pb2.ListMethodsRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_method__service__pb2.ListMethodsResponse.FromString,
                )
        self.DeleteMethod = channel.unary_unary(
                '/muses.v1.MethodService/DeleteMethod',
                request_serializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodResponse.FromString,
                )
        self.DeleteMethods = channel.unary_unary(
                '/muses.v1.MethodService/DeleteMethods',
                request_serializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodsRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodsResponse.FromString,
                )


class MethodServiceServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Method Service"
    version: "1.0"
    contact: {
    name: "Method Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/muses/v1/method"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/muses/v1/method"
    }
    };

    The service that handles the CRUD of Method.
    """

    def CreateMethod(self, request, context):
        """Creates a Method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMethod(self, request, context):
        """Gets a Method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMethod(self, request, context):
        """Updates a Method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMethods(self, request, context):
        """Lists Methods in a Location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMethod(self, request, context):
        """Deletes a Method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMethods(self, request, context):
        """Batch delete Method by filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MethodServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMethod,
                    request_deserializer=muses_dot_v1_dot_method__service__pb2.CreateMethodRequest.FromString,
                    response_serializer=muses_dot_v1_dot_method__service__pb2.CreateMethodResponse.SerializeToString,
            ),
            'GetMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMethod,
                    request_deserializer=muses_dot_v1_dot_method__service__pb2.GetMethodRequest.FromString,
                    response_serializer=muses_dot_v1_dot_method__service__pb2.GetMethodResponse.SerializeToString,
            ),
            'UpdateMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMethod,
                    request_deserializer=muses_dot_v1_dot_method__service__pb2.UpdateMethodRequest.FromString,
                    response_serializer=muses_dot_v1_dot_method__service__pb2.UpdateMethodResponse.SerializeToString,
            ),
            'ListMethods': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMethods,
                    request_deserializer=muses_dot_v1_dot_method__service__pb2.ListMethodsRequest.FromString,
                    response_serializer=muses_dot_v1_dot_method__service__pb2.ListMethodsResponse.SerializeToString,
            ),
            'DeleteMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMethod,
                    request_deserializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodRequest.FromString,
                    response_serializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodResponse.SerializeToString,
            ),
            'DeleteMethods': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMethods,
                    request_deserializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodsRequest.FromString,
                    response_serializer=muses_dot_v1_dot_method__service__pb2.DeleteMethodsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'muses.v1.MethodService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MethodService(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Method Service"
    version: "1.0"
    contact: {
    name: "Method Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/muses/v1/method"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/muses/v1/method"
    }
    };

    The service that handles the CRUD of Method.
    """

    @staticmethod
    def CreateMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.MethodService/CreateMethod',
            muses_dot_v1_dot_method__service__pb2.CreateMethodRequest.SerializeToString,
            muses_dot_v1_dot_method__service__pb2.CreateMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.MethodService/GetMethod',
            muses_dot_v1_dot_method__service__pb2.GetMethodRequest.SerializeToString,
            muses_dot_v1_dot_method__service__pb2.GetMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.MethodService/UpdateMethod',
            muses_dot_v1_dot_method__service__pb2.UpdateMethodRequest.SerializeToString,
            muses_dot_v1_dot_method__service__pb2.UpdateMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMethods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.MethodService/ListMethods',
            muses_dot_v1_dot_method__service__pb2.ListMethodsRequest.SerializeToString,
            muses_dot_v1_dot_method__service__pb2.ListMethodsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.MethodService/DeleteMethod',
            muses_dot_v1_dot_method__service__pb2.DeleteMethodRequest.SerializeToString,
            muses_dot_v1_dot_method__service__pb2.DeleteMethodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMethods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.MethodService/DeleteMethods',
            muses_dot_v1_dot_method__service__pb2.DeleteMethodsRequest.SerializeToString,
            muses_dot_v1_dot_method__service__pb2.DeleteMethodsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
