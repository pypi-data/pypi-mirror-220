# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ...muses.v1 import run_service_pb2 as muses_dot_v1_dot_run__service__pb2


class RunServiceStub(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Run Service"
    version: "1.0"
    contact: {
    name: "Run Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/muses/v1/run"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/muses/v1/run"
    }
    };

    The service that handles the CRUD of Run.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRun = channel.unary_unary(
                '/muses.v1.RunService/CreateRun',
                request_serializer=muses_dot_v1_dot_run__service__pb2.CreateRunRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_run__service__pb2.CreateRunResponse.FromString,
                )
        self.GetRun = channel.unary_unary(
                '/muses.v1.RunService/GetRun',
                request_serializer=muses_dot_v1_dot_run__service__pb2.GetRunRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_run__service__pb2.GetRunResponse.FromString,
                )
        self.UpdateRun = channel.unary_unary(
                '/muses.v1.RunService/UpdateRun',
                request_serializer=muses_dot_v1_dot_run__service__pb2.UpdateRunRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_run__service__pb2.UpdateRunResponse.FromString,
                )
        self.ListRuns = channel.unary_unary(
                '/muses.v1.RunService/ListRuns',
                request_serializer=muses_dot_v1_dot_run__service__pb2.ListRunsRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_run__service__pb2.ListRunsResponse.FromString,
                )
        self.DeleteRun = channel.unary_unary(
                '/muses.v1.RunService/DeleteRun',
                request_serializer=muses_dot_v1_dot_run__service__pb2.DeleteRunRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_run__service__pb2.DeleteRunResponse.FromString,
                )
        self.DeleteRuns = channel.unary_unary(
                '/muses.v1.RunService/DeleteRuns',
                request_serializer=muses_dot_v1_dot_run__service__pb2.DeleteRunsRequest.SerializeToString,
                response_deserializer=muses_dot_v1_dot_run__service__pb2.DeleteRunsResponse.FromString,
                )


class RunServiceServicer(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Run Service"
    version: "1.0"
    contact: {
    name: "Run Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/muses/v1/run"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/muses/v1/run"
    }
    };

    The service that handles the CRUD of Run.
    """

    def CreateRun(self, request, context):
        """Creates a Run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRun(self, request, context):
        """Gets a Run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRun(self, request, context):
        """Updates a Run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRuns(self, request, context):
        """Lists Runs in a Location.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRun(self, request, context):
        """Deletes a Run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRuns(self, request, context):
        """Batch delete Run by filter.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RunServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRun': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRun,
                    request_deserializer=muses_dot_v1_dot_run__service__pb2.CreateRunRequest.FromString,
                    response_serializer=muses_dot_v1_dot_run__service__pb2.CreateRunResponse.SerializeToString,
            ),
            'GetRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRun,
                    request_deserializer=muses_dot_v1_dot_run__service__pb2.GetRunRequest.FromString,
                    response_serializer=muses_dot_v1_dot_run__service__pb2.GetRunResponse.SerializeToString,
            ),
            'UpdateRun': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRun,
                    request_deserializer=muses_dot_v1_dot_run__service__pb2.UpdateRunRequest.FromString,
                    response_serializer=muses_dot_v1_dot_run__service__pb2.UpdateRunResponse.SerializeToString,
            ),
            'ListRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRuns,
                    request_deserializer=muses_dot_v1_dot_run__service__pb2.ListRunsRequest.FromString,
                    response_serializer=muses_dot_v1_dot_run__service__pb2.ListRunsResponse.SerializeToString,
            ),
            'DeleteRun': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRun,
                    request_deserializer=muses_dot_v1_dot_run__service__pb2.DeleteRunRequest.FromString,
                    response_serializer=muses_dot_v1_dot_run__service__pb2.DeleteRunResponse.SerializeToString,
            ),
            'DeleteRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRuns,
                    request_deserializer=muses_dot_v1_dot_run__service__pb2.DeleteRunsRequest.FromString,
                    response_serializer=muses_dot_v1_dot_run__service__pb2.DeleteRunsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'muses.v1.RunService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RunService(object):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
    title: "Run Service"
    version: "1.0"
    contact: {
    name: "Run Service"
    url: "http://github.com/artistml/apis"
    }
    }
    host: "github.com/artistml/apis"
    base_path: "/muses/v1/run"
    schemes: HTTP
    schemes: HTTPS
    consumes: "application/json"
    produces: "application/json"
    external_docs: {
    description: "API specification in Markdown",
    url: "http://github.com/artistml/apis/muses/v1/run"
    }
    };

    The service that handles the CRUD of Run.
    """

    @staticmethod
    def CreateRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.RunService/CreateRun',
            muses_dot_v1_dot_run__service__pb2.CreateRunRequest.SerializeToString,
            muses_dot_v1_dot_run__service__pb2.CreateRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.RunService/GetRun',
            muses_dot_v1_dot_run__service__pb2.GetRunRequest.SerializeToString,
            muses_dot_v1_dot_run__service__pb2.GetRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.RunService/UpdateRun',
            muses_dot_v1_dot_run__service__pb2.UpdateRunRequest.SerializeToString,
            muses_dot_v1_dot_run__service__pb2.UpdateRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.RunService/ListRuns',
            muses_dot_v1_dot_run__service__pb2.ListRunsRequest.SerializeToString,
            muses_dot_v1_dot_run__service__pb2.ListRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.RunService/DeleteRun',
            muses_dot_v1_dot_run__service__pb2.DeleteRunRequest.SerializeToString,
            muses_dot_v1_dot_run__service__pb2.DeleteRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/muses.v1.RunService/DeleteRuns',
            muses_dot_v1_dot_run__service__pb2.DeleteRunsRequest.SerializeToString,
            muses_dot_v1_dot_run__service__pb2.DeleteRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
