"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc
import ...muses.v1.run_service_pb2

class RunServiceStub:
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Run Service"
        version: "1.0"
        contact: {
          name: "Run Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/muses/v1/run"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/muses/v1/run"
      }
    };

    The service that handles the CRUD of Run.
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateRun: grpc.UnaryUnaryMultiCallable[
        muses.v1.run_service_pb2.CreateRunRequest,
        muses.v1.run_service_pb2.CreateRunResponse]
    """Creates a Run."""

    GetRun: grpc.UnaryUnaryMultiCallable[
        muses.v1.run_service_pb2.GetRunRequest,
        muses.v1.run_service_pb2.GetRunResponse]
    """Gets a Run."""

    UpdateRun: grpc.UnaryUnaryMultiCallable[
        muses.v1.run_service_pb2.UpdateRunRequest,
        muses.v1.run_service_pb2.UpdateRunResponse]
    """Updates a Run."""

    ListRuns: grpc.UnaryUnaryMultiCallable[
        muses.v1.run_service_pb2.ListRunsRequest,
        muses.v1.run_service_pb2.ListRunsResponse]
    """Lists Runs in a Location."""

    DeleteRun: grpc.UnaryUnaryMultiCallable[
        muses.v1.run_service_pb2.DeleteRunRequest,
        muses.v1.run_service_pb2.DeleteRunResponse]
    """Deletes a Run."""

    DeleteRuns: grpc.UnaryUnaryMultiCallable[
        muses.v1.run_service_pb2.DeleteRunsRequest,
        muses.v1.run_service_pb2.DeleteRunsResponse]
    """Batch delete Run by filter."""


class RunServiceServicer(metaclass=abc.ABCMeta):
    """option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
     info: {
        title: "Run Service"
        version: "1.0"
        contact: {
          name: "Run Service"
          url: "http://github.com/artistml/apis"
        }
      }
      host: "github.com/artistml/apis"
      base_path: "/muses/v1/run"
      schemes: HTTP
      schemes: HTTPS
      consumes: "application/json"
      produces: "application/json"
      external_docs: {
        description: "API specification in Markdown",
        url: "http://github.com/artistml/apis/muses/v1/run"
      }
    };

    The service that handles the CRUD of Run.
    """
    @abc.abstractmethod
    def CreateRun(self,
        request: muses.v1.run_service_pb2.CreateRunRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.run_service_pb2.CreateRunResponse:
        """Creates a Run."""
        pass

    @abc.abstractmethod
    def GetRun(self,
        request: muses.v1.run_service_pb2.GetRunRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.run_service_pb2.GetRunResponse:
        """Gets a Run."""
        pass

    @abc.abstractmethod
    def UpdateRun(self,
        request: muses.v1.run_service_pb2.UpdateRunRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.run_service_pb2.UpdateRunResponse:
        """Updates a Run."""
        pass

    @abc.abstractmethod
    def ListRuns(self,
        request: muses.v1.run_service_pb2.ListRunsRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.run_service_pb2.ListRunsResponse:
        """Lists Runs in a Location."""
        pass

    @abc.abstractmethod
    def DeleteRun(self,
        request: muses.v1.run_service_pb2.DeleteRunRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.run_service_pb2.DeleteRunResponse:
        """Deletes a Run."""
        pass

    @abc.abstractmethod
    def DeleteRuns(self,
        request: muses.v1.run_service_pb2.DeleteRunsRequest,
        context: grpc.ServicerContext,
    ) -> muses.v1.run_service_pb2.DeleteRunsResponse:
        """Batch delete Run by filter."""
        pass


def add_RunServiceServicer_to_server(servicer: RunServiceServicer, server: grpc.Server) -> None: ...
