{"version":3,"file":"static/js/3249.a2010c2d.js","mappings":"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","sources":["webpack://platypush/./src/components/panels/MusicMpd/Index.vue","webpack://platypush/./src/components/panels/MusicMpd/Index.vue?9486"],"sourcesContent":["<template>\n  <Loading v-if=\"loading\" />\n  <MusicPlugin plugin-name=\"music.mpd\" :loading=\"loading\" :config=\"config\" :tracks=\"tracks\" :status=\"status\"\n               :playlists=\"playlists\" :edited-playlist=\"editedPlaylist\" :edited-playlist-tracks=\"editedPlaylistTracks\"\n               :track-info=\"trackInfo\" :search-results=\"searchResults\" :library-results=\"libraryResults\" :path=\"path\"\n               @play=\"play\" @pause=\"pause\" @stop=\"stop\" @previous=\"previous\" @next=\"next\" @clear=\"clear\"\n               @set-volume=\"setVolume\" @seek=\"seek\" @consume=\"consume\" @random=\"random\" @repeat=\"repeat\"\n               @status-update=\"refreshStatus(true)\" @playlist-update=\"refresh(true)\"\n               @new-playing-track=\"refreshStatus(true)\" @remove-from-tracklist=\"removeFromTracklist\"\n               @add-to-tracklist=\"addToTracklist\" @swap-tracks=\"swapTracks\" @load-playlist=\"loadPlaylist\"\n               @play-playlist=\"playPlaylist\" @remove-playlist=\"removePlaylist\" @tracklist-move=\"moveTracklistTracks\"\n               @tracklist-save=\"saveToPlaylist\" @playlist-edit=\"playlistEditChanged\"\n               @add-to-tracklist-from-edited-playlist=\"addToTracklistFromEditedPlaylist\"\n               @remove-from-playlist=\"removeFromPlaylist\" @info=\"trackInfo = $event\" @playlist-add=\"playlistAdd\"\n               @add-to-playlist=\"addToPlaylist\" @playlist-track-move=\"playlistTrackMove\" @search=\"search\"\n               @search-clear=\"searchResults = []\" @cd=\"cd\"/>\n</template>\n\n<script>\nimport MusicPlugin from \"@/components/panels/Music/Index\";\nimport Utils from \"@/Utils\";\nimport Loading from \"@/components/Loading\";\n\nexport default {\n  name: \"MusicMpd\",\n  components: {Loading, MusicPlugin},\n  mixins: [Utils],\n  props: {\n    config: {\n      type: Object,\n      default: () => {},\n    },\n  },\n\n  data() {\n    return {\n      loading: false,\n      tracks: [],\n      playlists: [],\n      status: {},\n      editedPlaylist: null,\n      editedPlaylistTracks: [],\n      trackInfo: null,\n      searchResults: [],\n      libraryResults: [],\n      path: '/',\n    }\n  },\n\n  methods: {\n    async refreshTracks(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.tracks = await this.request('music.mpd.playlistinfo')\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshStatus(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.status = Object.entries(await this.request('music.mpd.status')).reduce((obj, [k, v]) => {\n          switch (k) {\n            case 'bitrate':\n            case 'volume':\n              obj[k] = parseInt(v)\n              break\n\n            case 'consume':\n            case 'random':\n            case 'repeat':\n            case 'single':\n              obj[k] = !!parseInt(v)\n              break\n\n            case 'song':\n              obj['playingPos'] = parseInt(v)\n              break\n\n            case 'time':\n              [obj['elapsed'], obj['duration']] = v.split(':').map(t => parseInt(t))\n              break\n\n            case 'elapsed':\n              break\n\n            default:\n              obj[k] = v\n              break\n          }\n\n          return obj\n        }, {})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refreshPlaylists(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        this.playlists = (await this.request('music.mpd.listplaylists')).map((playlist) => {\n          return {\n            name: playlist.playlist,\n            lastModified: playlist['last-modified'],\n          }\n        }).sort((a, b) => a.name.localeCompare(b.name))\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async refresh(background) {\n      if (!background)\n        this.loading = true\n\n      try {\n        await Promise.all([\n          this.refreshTracks(background),\n          this.refreshStatus(background),\n          this.refreshPlaylists(background),\n        ])\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async play(event) {\n      if (event?.pos != null) {\n        await this.request('music.mpd.play_pos', {pos: event.pos})\n      } else if (event?.file) {\n        await this.request('music.mpd.play', {resource: event.file})\n      } else {\n        await this.request('music.mpd.play')\n      }\n\n      await this.refreshStatus(true)\n    },\n\n    async pause() {\n      await this.request('music.mpd.pause')\n      await this.refreshStatus(true)\n    },\n\n    async stop() {\n      await this.request('music.mpd.stop')\n      await this.refreshStatus(true)\n    },\n\n    async previous() {\n      await this.request('music.mpd.previous')\n      await this.refreshStatus(true)\n    },\n\n    async next() {\n      await this.request('music.mpd.next')\n      await this.refreshStatus(true)\n    },\n\n    async clear() {\n      await this.request('music.mpd.clear')\n      await Promise.all([this.refreshStatus(true), this.refreshTracks(true)])\n    },\n\n    async setVolume(volume) {\n      if (volume === this.status.volume)\n        return\n\n      await this.request('music.mpd.set_volume', {volume: volume})\n      await this.refreshStatus(true)\n    },\n\n    async seek(pos) {\n      await this.request('music.mpd.seek', {position: pos})\n      await this.refreshStatus(true)\n    },\n\n    async repeat(value) {\n      await this.request('music.mpd.repeat', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async random(value) {\n      await this.request('music.mpd.random', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async consume(value) {\n      await this.request('music.mpd.consume', {value: parseInt(+value)})\n      await this.refreshStatus(true)\n    },\n\n    async addToTracklist(resource) {\n      if (resource.file)\n        resource = resource.file\n\n      await this.request('music.mpd.add', {resource: resource})\n      await this.refresh(true)\n    },\n\n    async addToTracklistFromEditedPlaylist(event) {\n      const track = this.editedPlaylistTracks[event.pos]\n      if (!track)\n        return\n\n      await this.request('music.mpd.add', {resource: track.file})\n      await this.refresh(true)\n\n      if (event.play)\n        await this.request('music.mpd.play_pos', {pos: this.tracks.length-1})\n    },\n\n    async removeFromPlaylist(positions) {\n      await this.request('music.mpd.playlistdelete',\n          {pos: positions, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async removeFromTracklist(positions) {\n      await this.request('music.mpd.delete', {positions: positions.sort()})\n      await this.refresh(true)\n    },\n\n    async swapTracks(positions) {\n      await this.request('music.mpd.move', {from_pos: positions[0], to_pos: positions[1]})\n      await this.refresh(true)\n    },\n\n    async playPlaylist(position) {\n      await this._loadPlaylist(position, true)\n    },\n\n    async loadPlaylist(position) {\n      await this._loadPlaylist(position, false)\n    },\n\n    async _loadPlaylist(position, play) {\n      const playlist = this.playlists[position]\n      await this.request('music.mpd.load', {playlist: playlist.name, play: play})\n      await this.refresh(true)\n    },\n\n    async removePlaylist(position) {\n      const playlist = this.playlists[position]\n      if (!confirm(`Are you REALLY sure that you want to remove the playlist ${playlist.name}?`))\n        return\n\n      await this.request('music.mpd.rm', {playlist: playlist.name})\n      await this.refreshPlaylists(true)\n    },\n\n    async saveToPlaylist(name) {\n      await this.request('music.mpd.save', {name: name})\n      await this.refreshPlaylists(true)\n    },\n\n    async moveTracklistTracks(event) {\n      await this.request('music.mpd.move', {from_pos: event.from, to_pos: event.to})\n      await this.refreshTracks(true)\n    },\n\n    async playlistAdd(track) {\n      await this.request('music.mpd.playlistadd', {uri: track, name: this.playlists[this.editedPlaylist].name})\n      await this.playlistEditChanged(this.editedPlaylist)\n    },\n\n    async playlistEditChanged(playlist) {\n      this.editedPlaylist = playlist\n      if (playlist == null)\n        return\n\n      this.loading = true\n      try {\n        this.editedPlaylistTracks = await this.request('music.mpd.listplaylistinfo',\n            {name: this.playlists[playlist].name})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async addToPlaylist(event) {\n      await Promise.all(event.playlists.map(async (playlistIdx) => {\n        await this.request('music.mpd.playlistadd', {\n          uri: event.track.file,\n          name: this.playlists[playlistIdx].name\n        })\n\n        await this.playlistEditChanged(playlistIdx)\n      }))\n    },\n\n    async playlistTrackMove(event) {\n      await this.request('music.mpd.playlistmove', {\n        name: this.playlists[event.playlist].name,\n        from_pos: event.from,\n        to_pos: event.to,\n      })\n\n      await this.playlistEditChanged(event.playlist)\n    },\n\n    async search(query) {\n      this.loading = true\n\n      try {\n        this.searchResults = await this.request('music.mpd.search', {filter: query})\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async cd(path) {\n      this.loading = true\n\n      try {\n        this.libraryResults = (await this.request('music.mpd.lsinfo', {uri: path})).\n          filter((result) => !result.playlist)\n\n        this.path = path\n      } finally {\n        this.loading = false\n      }\n    },\n  },\n\n  mounted() {\n    this.refresh()\n    this.cd(this.path)\n  },\n}\n</script>\n","import { render } from \"./Index.vue?vue&type=template&id=e343abe6\"\nimport script from \"./Index.vue?vue&type=script&lang=js\"\nexport * from \"./Index.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/blacklight/git_tree/platypush/platypush/backend/http/webapp/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["loading","config","tracks","status","playlists","editedPlaylist","editedPlaylistTracks","trackInfo","searchResults","libraryResults","path","play","pause","stop","previous","next","clear","setVolume","seek","consume","random","repeat","refreshStatus","refresh","removeFromTracklist","addToTracklist","swapTracks","loadPlaylist","playPlaylist","removePlaylist","moveTracklistTracks","saveToPlaylist","playlistEditChanged","addToTracklistFromEditedPlaylist","removeFromPlaylist","$event","playlistAdd","addToPlaylist","playlistTrackMove","search","cd","name","components","Loading","MusicPlugin","mixins","Utils","props","type","Object","default","data","methods","async","background","this","request","entries","reduce","obj","k","v","parseInt","split","map","t","playlist","lastModified","sort","a","b","localeCompare","Promise","all","refreshTracks","refreshPlaylists","event","pos","file","resource","volume","position","value","track","length","positions","from_pos","to_pos","_loadPlaylist","confirm","from","to","uri","playlistIdx","query","filter","result","mounted","__exports__","render"],"sourceRoot":""}